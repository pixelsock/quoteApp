(function () {
  'use strict';

  const SourceLocation$3 ={
    __proto__: null

  , get [Symbol.toStringTag]() {return '«SourceLocation»'}
  , toString() {return `«${this.line}:${this.column}»`}
  , get column() {return this.pos - this.line_pos}

  , create(source, file) {
      const root ={
        line:0, pos:0, line_pos:0
      , __proto__: SourceLocation$3};

      if (null != file) {
        root.file = file;}

      Object.defineProperties(root,{
        __root__:{value: root}
      , source:{value: source} } );
      return Object.freeze(root) }

  , nextLine() {
      let {line, pos} = this;
      line += 1;
      return Object.freeze({
        line, pos, line_pos: pos,
        __proto__: this.__root__}) }

  , move(char_len) {
      if ('string' === typeof char_len) {
        char_len = char_len.length;}
      else if ('number' === typeof char_len) {
        char_len |= 0;}
      else throw new TypeError('Expected move to be a string or number')

      let {line, pos, line_pos} = this;
      pos += char_len;
      return Object.freeze({
        line, pos, line_pos,
        __proto__: this.__root__}) }

  , distance(other) {
      const lines = this.line - other.line;
      const chars = this.pos - other.pos;
      return {lines, chars} }

  , slice(other) {
      if (this.source !== other.source) {
        throw new Error(`Locations from different sources`) }
      return this.source.slice(this.pos, other.pos) }

  , syntaxError(message) {
      const err = new SyntaxError(message);
      err.src_loc = this;
      return err} };

  var createLoc$2 = SourceLocation$3.create;

  const rx_lines$2 = /(\r\n|\r|\n)/ ;
  const rx_indent$2 = /^([ \t]*)(.*)$/ ;
  const rx_indent_order$2 = /^[\t]*[ ]*$/ ;

  function basic_offside_scanner$2(source, feedback) {
    if (null == feedback) {
      feedback ={
        warn(msg, ...args) {console.warn(`[Offside Warning]:: ${msg}`, ...args);} }; }

    const all_lines = [];
    const q_raw_lines = source.split(rx_lines$2);

    const offside_line_proto ={
      __proto__: null
    , get source() {
        const {start, end} = this.loc;
        return start.slice(end)} };

    let loc_tip = createLoc$2(source, feedback.file);

    while (0 !== q_raw_lines.length) {
      const loc ={start: loc_tip = loc_tip.nextLine()};

      const src_line = q_raw_lines.shift() || '';
      loc.end = loc_tip = loc_tip.move(src_line);

      const src_line_end = q_raw_lines.shift() || '';
      loc_tip = loc_tip.move(src_line_end);


      const match = rx_indent$2.exec(src_line);
      const loc_indent = loc.start.move(match[1]);
      const is_blank = 0 === match[2].length;

      if (! rx_indent_order$2.test(match[1])) {
        throw loc.start.syntaxError(`Mixed tab and space indent (${loc_indent})`, ) }

      const raw ={
        line: src_line
      , line_end: src_line_end
      , indent: match[1]
      , content: match[2]};

      let node;
      if (is_blank) {
        node ={
          type: 'offside_blank_line', loc
        , is_blank}; }

      else {
        const indent_node ={
          type: 'offside_indent',
          loc:{
            start: loc.start
          , end: loc_indent}
        , len_indent: match[1].length
        , indent: match[1]};

        const conent_node ={
          type: 'offside_content',
          loc:{
            start: loc_indent
          , end: loc.end}
        , len_indent: match[1].length
        , indent: match[1]
        , content: match[2]};

        node ={
          __proto__: offside_line_proto
        , type: 'offside_line', loc
        , indent: indent_node
        , content: conent_node
        , len_indent: match[1].length}; }

      Object.defineProperties(node,{raw: {value: raw}});
      all_lines.push(node); }

    add_indent_info$2(all_lines);
    return all_lines}


  function add_indent_info$2(all_lines) {
    let len_dedent = 0; // how far to dedent to next outer level
    let len_stack = [0];
    // work backwards from the file end
    for (let i = all_lines.length-1 ; i>=0 ; i--) {
      let ln = all_lines[i];
      if (ln.is_blank) {continue}

      ln.len_dedent = len_dedent;

      // how many indent prefix chars per line
      let len_indent = ln.len_indent;

      let len_inner;
      while (len_stack[0] > len_indent) {
        len_inner = len_stack.shift();}

      if (len_stack[0] < len_indent) {
        // len_indent is the new stack tip
        len_stack.unshift(len_indent); }

      if (len_inner) {
        ln.len_inner = len_inner;}

      len_dedent = len_indent;} }

  function ensure_indent$2(ctx, scanner) {
    const ln_first = scanner.ln_first;
    if (undefined === ln_first) {return true}
    const len_first_indent = ln_first.len_indent;

    const d_dedent = ctx.ln.len_indent - len_first_indent;
    if (d_dedent < 0) {
      throw ctx.ln.indent.loc.end.syntaxError(
`Invalid indent level in ${scanner.description}. (${ctx.ln.indent.loc.end})  --  current indent: ${ctx.ln.len_indent}  start indent: ${len_first_indent} from (${ln_first.loc.start})`  ) }
    else return true}


  function ensure_progress$2(loc0, loc1) {
    if (loc0.pos == loc1.pos) {
      throw new Error(`Scanner failed to make progress (${loc1})`) }

    if (loc0.pos > loc1.pos) {
      throw new Error(`Scanner went backward (${loc1} from ${loc0})`) } }


  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  let DispatchScanner$2 = class DispatchScanner {
    constructor(disp_name) {
      this.disp_name = disp_name || 'root';
      this.by_kind = {};
      this.by_op = {};}

    startCompile() {
      Object.defineProperties(this,{
        rx_list:{value: (this.rx_list || []).slice()} } );
      this.by_kind = Object.assign({}, this.by_kind);
      this.by_op = Object.assign({}, this.by_op);
      return this}

    addScannerList(scannerList) {
      for (const scanner of scannerList) {
        if (scanner) {
          this.addScanner(scanner);} }
      return this}

    addScanner(scanner) {
      if (scanner.withDispatch) {
        scanner = scanner.withDispatch(this);}

      if (scanner.is_body) {
        this.ds_body = scanner;}

      this.by_op[scanner.op] = scanner;}

    addRegExpScanner(scanner, kind, re_disp) {
      if (kind) {
        this.by_kind[kind] = scanner.op;
        this.rx_list.push(new RegExp(re_disp, 'g')); }
      return this}

    finishCompile(ds_body) {
      if (undefined === ds_body) {
        ds_body = this.ds_body;}
      return Object.defineProperties(this,{
        ds_body:{value: ds_body, writable: true} } ) }


    clone0() {
      if (undefined !== this.level) {
        throw new Error(`Invalid clone0`) }
      return this.cloneWithScanner()}

    cloneWithScanner(...scanners) {
      return this.cloneWithScannerList(scanners)}
    cloneWithScannerList(scanners) {
      const self = Object.create(this);
      self.level = 1 + 0|self.level;
      self.description = self.description.replace(
        /\(\d+\)/, `(${self.level})`);

      self.startCompile();
      self.addScannerList(scanners);
      self.finishCompile();
      return self}


    get_active_dispatch(ctx) {
      return ctx[`dispatch_${this.disp_name}`]}
    set_active_dispatch(ctx) {
      ctx.dispatch = ctx[`dispatch_${this.disp_name}`] = this;}


    newline(ctx, is_blank) {}

    scan(ctx, idx0) {
      const loc0 = ctx.loc_tip;
      const res = this._scan(ctx, idx0);
      ensure_progress$2(loc0, ctx.loc_tip);
      return res}

    _scan(ctx, idx0) {
      this.set_active_dispatch(ctx);

      if (undefined === this.ln_first) {
        if (undefined === this.level) {
          throw new Error('Scanner with level: undefined')}

        this.ln_first = ctx.ln;}

      ensure_indent$2(ctx, this);

      const source = ctx.ln_source; // slice is done by setting lastIndex
      let match=null, idx1 = Infinity;

      for (const rx of this.rx_list) {
        rx.lastIndex = idx0; // regexp powered source.slice()

        const m = rx.exec(source);
        if (null !== m && m.index < idx1) {
          idx1 = m.index;
          match = m;} }

      if (null === match) {
        return this.ds_body.scan(ctx, idx0)}

      if (idx0 !== idx1) {
        return this.ds_body.scan_fragment(
          ctx, source.slice(idx0, idx1)) }

      const kind = match.filter(Boolean)[1];
      const op = this.by_kind[kind];
      const op_scanner = this.by_op[op];
      if (! op_scanner) {
        throw new Error(`No scanner registered for « ${kind} »`) }

      return op_scanner.scan(ctx, idx1)}

    scan_fragment(ctx, content) {
      throw new Error(`${this.description} does not support fragments`) } };


  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  let DispatchFirstlineScanner$2 = class DispatchFirstlineScanner extends DispatchScanner$2 {
    clone0() {
      const self = super.clone0();
      self.ds_body = self.ds_body.clone0();
      return self}
    scan(ctx, idx0) {
      ctx.scanner = this.ds_body;
      return super.scan(ctx, idx0)} };


  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  let BaseSourceScanner$2 = class BaseSourceScanner {
    constructor(options) {
      Object.assign(this, options);
      this._compileForInit();}

    _compileForInit() {}

    withDispatch(ds) {return this}

    emit_ast(ctx, content, ast_type) {
      const start = ctx.loc_tip;
      const end = ctx.loc_tip = start.move(content || 0);
      const ast ={type: ast_type || this.op, loc: {start, end}, content};
      this.ast_extend(ctx, ast);
      ctx.parts.push(ast);
      return ast}

    ast_extend(ctx, ast) {}

    newline(ctx, is_blank) {}
    scan_fragment(ctx, content) {
      throw new Error(`Scanner (${this.description}) does not support fragments`) }
    scan(ctx, idx0) {
      throw new Error(`Scanner (${this.description}) does not support scans`) } };


  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  let SourceCodeScanner$2 = class SourceCodeScanner extends BaseSourceScanner$2 {
    get is_body() {return true}

    scan_fragment(ctx, content) {
      this.scan_content(ctx, content); }

    scan(ctx, idx0) {
      this.scan_content(ctx, ctx.ln_source.slice(idx0)); }

    scan_content(ctx, content) {
      if (content) {
        this.emit_ast(ctx, content); } } };


  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  let NestedCodeScanner$2 = class NestedCodeScanner extends SourceCodeScanner$2 {
    constructor(options) {
      super(options);
      if (! this.char_pairs) {
        throw new Error('Missing required char_pairs mapping') }

      const chars = Object.keys(this.char_pairs).join('\\');
      this.rx = new RegExp(`([${chars}])`);}

    withOuter(options) {
      const scanner = options.scanner;
      if ('function' !== typeof scanner.scan) {
        throw new Error(`Expected valid outer scanner`) }
      delete options.scanner;

      const self = Object.create(this,{
        restore_scanner:{value: scanner} } );
      Object.assign(self, options);
      return self}

    scan_content(ctx, nested_content) {
      const {stack, char_pairs} = this;

      let content = '';
      for (const tok of nested_content.split(this.rx)) {
        const p = 1 === tok.length ? char_pairs[tok] : undefined;

        if (undefined === p) {
          content += tok;
          continue}

        if (true === p) {
          content += tok;
          stack.push(tok);
          continue}

        const tip = stack.pop();
        if (tip !== p) {
          const loc = ctx.loc_tip.move(content);
          throw loc.syntaxError(
      `Mismatched nesting in ${this.description} (${loc})`) }

        if (0 !== stack.length) {
          content += tok;
          continue}

        if (content) {
          this.emit_ast(ctx, content); }
        this.emit_ast(ctx, tok, this.ast_end || 'nested_end');
        ctx.scanner = this.restore_scanner;
        return}

      // all tokens with non-zero stack
      if (content) {
        this.emit_ast(ctx, content); } } };


  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  let RegExpScanner$2 = class RegExpScanner extends BaseSourceScanner$2 {

    _compileForInit() {
      const {rx_open, rx_close} = this;
      const rx_disp = new RegExp(
        (rx_open ? rx_open.source : '') + rx_close.source);

      const rx_resume = new RegExp(
        '^' + rx_close.source);

      Object.defineProperties(this,{
        rx_disp:{value: rx_disp}
      , rx_resume:{value: rx_resume} } ); }

    withDispatch(ds) {
      this.compileForDispatch(ds);
      return this}

    compileForDispatch(ds) {
      if (undefined === this.kind) {return}

      const match = this.rx_disp.exec(this.example);
      if (null === match || this.kind !== match[1] || null == match[2]) {
        throw new Error(`Invalid scanner regexp and/or example (${this.description})`) }

      ds.addRegExpScanner(this, this.kind, this.rx_disp.source); }



    newline(ctx, is_blank) {
      if (! this.multiline && ! this.allow_blank_close) {
        throw ctx.ln.loc.end.syntaxError(
    `Newline in ${this.description} (${ctx.ln.loc.end})`) } }

    ast_extend(ctx, ast) {
      const ln = this.ln_first || ctx.ln;
      if (undefined !== ln.len_inner) {
        ast.block_indent = ln.len_inner;}
      return ast}

    scan(ctx, idx0) {
      const match = this.rx_disp.exec(ctx.ln_source.slice(idx0));
      if (null === match) {
        throw ctx.loc_tip.syntaxError(
    `Invalid scan ${this.description}. (${ctx.loc_tip})`) }

      const [content, open, close] = match;

      const t_content = this.nestTrim(content, close, false);
      if (null != t_content) {
        this.ast_scan_match({open, close},
          this.emit_ast(ctx, t_content,) ); }
      return this.post_scan(ctx, close)}

    scan_continue(ctx, idx0) {
      ensure_indent$2(ctx, this);

      const match = this.rx_resume.exec(ctx.ln_source.slice(idx0));
      if (null === match) {
        throw ctx.loc_tip.syntaxError(
    `Invalid scan continue ${this.description}. (${ctx.loc_tip})`) }

      const [content, close] = match;

      const t_content = this.nestTrim(content, close, true);
      if (null != t_content) {
        this.ast_scan_match({close},
          this.emit_ast(ctx, t_content,) ); }
      return this.post_scan(ctx, close)}

    ast_scan_match(match, ast) {}

    nestTrim(content, close, isContinue) {return content}

    post_scan(ctx, close) {
      if (! close) {
        if (this.invert_close) {
          // e.g. no '\' continuations at end of line
          return true}

        if (! this.allow_blank_close) {
          ctx.scanner = this.continueScanner(ctx);}
        return}

      else if (this.invert_close) {
        // e.g. '\' continuations at end of line
        ctx.scanner = this.continueScanner(ctx);}

      return this.nestMatch(close,
        ctx, this.hostScanner || this) }

    nestMatch(close, ctx, hostScanner) {
      const nesting = this.nesting;
      if (undefined !== nesting) {
        return this.nestWith(
          nesting[close],
          ctx, hostScanner) }
      return true }// pop ctx.scanner

    nestWith(nested, ctx, hostScanner) {
      if (true === nested || undefined === nested || null === nested) {
        return true }// pop ctx.scanner

      else if (hostScanner === nested || 'host' === nested) {
        ctx.scanner = hostScanner.continueScanner(ctx);
        return}

      else if ('function' === typeof nested.nestedScanner) {
        ctx.scanner = nested.nestedScanner(ctx);
        return}

      else if ('function' === typeof nested) {
        return nested(ctx, hostScanner) }

      return nested}


    nestedScanner(ctx) {
      return this._asNestedScanner(ctx, 'nest',{} ) }

    continueScanner(ctx) {
      return this._asNestedScanner(ctx, 'cont',{
        op: this.op_continue || this.op
      , continueScanner(ctx) {return this}
      , scan(ctx, idx0) {
          this.scan_continue(ctx, idx0);} } ) }

    _asNestedScanner(ctx, desc, body) {
      const restore_scanner = ctx.scanner;
      const self ={
        __proto__: this
      , description: `${this.description} (${desc})`
      , ln_first: ctx.ln_first || ctx.ln

      , _pop_scanner(ctx) {
          if (this.op_pop) {
            this.emit_ast(ctx, '', this.op_pop); }
          ctx.scanner = restore_scanner;}

      , scan(ctx, idx0) {
          if (true === super.scan(ctx, idx0)) {
            this._pop_scanner(ctx);} }

      , scan_continue(ctx, idx0) {
          if (true === super.scan_continue(ctx, idx0)) {
            this._pop_scanner(ctx);} } };

      return Object.assign(self, body) } };


  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  let MultiLineScanner$2 = class MultiLineScanner extends RegExpScanner$2 {
    newline(ctx, is_blank) {}
    get multiline() {return true}

    ast_extend(ctx, ast) {
      //let ln = this.ln_first || ctx.ln
      let col = ast.loc.start.column;
      let mlctx = this.mlctx ??= {col};

      if (col < mlctx.col) {
        mlctx.col = col;}

      ast.mlctx = mlctx;
      return ast} };

  function bind_context_scanner$2(context_scanners) {
    if (! Object.isFrozen(context_scanners) || ! Array.isArray(context_scanners)) {
      throw new TypeError(`Expected a frozen array of context scanners`) }

    const cache = bind_context_scanner$2.cache || new WeakMap();
    if (cache !== bind_context_scanner$2.cache) {
      bind_context_scanner$2.cache = cache;}

    let res = cache.get(context_scanners);
    if (undefined === res) {
      res = compile_context_scanner$2(context_scanners);
      cache.set(context_scanners, res);}
    return res}


  function compile_context_scanner$2(context_scanners) {
    const ds_first = build_composite_scanner();
    return context_scanner

    function context_scanner(offside_lines) {
      const ctx ={scanner: ds_first.clone0()};

      for (const ln of offside_lines) {
        if (ln.is_blank) {
          delete ln.content;
          ctx.scanner.newline(ctx, true);
          continue}


        ctx.parts = [];
        ctx.ln = ln;

        scan_source(ctx, ln.content);

        if (0 === ctx.parts.length) {
          throw new Error(`No parts generated by context scanner`) }

        ln.content = ctx.parts;
        ctx.scanner.newline(ctx, false);}

      ctx.scanner.newline(ctx, true);
      return offside_lines}


    function scan_source(ctx, ln_content) {
      const ln_source = ctx.ln_source = ln_content.content;
      const loc_start = ctx.loc_tip = ctx.loc_start = ln_content.loc.start;
      const pos0 = loc_start.pos;

      while (true) {
        const idx0 = ctx.loc_tip.pos - pos0;
        if (idx0 >= ln_source.length) {
          return }// done with this line

        ctx.scanner.scan(ctx, idx0); } }


    function build_composite_scanner() {
      const ds_body = new DispatchScanner$2().startCompile();
      ds_body.description = 'JSY Dispatch scanner (0)';
      const ds_first = new DispatchFirstlineScanner$2().startCompile();
      ds_first.description = 'Firstline JSY Dispatch scanner (0)';

      for (const scanner of context_scanners) {
        if (! scanner) {continue}

        const ds = scanner.firstline ? ds_first : ds_body;
        ds.addScanner(scanner);}

      ds_body.finishCompile();
      return ds_first.finishCompile(ds_body)} }

  function scan_offside_contexts$2(source, feedback, disp_name, context_scanners) {
    // see scan_javascript and scan_clike for good context_scanners
    const context_scanner = bind_context_scanner$2(disp_name);
    return context_scanner(basic_offside_scanner$2(source, feedback)) }

  const scanner_source$2 =
    new SourceCodeScanner$2({
        description: 'Source Code Scanner'
      , op: 'src'});

  const scanner_nestedSrc$2 =
    new NestedCodeScanner$2({
      op: 'src', description: 'Template parameter source'
    , char_pairs:{
        '{': true, '}': '{'
      , '(': true, ')': '('
      , '[': true, ']': '['} });

  const scanner_hashbangDirective$2 =
    new RegExpScanner$2({
        description: 'Hashbang directive'
      , example: '#!/usr/bin/env node'
      , op: 'hashbang', kind:'#!'
      , rx_open: /^(#!)/, rx_close: /.*($)/,
        firstline: true
      , allow_blank_close: true});

  const scanner_commentEOL$2 =
    new RegExpScanner$2({
        description: 'Comment to end of line'
      , example: '// comment'
      , op: 'comment_eol', kind:'//'
      , rx_open: /(\/\/)/, rx_close: /.*($)/,
        allow_blank_close: true});

  const scanner_commentMultiLine$2 =
    new MultiLineScanner$2({
        description: 'Multi-line comment'
      , example: '/* comment */'
      , op: 'comment_multi', kind:'/*'
      , rx_open: /(\/\*)/, rx_close: /.*?(\*\/|$)/,});

  const scanner_strSingle$2 =
    new RegExpScanner$2({
        description: 'Single quote string literal'
      , example: "'single quote'"
      , op: 'str1', kind:"'"
      , rx_open: /(')/, rx_close: /(?:\\.|[^'])*('|$)/,});

  const scanner_strDouble$2 =
    new RegExpScanner$2({
        description: 'Double quote string literal'
      , example: '"double quote"'
      , op: 'str2', kind:'"'
      , rx_open: /(")/, rx_close: /(?:\\.|[^"])*("|$)/,});

  const scanner_preprocessor$2 =
    new RegExpScanner$2({
        description: 'Preprocessor directive'
      , example: '# IF platform === "web"'
      , op: 'preprocessor', kind:'#'
      , rx_open: /^\s*(#)/, rx_close: /.*?([\\]?)\s*$/,
        invert_close: true // preprocessor uses '\' continuations
      , allow_blank_close: true});


  const clike_context_scanners$2 = Object.freeze([
    scanner_source$2
  , scanner_hashbangDirective$2
  , scanner_commentEOL$2
  , scanner_commentMultiLine$2
  , scanner_strSingle$2
  , scanner_strDouble$2
  , scanner_preprocessor$2]);


  function scan_clike(source, feedback) {
    return scan_offside_contexts$2(source, feedback, clike_context_scanners$2)}

  const scanner_regexp$2 =
    new RegExpScanner$2({
        description: 'RegExp literal'
      , example: '/regexp/'
      , op: 'regexp'
      , kind: '/'

      , /*
        rx_open: rx_or_parts @:
          opts: @[]
            /(\/)(?![\/\*])/    // start of a potential regexp literal, but not a comment

            @{}                 // ...complex regexp grammar...
              pre: ''
              opts: @[]
                /\\./           // ...any escaped character...
                /[^\\\/\[]/     // ...or any non-special character...

                @{}             // ... or a bracket [] expression...
                  pre: '\\['        // started with a '[' character
                  opts: @[]
                    /\\./           // ...with any escaped character
                    /[^\]]/         // ...or any non-escaped non-ending ']' character
                  post: '*\\]'      // ended with an ending ']' character

              post: '+'         // one or more interior expressions

            /(?=\/)/            // (lookahead) end of a regexp literal
        */

        rx_open: new RegExp(
          /(\/)(?![\/\*])/ .source + // a RegExp start but not a comment
          /(?:\\.|[^\\\/\[]|\[(?:\\.|[^\]])*\])+/ .source)

      , rx_close: /(\/[a-z]*)\s*(?=[;.,)\]}]|$)/  // inspired by vim's syntax highlighting end

      , });//multiline: false // spec https://tc39.es/ecma262/#sec-literals-regular-expression-literals


  const scanner_strTemplate$2 =
    new MultiLineScanner$2({
        description: 'Template quote string literal'
      , example: '`template string`'
      , op: 'str_template'
      , kind: '`'
      , rx_open: /(`)\\?/
      , rx_close: /(?:\\.|\$(?!{)|[^\$`\\])*(`|\${|$)/
      , nesting:{
          '${': templateArgNesting$2}

      , ast_scan_match(scan, ast) {
          if ('`' == scan.open) {
            ast.tmpl_opened = true;}
          if ('`' == scan.close) {
            ast.tmpl_closed = true;} } });

  function templateArgNesting$2(ctx, hostScanner) {
    const src = scanner_nestedSrc$2.withOuter({
      scanner: hostScanner.continueScanner(ctx)
    , stack:['{' ]// from the template parameter opening
    , ast_end: 'template_param_end'});

    src.emit_ast(ctx, '', 'template_param');

    ctx.scanner = ctx.dispatch_root.cloneWithScanner(src);}



  const js_context_scanners$2 = Object.freeze([
    scanner_regexp$2
  , scanner_strTemplate$2
  , ... clike_context_scanners$2]);

  function scan_javascript(source, feedback) {
    return scan_offside_contexts$2(source, feedback, js_context_scanners$2)}

  require('chai');

  describe('Scanners', (() => {
    describe('Basic Offside Line Scanner', (() => {

      it('Works with JSY', (() => {
        // source from https://github.com/shanewholloway/js-consistent-fnvxor32/blob/d2554377c4a540258f93f2958d4259c1f4f03ff9/code/fnvxor32.jsy on 2018-08-09
        basic_offside_scanner$2(`
export function hash_fnv32(sz) ::
  // FNV32, from https://en.wikipedia.org/wiki/Fowler%E2%80%93Noll%E2%80%93Vo_hash_function#FNV-1a_hash
  let h = 0x811C9DC5 // fnv-1a 32 bit initial value
  for let i=0; i < sz.length; i++ ::
    h ^= sz.charCodeAt(i)
    h += (h << 24) + (h << 8) + (h << 7) + (h << 4) + (h << 1)
  return h

export function xor32(h) ::
  // XOR Shift 32, from https://en.wikipedia.org/wiki/Xorshift
  // from Marsaglia, George (July 2003). "Xorshift RNGs". Journal of Statistical Software. 8 (14). doi:10.18637/jss.v008.i14.
  h ^= h << 13
  h ^= h >>> 17
  h ^= h << 5
  return h
`); } ) );

      it('Works with Rust-Lang source', (() => {
        // source from https://doc.rust-lang.org/rust-by-example/flow_control/while.html on 2018-08-09
        basic_offside_scanner$2(`
fn main() ::
    // A counter variable
    let mut n = 1;

    // Loop while 'n' is less than 101
    while n < 101 ::
        if n % 15 == 0 ::
            println!("fizzbuzz");
        else if n % 3 == 0 ::
            println!("fizz");
        else if n % 5 == 0 ::
            println!("buzz");
        else ::
            println!("{}", n);

        // Increment counter
        n += 1;
`); } ) );

      it('Works with Go-Lang source', (() => {
        // source from https://golang.org/ on 2018-08-09
        basic_offside_scanner$2(`
// A concurrent prime sieve

package main

import "fmt"

// Send the sequence 2, 3, 4, ... to channel 'ch'.
func Generate(ch chan<- int) ::
  for i := 2; ; i++ ::
    ch <- i // Send 'i' to channel 'ch'.

// Copy the values from channel 'in' to channel 'out',
// removing those divisible by 'prime'.
func Filter(in <-chan int, out chan<- int, prime int) ::
  for ::
    i := <-in // Receive value from 'in'.
    if i%prime != 0 ::
      out <- i // Send 'i' to 'out'.

// The prime sieve: Daisy-chain Filter processes.
func main() ::
  ch := make(chan int) // Create a new channel.
  go Generate(ch)      // Launch Generate goroutine.
  for i := 0; i < 10; i++ ::
    prime := <-ch
    fmt.Println(prime)
    ch1 := make(chan int)
    go Filter(ch, ch1, prime)
    ch = ch1
`); } ) );

      it('Works with C++ source', (() => {
        // source from https://en.wikipedia.org/wiki/C%2B%2B on 2018-08-09
        basic_offside_scanner$2(`
#include <iostream>
#include <vector>
#include <stdexcept>

int main() ::
    try ::
        std::vector<int> vec{3, 4, 3, 1};
        int i{vec.at(4)}; // Throws an exception, std::out_of_range (indexing for vec is from 0-3 not 1-4)
    // An exception handler, catches std::out_of_range, which is thrown by vec.at(4)
    catch (std::out_of_range &e) ::
        std::cerr << "Accessing a non-existent element: " << e.what() << '\n';
    // To catch any other standard library exceptions (they derive from std::exception)
    catch (std::exception &e) ::
        std::cerr << "Exception thrown: " << e.what() << '\n';
    // Catch any unrecognised exceptions (i.e. those which don't derive from std::exception)
    catch (...) ::
        std::cerr << "Some fatal error\n";
`); } ) );

      it('Works with C# source', (() => {
        // source from SRCBLAH on 2018-08-09
        basic_offside_scanner$2(`
using System;
using System.Windows.Forms;

class Program ::
    static void Main() ::
        MessageBox.Show("Hello, World!");
        Console.WriteLine("Is almost the same argument!");
`); } ) ); } ) ); } ) );

  const { assert: assert$7 } = require('chai');

  describe('Scanners', (() => {
    describe('hash_fnv32 example', (() => {
      let offside_ast;
      beforeEach (() => {
        // source from https://github.com/shanewholloway/js-consistent-fnvxor32/blob/d2554377c4a540258f93f2958d4259c1f4f03ff9/code/fnvxor32.jsy on 2018-08-09
        offside_ast = scan_javascript(`
export function hash_fnv32(sz) ::
  // FNV32, from https://en.wikipedia.org/wiki/Fowler%E2%80%93Noll%E2%80%93Vo_hash_function#FNV-1a_hash
  let h = 0x811C9DC5 // fnv-1a 32 bit initial value
  for let i=0; i < sz.length; i++ ::
    h ^= sz.charCodeAt(i)
    h += (h << 24) + (h << 8) + (h << 7) + (h << 4) + (h << 1)
  return h

`
          .replace(/^\s*\r?\n/, '') ); } );// trim off the first newline for test stability


      it('can self-verify locations match original source', (() => {
        const to_source = node => node.loc.start.slice(node.loc.end);
        for (const ln of offside_ast) {
          if (ln.is_blank) {continue}

          assert$7.equal(ln.indent.indent, to_source(ln.indent));
          for (const part of ln.content) {
            assert$7.equal(part.content, to_source(part)); } } } ) );

      it('line 0 matches this offside AST structure', (() => {
        check_ast_entry('line 0', offside_ast[0],{
          type: 'offside_line'
        , loc:{start: { line: 1, pos: 0, line_pos: 0 }, end: { line: 1, pos: 35, line_pos: 0 }}
        , len_indent: 2, len_dedent: 4, len_inner: 4

        , indent:{
             type: 'offside_indent'
           , loc:{start: { line: 1, pos: 0, line_pos: 0 }, end: { line: 1, pos: 2, line_pos: 0 }}
           , len_indent: 2, indent: '  '}

        , content:[
           {type: 'src'
             , loc:{start: { line: 1, pos: 2, line_pos: 0 }, end: { line: 1, pos: 35, line_pos: 0 }}
             , content: 'export function hash_fnv32(sz) ::'} ] } ); } ) );


      it('line 1 matches this offside AST structure', (() => {
        check_ast_entry('line 1', offside_ast[1],{
          type: 'offside_line'
        , loc:{start: { line: 2, pos: 36, line_pos: 36 }, end: { line: 2, pos: 141, line_pos: 36 }}
        , len_indent: 4, len_dedent: 4

        , indent:{
             type: 'offside_indent',
             loc:{start: { line: 2, pos: 36, line_pos: 36 }, end: { line: 2, pos: 40, line_pos: 36 }}
           , len_indent: 4, indent: '    '}

        , content:[
           {type: 'comment_eol',
               loc:{start: { line: 2, pos: 40, line_pos: 36 }, end: { line: 2, pos: 141, line_pos: 36 }}
             , content: '// FNV32, from https://en.wikipedia.org/wiki/Fowler%E2%80%93Noll%E2%80%93Vo_hash_function#FNV-1a_hash'} ] } ); } ) );

      it('line 2 matches this offside AST structure', (() => {
        check_ast_entry('line 2', offside_ast[2],{
          type: 'offside_line'
        , loc:{start: { line: 3, pos: 142, line_pos: 142 }, end: { line: 3, pos: 195, line_pos: 142 }}
        , len_indent: 4, len_dedent: 4

        , indent:{
            type: 'offside_indent',
            loc: { start: { line: 3, pos: 142, line_pos: 142 }, end: { line: 3, pos: 146, line_pos: 142 } },
            len_indent: 4, indent: '    '}

        , content:[
           {type: 'src',
               loc: { start: { line: 3, pos: 146, line_pos: 142 }, end: { line: 3, pos: 165, line_pos: 142 } },
               content: 'let h = 0x811C9DC5 '}

         , {type: 'comment_eol',
               loc: { start: { line: 3, pos: 165, line_pos: 142 }, end: { line: 3, pos: 195, line_pos: 142 } },
               content: '// fnv-1a 32 bit initial value'} ] } ); } ) );

      it('line 3 matches this offside AST structure', (() => {
        check_ast_entry('line 3', offside_ast[3],{
          type: 'offside_line',
          loc: { start: { line: 4, pos: 196, line_pos: 196 }, end: { line: 4, pos: 234, line_pos: 196 } },
          len_indent: 4, len_dedent: 6, len_inner: 6

        , indent:{
             type: 'offside_indent',
             loc: { start: { line: 4, pos: 196, line_pos: 196 }, end: { line: 4, pos: 200, line_pos: 196 } },
             len_indent: 4, indent: '    '}

        , content:[
           {type: 'src',
               loc: { start: { line: 4, pos: 200, line_pos: 196 }, end: { line: 4, pos: 234, line_pos: 196 } },
               content: 'for let i=0; i < sz.length; i++ ::'} ] } ); } ) );

      it('line 4 matches this offside AST structure', (() => {
        check_ast_entry('line 4', offside_ast[4],{
          type: 'offside_line',
          loc: { start: { line: 5, pos: 235, line_pos: 235 }, end: { line: 5, pos: 262, line_pos: 235 } },
          len_indent: 6, len_dedent: 6

        , indent:{
             type: 'offside_indent'
           , loc: { start: { line: 5, pos: 235, line_pos: 235 }, end: { line: 5, pos: 241, line_pos: 235 } },
             len_indent: 6, indent: '      '}

        , content:[
           {type: 'src'
             , loc: { start: { line: 5, pos: 241, line_pos: 235 }, end: { line: 5, pos: 262, line_pos: 235 } },
               content: 'h ^= sz.charCodeAt(i)'} ] } ); } ) );

      it('line 5 matches this offside AST structure', (() => {
        check_ast_entry('line 5', offside_ast[5],{
          type: 'offside_line'
        , loc: { start: { line: 6, pos: 263, line_pos: 263 }, end: { line: 6, pos: 327, line_pos: 263 } },
          len_indent: 6, len_dedent: 4

        , indent:{
             type: 'offside_indent'
           , loc: { start: { line: 6, pos: 263, line_pos: 263 }, end: { line: 6, pos: 269, line_pos: 263 } },
             len_indent: 6, indent: '      '}

        , content:[
           {type: 'src'
             , loc: { start: { line: 6, pos: 269, line_pos: 263 }, end: { line: 6, pos: 327, line_pos: 263 } },
               content: 'h += (h << 24) + (h << 8) + (h << 7) + (h << 4) + (h << 1)'} ] } ); } ) );

      it('line 6 matches this offside AST structure', (() => {
        check_ast_entry('line 6', offside_ast[6],{
          type: 'offside_line'
        , loc: { start: { line: 7, pos: 328, line_pos: 328 }, end: { line: 7, pos: 340, line_pos: 328 } },
          len_indent: 4, len_dedent: 0

        , indent:{
             type: 'offside_indent'
           , loc: { start: { line: 7, pos: 328, line_pos: 328 }, end: { line: 7, pos: 332, line_pos: 328 } },
             len_indent: 4, indent: '    '}

        , content:[
           {type: 'src'
             , loc: { start: { line: 7, pos: 332, line_pos: 328 }, end: { line: 7, pos: 340, line_pos: 328 } },
               content: 'return h'} ] } ); } ) );

      it('line 7 matches this offside AST structure', (() => {
        check_ast_entry('line 7', offside_ast[7],{
          type: 'offside_blank_line'
        , loc: { start: { line: 8, pos: 341, line_pos: 341 }, end: { line: 8, pos: 341, line_pos: 341 } },
          is_blank: true} ); } ) ); } ) );


    it('hashbang', (() => {
      const offside_ast = scan_javascript(
        ['#!/usr/bin/env jsy-node'
          , ''
          , 'if test() ::'
          , '  console.log @'
          , '    "hello JSY world!"']
        .join('\n'));

      check_ast_entry('line 0', offside_ast[0],{
        type: 'offside_line'
      , loc: { start: { line: 1, pos: 0, line_pos: 0 }, end: { line: 1, pos: 23, line_pos: 0 } },
        len_indent: 0, len_dedent: 0

      , indent:{
           type: 'offside_indent'
         , loc: { start: { line: 1, pos: 0, line_pos: 0 }, end: { line: 1, pos: 0, line_pos: 0 } },
           len_indent: 0, indent: ''}

      , content:[
         {type: 'hashbang'
           , loc: { start: { line: 1, pos: 0, line_pos: 0 }, end: { line: 1, pos: 23, line_pos: 0 } }
           , content: '#!/usr/bin/env jsy-node'} ] } ); } ) ); } ) );



  function check_ast_entry(lineno, ast, structure) {
    ast = JSON.parse(JSON.stringify(ast));
    try {
      assert$7.deepEqual(ast, structure); }
    catch (err) {
      {
        console.log(lineno);
        throw err} } }

  const rx_escape_offside_ops$1 =  /[?|+*@:.\/\\\(\)\{\}\[\]\=\>]/g ;
  const re_space_prefix$1 =  /(?:^|[ \t]+)/.source ; // spaces or start of line
  const re_space_suffix$1 =  /(?=$|[ \t]+)/.source ; // spaces or end of line

  function regexp_from_jsy_op$1(jsy_op, with_spacing) {
    if ('string' === typeof jsy_op) {
      // escape Offside operator chars to RegExp
      jsy_op = jsy_op.replace(rx_escape_offside_ops$1, '\\$&');
      // surrounded by newlines or spacees
      if (with_spacing) {
        jsy_op = re_space_prefix$1 + jsy_op + re_space_suffix$1;}
      return `(?:${jsy_op})` }// using a non-matching group

    if (jsy_op instanceof RegExp) {
      return jsy_op.source} }


  function sourcemap_comment$1(srcmap_json, newline='\n') {
    if ('string' !== typeof srcmap_json) {
      srcmap_json = JSON.stringify(srcmap_json);}

    let b64 = 'undefined' !== typeof Buffer
      ? Buffer.from(srcmap_json).toString('base64')
      : globalThis.btoa(unescape(encodeURIComponent(srcmap_json) ));

    // break up the source mapping url trigger string to prevent false positives on the following line
    return `${newline}//# ${'sourceMapping'}URL=data:application/json;charset=utf-8;base64,${b64}${newline}`}

  const as_op_prefix$1 = (rx, sep=rx.source, inject_sep=sep) =>({
    prefix: sep, rx_prefix: rx
  , opPrefixResolve(p, at_op) {
      let at_res = at_op.opResolve ? at_op.opResolve(p) : at_op;
      let pre = inject_sep + (at_res.pre || '');
      return {... at_res, pre} } });


  const jsy_prefix_operators$1 = [
    as_op_prefix$1(/;/)
  , as_op_prefix$1(/,/)
  , as_op_prefix$1(/\?(\.?)/, '?', '?.')];


  function * at_op_for_prefix$1(at_op, jsy_prefix_operators) {
    let {jsy_op0, jsy_op} = at_op;
    if (! /^[@?]/.test(jsy_op0 || jsy_op) ) {
      return}

    if (undefined === jsy_op0) {
      jsy_op0 = jsy_op;
      jsy_op = new RegExp(regexp_from_jsy_op$1(jsy_op, false)); }

    else if ('string' === typeof jsy_op) {
      jsy_op = new RegExp(regexp_from_jsy_op$1(jsy_op, false)); }

    else if ('function' !== typeof jsy_op.exec) {
      throw new Error('Unexpected jsy_op type') }

    for (let jsy_prefix_op of jsy_prefix_operators) {
      yield {...at_op,
        jsy_op0: jsy_prefix_op.prefix + jsy_op0
      , jsy_op: new RegExp(`${jsy_prefix_op.rx_prefix.source}${jsy_op.source}`, jsy_op.flags)
      , foldTop: true
      , opResolve: p => jsy_prefix_op.opPrefixResolve(p, at_op) }; } }


  function apply_prefix_operators$1(at_inner_operators, jsy_prefix_operators) {
    let res = [];
    for (let at_op of at_inner_operators) {
      res.push(... at_op_for_prefix$1(at_op, jsy_prefix_operators)); }
    res.push(... at_inner_operators);
    return res}

  // @::   @::>   @::>*   @::*
  const lambda_block_tbl$1 = {
    '': a =>({pre: `((${a}) => {`, post: '})'})
  , '>': a =>({pre: `(async (${a}) => {`, post: '})'})
  , '>*': a =>({pre: `((async function * (${a}) {`, post: '}).bind(this))'})
  , '*': a =>({pre: `((function * (${a}) {`, post: '}).bind(this))'}) };

  // @=>   @=>>
  const lambda_arrow_tbl$1 = {
    __proto__: lambda_block_tbl$1
  , '': a =>({pre: `((${a}) =>`, post: ')'})
  , '>': a =>({pre: `(async (${a}) =>`, post: ')'}) };


  // @!::   @!::>   @!::>*   @!::*
  const iife_expr_tbl$1 = {
    '': a =>({pre: `(((${a}) => {`, post: '})())'})
  , '>': a =>({pre: `((async (${a}) => {`, post: '})())'})
  , '>*': a =>({pre: `((async function * (${a}) {`, post: '}).call(this))'})
  , '*': a =>({pre: `((function * (${a}) {`, post: '}).call(this))'}) };


  // @!=>   @!=>>
  const iife_arrow_tbl$1 = {
    __proto__: iife_expr_tbl$1
  , '': a =>({pre: `(((${a}) =>`, post: ')())'})
  , '>': a =>({pre: `((async (${a}) =>`, post: ')())'}) };


  const bindLambdaOpZero$1 = table =>
    function opResolveLambdaZero(p) {
      let [_, suffix] = p.content.match(this.jsy_op);
      let entry = table[suffix || ''];
      if (undefined === entry) {
        throw new SyntaxError(`JSY lambda expression unrecognized specifier ("${suffix}")`) }
      return entry('')};


  const fmt_arg_kw$1 = args => `{${args}}`;
  const fmt_arg_vec$1 = args => `[${args}]`;
  const bindLambdaOpResolve$1 = (table, as_args=(v=>v)) =>
    function opResolveLambda(p) {
      let [_, args, suffix] = p.content.match(this.jsy_op);
      let entry = table[suffix || ''];
      if (undefined === entry) {
        throw new SyntaxError(`JSY lambda with args expression unrecognized specifier ("${suffix}")`) }
      return entry(as_args(args) || '')};



  const at_lambda_offside$1 = [
    // object unpack all args
    {jsy_op0: '@\\:=>', jsy_op: /@\\:(.*?)=>(>?\*?)/,
        pre: '(()=>', post: ')'
      , opResolve: bindLambdaOpResolve$1(lambda_arrow_tbl$1, fmt_arg_kw$1) }
  , {jsy_op0: '@\\:::', jsy_op: /@\\:(.*?)::(>?\*?)/,
        pre: '(()=>{', post: '})',
        opResolve: bindLambdaOpResolve$1(lambda_block_tbl$1, fmt_arg_kw$1) }

  , // array unpack all args
    {jsy_op0: '@\\#=>', jsy_op: /@\\#(.*?)=>(>?\*?)/,
        pre: '(()=>', post: ')'
      , opResolve: bindLambdaOpResolve$1(lambda_arrow_tbl$1, fmt_arg_vec$1) }
  , {jsy_op0: '@\\#::', jsy_op: /@\\#(.*?)::(>?\*?)/,
        pre: '(()=>{', post: '})',
        opResolve: bindLambdaOpResolve$1(lambda_block_tbl$1, fmt_arg_vec$1) }

  , // normal args
    {jsy_op0: '@\\=>', jsy_op: /@\\(.*?)=>(>?\*?)/,
        pre: '(()=>', post: ')'
      , opResolve: bindLambdaOpResolve$1(lambda_arrow_tbl$1) }
  , {jsy_op0: '@\\::', jsy_op: /@\\(.*?)::(>?\*?)/,
        pre: '(()=>{', post: '})',
        opResolve: bindLambdaOpResolve$1(lambda_block_tbl$1) }

  , // zero args
    {jsy_op0: '@=>', jsy_op: /@=>(>?\*?)/,
        pre: '(()=>', post: ')',
        opResolve: bindLambdaOpZero$1(lambda_arrow_tbl$1) }
  , {jsy_op0: '@::', jsy_op: /@::(>?\*?)/,
        pre: '(()=>{', post: '})',
        opResolve: bindLambdaOpZero$1(lambda_block_tbl$1) } ];


  const at_lambda_iife_offside$1 = [
    {jsy_op: '::!', pre: '{(()=>{', post: '})()}', is_kw_close: true}
  , {jsy_op: '::!>', pre: '{(async ()=>{', post: '})()}', is_kw_close: true}

  , {jsy_op0: '@!*>', jsy_op: /@!\*>/, pre: '((async function *(){', post: '}).call(this))'}
  , {jsy_op0: '@!*[]', jsy_op: /@!\*\[\]/, pre: '[... (function *(){', post: '}).call(this)]'}
  , {jsy_op0: '@!*#', jsy_op: /@!\*#/, pre: '([... (function *(){', post: '}).call(this)])'}
  , {jsy_op0: '@!*', jsy_op: /@!\*/, pre: '((function *(){', post: '}).call(this))'}

  , {jsy_op0: '@!=>', jsy_op: /@!=>(>?\*?)/,
        pre: '((()=>', post: ')())',
        opResolve: bindLambdaOpZero$1(iife_arrow_tbl$1) }

  , {jsy_op0: '@!::', jsy_op: /@!::(>?\*?)/,
        pre: '((()=>{', post: '})())',
        opResolve: bindLambdaOpZero$1(iife_expr_tbl$1) }

  , {jsy_op0: '@!', jsy_op: /@!(>?\*?)(?!=>)/,
        pre: '((()=>{', post: '})())',
        opResolve: bindLambdaOpZero$1(iife_expr_tbl$1) } ];

  // Like lambdas without closing over `this`
  // @~::   @~::>   @~::>*   @~::*
  const func_block_tbl$1 = {
    '': a =>({pre: `(function (${a}) {`, post: '})'})
  , '>': a =>({pre: `(async function(${a}) {`, post: '})'})
  , '>*': a =>({pre: `(async function * (${a}) {`, post: '})'})
  , '*': a =>({pre: `(function * (${a}) {`, post: '})'}) };


  const at_func_offside$1 = [
    {jsy_op0: '@~::', jsy_op: /@~(.*?)::(>?\*?)/,
        pre: '(function () {', post: '})',
        opResolve(p) {
          let [_, args, suffix] = p.content.match(this.jsy_op);
          let entry = func_block_tbl$1[suffix];
          if (undefined === entry) {
            throw new SyntaxError(`JSY function expression unrecognized specifier ("${suffix}")`) }
          return entry(args || '')} } ];

  // Order matters here -- list more specific matchers higher (first) in the order
  const at_outer_offside$1 = [
    {jsy_op: '::()', pre: '(', post: ')', nestBreak: true}
  , {jsy_op: '::{}', pre: '{', post: '}', nestBreak: true}
  , {jsy_op: '::[]', pre: '[', post: ']', nestBreak: true}
  , {jsy_op: '::', pre: ' {', post: '}', nestBreak: true, is_kw_close: true} ];

  const at_inner_offside_basic$1 = [
    {jsy_op: '@:', pre: '({', post: '})', implicitSep: ',', isFoldable: true}
  , {jsy_op: '@#', pre: '([', post: '])', implicitSep: ',', isFoldable: true}
  , {jsy_op: '@()', pre: '(', post: ')', implicitSep: ',', isFoldable: true}
  , {jsy_op: '@{}', pre: '{', post: '}', implicitSep: ',', isFoldable: true}
  , {jsy_op: '@[]', pre: '[', post: ']', implicitSep: ',', isFoldable: true}
  , {jsy_op: '@', pre: '(', post: ')', implicitSep: ',', isFoldable: true} ];


  const at_inner_offside_core$1 = /* #__PURE__ */ [].concat(
    at_func_offside$1
  , at_lambda_offside$1
  , at_lambda_iife_offside$1
  , at_inner_offside_basic$1);


  const at_experimental$1 = [
    /* experimental ideas; may be removed at any time */];


  const at_unknown_ops$1 = [
    {jsy_op0: '?@', jsy_op: /\?@[^\w\s]+/,}
  , {jsy_op0: ';@', jsy_op: /;@[^\w\s]+/,}
  , {jsy_op0: ',@', jsy_op: /,@[^\w\s]+/,}
  , {jsy_op0: '::', jsy_op: /::[^\w\s]+/,}
  , {jsy_op0: '@', jsy_op: /@[^\w\s]+/,} ];


  const at_inner_offside$1 = /* #__PURE__ */
    apply_prefix_operators$1(
      at_inner_offside_core$1.flat()
    , jsy_prefix_operators$1);


  const op_template_str$1 ={nestBreak: true};

  const at_offside$1 = /* #__PURE__ */ [].concat(
    at_outer_offside$1
  , at_inner_offside$1
  , at_experimental$1);


  const at_offside_map$1 = /* #__PURE__ */ at_offside$1.reduce(
    (m, ea) => {
      if (ea.jsy_op0) {
        m[ea.jsy_op0] = ea;}

      if ('string' === typeof ea.jsy_op) {
        m[ea.jsy_op] = ea;}
      return m}
  , {});


  function kwExpandOp$1(p) {
    return {__proto__: this, pre: p.kw + this.pre} }

  const extra_jsy_ops$1 = {
    kw_normal:{jsy_op: 'kw', pre: ' (', post: ')', kwExpandOp: kwExpandOp$1, in_nested_block: true}
  , kw_explicit:{jsy_op: 'kw', pre: '', post: '', kwExpandOp: kwExpandOp$1, in_nested_block: true}
  , tmpl_param:{jsy_op: 'tmpl_param', pre: '', post: '', in_nested_block: true}
  , jsx_param:{jsy_op: 'jsx_param', pre: '', post: '', in_nested_block: true} };

  const keywords_with_args$1 = ['if', 'while', 'for await', 'for', 'switch'];
  const keywords_zero_args$1 = ['catch'];

  const keywords_locator_parts$1 = /* #__PURE__ */ [].concat(
    keywords_with_args$1.map(e => `else ${e}`)
  , keywords_with_args$1
  , keywords_zero_args$1);

  const regexp_keyword$1 = sz => {
    sz = sz.replace(/[ ]+/g, '[ ]+'); // allow one or more spaces
    return `(?:${sz})` };// using a non-matching group

  const re_keyword_space_prefix$1 =  /^(?:[ \t]*)/.source ; // start of line and indent
  const re_keyword_trailer$1 =  /(?:[ \t]*(?=[^\w,:;=]|$))/.source ;

  const rx_keyword_ops$1 = /* #__PURE__ */ new RegExp(
    re_keyword_space_prefix$1
      + `(?:${keywords_locator_parts$1.map(regexp_keyword$1).join('|')})`
      + re_keyword_trailer$1
    , 'g' );// global regexp for lastIndex support

  const regexp_from_offside_op$1 = offside_op =>
    regexp_from_jsy_op$1(offside_op.jsy_op, true);

  const rx_offside_ops$1 = /* #__PURE__ */ new RegExp(
    at_offside$1
      .map(regexp_from_offside_op$1)
      .filter(Boolean)
      .join('|')
  , 'g' );// global regexp

  const rx_unknown_ops$1 = /* #__PURE__ */ new RegExp(
    at_unknown_ops$1
      .map(regexp_from_offside_op$1)
      .filter(Boolean)
      .join('|')
  , 'g' );// global regexp

  function inject_dedent$1(offside_lines, trailing_types) {
    if ('function' !== typeof trailing_types) {
      const s_trailing_types = new Set(
        trailing_types || ['comment_eol']);
      trailing_types = k => s_trailing_types.has(k);}

    for (const ln of offside_lines) {
      if (ln.is_blank) {continue}

      const {len_dedent, len_indent, len_inner} = ln;

      const offside_dedent ={
        type: 'offside_dedent'
      , len_dedent, len_indent};

      if (len_inner) {
        offside_dedent.len_inner = len_inner;}

      const last = ln.content.pop();
      if (last.multiline || trailing_types(last.type)) {
        ln.content.push(offside_dedent, last); }
      else {
        ln.content.push(last, offside_dedent); } } }

  const SourceLocation$2 ={
    __proto__: null

  , get [Symbol.toStringTag]() {return '«SourceLocation»'}
  , toString() {return `«${this.line}:${this.column}»`}
  , get column() {return this.pos - this.line_pos}

  , create(source, file) {
      const root ={
        line:0, pos:0, line_pos:0
      , __proto__: SourceLocation$2};

      if (null != file) {
        root.file = file;}

      Object.defineProperties(root,{
        __root__:{value: root}
      , source:{value: source} } );
      return Object.freeze(root) }

  , nextLine() {
      let {line, pos} = this;
      line += 1;
      return Object.freeze({
        line, pos, line_pos: pos,
        __proto__: this.__root__}) }

  , move(char_len) {
      if ('string' === typeof char_len) {
        char_len = char_len.length;}
      else if ('number' === typeof char_len) {
        char_len |= 0;}
      else throw new TypeError('Expected move to be a string or number')

      let {line, pos, line_pos} = this;
      pos += char_len;
      return Object.freeze({
        line, pos, line_pos,
        __proto__: this.__root__}) }

  , distance(other) {
      const lines = this.line - other.line;
      const chars = this.pos - other.pos;
      return {lines, chars} }

  , slice(other) {
      if (this.source !== other.source) {
        throw new Error(`Locations from different sources`) }
      return this.source.slice(this.pos, other.pos) }

  , syntaxError(message) {
      const err = new SyntaxError(message);
      err.src_loc = this;
      return err} };

  var createLoc$1 = SourceLocation$2.create;

  const rx_lines$1 = /(\r\n|\r|\n)/ ;
  const rx_indent$1 = /^([ \t]*)(.*)$/ ;
  const rx_indent_order$1 = /^[\t]*[ ]*$/ ;

  function basic_offside_scanner$1(source, feedback) {
    if (null == feedback) {
      feedback ={
        warn(msg, ...args) {console.warn(`[Offside Warning]:: ${msg}`, ...args);} }; }

    const all_lines = [];
    const q_raw_lines = source.split(rx_lines$1);

    const offside_line_proto ={
      __proto__: null
    , get source() {
        const {start, end} = this.loc;
        return start.slice(end)} };

    let loc_tip = createLoc$1(source, feedback.file);

    while (0 !== q_raw_lines.length) {
      const loc ={start: loc_tip = loc_tip.nextLine()};

      const src_line = q_raw_lines.shift() || '';
      loc.end = loc_tip = loc_tip.move(src_line);

      const src_line_end = q_raw_lines.shift() || '';
      loc_tip = loc_tip.move(src_line_end);


      const match = rx_indent$1.exec(src_line);
      const loc_indent = loc.start.move(match[1]);
      const is_blank = 0 === match[2].length;

      if (! rx_indent_order$1.test(match[1])) {
        throw loc.start.syntaxError(`Mixed tab and space indent (${loc_indent})`, ) }

      const raw ={
        line: src_line
      , line_end: src_line_end
      , indent: match[1]
      , content: match[2]};

      let node;
      if (is_blank) {
        node ={
          type: 'offside_blank_line', loc
        , is_blank}; }

      else {
        const indent_node ={
          type: 'offside_indent',
          loc:{
            start: loc.start
          , end: loc_indent}
        , len_indent: match[1].length
        , indent: match[1]};

        const conent_node ={
          type: 'offside_content',
          loc:{
            start: loc_indent
          , end: loc.end}
        , len_indent: match[1].length
        , indent: match[1]
        , content: match[2]};

        node ={
          __proto__: offside_line_proto
        , type: 'offside_line', loc
        , indent: indent_node
        , content: conent_node
        , len_indent: match[1].length}; }

      Object.defineProperties(node,{raw: {value: raw}});
      all_lines.push(node); }

    add_indent_info$1(all_lines);
    return all_lines}


  function add_indent_info$1(all_lines) {
    let len_dedent = 0; // how far to dedent to next outer level
    let len_stack = [0];
    // work backwards from the file end
    for (let i = all_lines.length-1 ; i>=0 ; i--) {
      let ln = all_lines[i];
      if (ln.is_blank) {continue}

      ln.len_dedent = len_dedent;

      // how many indent prefix chars per line
      let len_indent = ln.len_indent;

      let len_inner;
      while (len_stack[0] > len_indent) {
        len_inner = len_stack.shift();}

      if (len_stack[0] < len_indent) {
        // len_indent is the new stack tip
        len_stack.unshift(len_indent); }

      if (len_inner) {
        ln.len_inner = len_inner;}

      len_dedent = len_indent;} }

  function ensure_indent$1(ctx, scanner) {
    const ln_first = scanner.ln_first;
    if (undefined === ln_first) {return true}
    const len_first_indent = ln_first.len_indent;

    const d_dedent = ctx.ln.len_indent - len_first_indent;
    if (d_dedent < 0) {
      throw ctx.ln.indent.loc.end.syntaxError(
`Invalid indent level in ${scanner.description}. (${ctx.ln.indent.loc.end})  --  current indent: ${ctx.ln.len_indent}  start indent: ${len_first_indent} from (${ln_first.loc.start})`  ) }
    else return true}


  function ensure_progress$1(loc0, loc1) {
    if (loc0.pos == loc1.pos) {
      throw new Error(`Scanner failed to make progress (${loc1})`) }

    if (loc0.pos > loc1.pos) {
      throw new Error(`Scanner went backward (${loc1} from ${loc0})`) } }


  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  let DispatchScanner$1 = class DispatchScanner {
    constructor(disp_name) {
      this.disp_name = disp_name || 'root';
      this.by_kind = {};
      this.by_op = {};}

    startCompile() {
      Object.defineProperties(this,{
        rx_list:{value: (this.rx_list || []).slice()} } );
      this.by_kind = Object.assign({}, this.by_kind);
      this.by_op = Object.assign({}, this.by_op);
      return this}

    addScannerList(scannerList) {
      for (const scanner of scannerList) {
        if (scanner) {
          this.addScanner(scanner);} }
      return this}

    addScanner(scanner) {
      if (scanner.withDispatch) {
        scanner = scanner.withDispatch(this);}

      if (scanner.is_body) {
        this.ds_body = scanner;}

      this.by_op[scanner.op] = scanner;}

    addRegExpScanner(scanner, kind, re_disp) {
      if (kind) {
        this.by_kind[kind] = scanner.op;
        this.rx_list.push(new RegExp(re_disp, 'g')); }
      return this}

    finishCompile(ds_body) {
      if (undefined === ds_body) {
        ds_body = this.ds_body;}
      return Object.defineProperties(this,{
        ds_body:{value: ds_body, writable: true} } ) }


    clone0() {
      if (undefined !== this.level) {
        throw new Error(`Invalid clone0`) }
      return this.cloneWithScanner()}

    cloneWithScanner(...scanners) {
      return this.cloneWithScannerList(scanners)}
    cloneWithScannerList(scanners) {
      const self = Object.create(this);
      self.level = 1 + 0|self.level;
      self.description = self.description.replace(
        /\(\d+\)/, `(${self.level})`);

      self.startCompile();
      self.addScannerList(scanners);
      self.finishCompile();
      return self}


    get_active_dispatch(ctx) {
      return ctx[`dispatch_${this.disp_name}`]}
    set_active_dispatch(ctx) {
      ctx.dispatch = ctx[`dispatch_${this.disp_name}`] = this;}


    newline(ctx, is_blank) {}

    scan(ctx, idx0) {
      const loc0 = ctx.loc_tip;
      const res = this._scan(ctx, idx0);
      ensure_progress$1(loc0, ctx.loc_tip);
      return res}

    _scan(ctx, idx0) {
      this.set_active_dispatch(ctx);

      if (undefined === this.ln_first) {
        if (undefined === this.level) {
          throw new Error('Scanner with level: undefined')}

        this.ln_first = ctx.ln;}

      ensure_indent$1(ctx, this);

      const source = ctx.ln_source; // slice is done by setting lastIndex
      let match=null, idx1 = Infinity;

      for (const rx of this.rx_list) {
        rx.lastIndex = idx0; // regexp powered source.slice()

        const m = rx.exec(source);
        if (null !== m && m.index < idx1) {
          idx1 = m.index;
          match = m;} }

      if (null === match) {
        return this.ds_body.scan(ctx, idx0)}

      if (idx0 !== idx1) {
        return this.ds_body.scan_fragment(
          ctx, source.slice(idx0, idx1)) }

      const kind = match.filter(Boolean)[1];
      const op = this.by_kind[kind];
      const op_scanner = this.by_op[op];
      if (! op_scanner) {
        throw new Error(`No scanner registered for « ${kind} »`) }

      return op_scanner.scan(ctx, idx1)}

    scan_fragment(ctx, content) {
      throw new Error(`${this.description} does not support fragments`) } };


  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  let DispatchFirstlineScanner$1 = class DispatchFirstlineScanner extends DispatchScanner$1 {
    clone0() {
      const self = super.clone0();
      self.ds_body = self.ds_body.clone0();
      return self}
    scan(ctx, idx0) {
      ctx.scanner = this.ds_body;
      return super.scan(ctx, idx0)} };


  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  let EmbeddedDispatchScanner$1 = class EmbeddedDispatchScanner extends DispatchScanner$1 {
    constructor(options) {
      super(options.disp_name);
      Object.assign(this, options);
      this._compileForInit();}

    _compileForInit() {
      this.startCompile();
      this.addScannerList(this.scannerList);
      this.finishCompile();} };


  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  let BaseSourceScanner$1 = class BaseSourceScanner {
    constructor(options) {
      Object.assign(this, options);
      this._compileForInit();}

    _compileForInit() {}

    withDispatch(ds) {return this}

    emit_ast(ctx, content, ast_type) {
      const start = ctx.loc_tip;
      const end = ctx.loc_tip = start.move(content || 0);
      const ast ={type: ast_type || this.op, loc: {start, end}, content};
      this.ast_extend(ctx, ast);
      ctx.parts.push(ast);
      return ast}

    ast_extend(ctx, ast) {}

    newline(ctx, is_blank) {}
    scan_fragment(ctx, content) {
      throw new Error(`Scanner (${this.description}) does not support fragments`) }
    scan(ctx, idx0) {
      throw new Error(`Scanner (${this.description}) does not support scans`) } };


  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  let SourceCodeScanner$1 = class SourceCodeScanner extends BaseSourceScanner$1 {
    get is_body() {return true}

    scan_fragment(ctx, content) {
      this.scan_content(ctx, content); }

    scan(ctx, idx0) {
      this.scan_content(ctx, ctx.ln_source.slice(idx0)); }

    scan_content(ctx, content) {
      if (content) {
        this.emit_ast(ctx, content); } } };


  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  let NestedCodeScanner$1 = class NestedCodeScanner extends SourceCodeScanner$1 {
    constructor(options) {
      super(options);
      if (! this.char_pairs) {
        throw new Error('Missing required char_pairs mapping') }

      const chars = Object.keys(this.char_pairs).join('\\');
      this.rx = new RegExp(`([${chars}])`);}

    withOuter(options) {
      const scanner = options.scanner;
      if ('function' !== typeof scanner.scan) {
        throw new Error(`Expected valid outer scanner`) }
      delete options.scanner;

      const self = Object.create(this,{
        restore_scanner:{value: scanner} } );
      Object.assign(self, options);
      return self}

    scan_content(ctx, nested_content) {
      const {stack, char_pairs} = this;

      let content = '';
      for (const tok of nested_content.split(this.rx)) {
        const p = 1 === tok.length ? char_pairs[tok] : undefined;

        if (undefined === p) {
          content += tok;
          continue}

        if (true === p) {
          content += tok;
          stack.push(tok);
          continue}

        const tip = stack.pop();
        if (tip !== p) {
          const loc = ctx.loc_tip.move(content);
          throw loc.syntaxError(
      `Mismatched nesting in ${this.description} (${loc})`) }

        if (0 !== stack.length) {
          content += tok;
          continue}

        if (content) {
          this.emit_ast(ctx, content); }
        this.emit_ast(ctx, tok, this.ast_end || 'nested_end');
        ctx.scanner = this.restore_scanner;
        return}

      // all tokens with non-zero stack
      if (content) {
        this.emit_ast(ctx, content); } } };


  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  let RegExpScanner$1 = class RegExpScanner extends BaseSourceScanner$1 {

    _compileForInit() {
      const {rx_open, rx_close} = this;
      const rx_disp = new RegExp(
        (rx_open ? rx_open.source : '') + rx_close.source);

      const rx_resume = new RegExp(
        '^' + rx_close.source);

      Object.defineProperties(this,{
        rx_disp:{value: rx_disp}
      , rx_resume:{value: rx_resume} } ); }

    withDispatch(ds) {
      this.compileForDispatch(ds);
      return this}

    compileForDispatch(ds) {
      if (undefined === this.kind) {return}

      const match = this.rx_disp.exec(this.example);
      if (null === match || this.kind !== match[1] || null == match[2]) {
        throw new Error(`Invalid scanner regexp and/or example (${this.description})`) }

      ds.addRegExpScanner(this, this.kind, this.rx_disp.source); }



    newline(ctx, is_blank) {
      if (! this.multiline && ! this.allow_blank_close) {
        throw ctx.ln.loc.end.syntaxError(
    `Newline in ${this.description} (${ctx.ln.loc.end})`) } }

    ast_extend(ctx, ast) {
      const ln = this.ln_first || ctx.ln;
      if (undefined !== ln.len_inner) {
        ast.block_indent = ln.len_inner;}
      return ast}

    scan(ctx, idx0) {
      const match = this.rx_disp.exec(ctx.ln_source.slice(idx0));
      if (null === match) {
        throw ctx.loc_tip.syntaxError(
    `Invalid scan ${this.description}. (${ctx.loc_tip})`) }

      const [content, open, close] = match;

      const t_content = this.nestTrim(content, close, false);
      if (null != t_content) {
        this.ast_scan_match({open, close},
          this.emit_ast(ctx, t_content,) ); }
      return this.post_scan(ctx, close)}

    scan_continue(ctx, idx0) {
      ensure_indent$1(ctx, this);

      const match = this.rx_resume.exec(ctx.ln_source.slice(idx0));
      if (null === match) {
        throw ctx.loc_tip.syntaxError(
    `Invalid scan continue ${this.description}. (${ctx.loc_tip})`) }

      const [content, close] = match;

      const t_content = this.nestTrim(content, close, true);
      if (null != t_content) {
        this.ast_scan_match({close},
          this.emit_ast(ctx, t_content,) ); }
      return this.post_scan(ctx, close)}

    ast_scan_match(match, ast) {}

    nestTrim(content, close, isContinue) {return content}

    post_scan(ctx, close) {
      if (! close) {
        if (this.invert_close) {
          // e.g. no '\' continuations at end of line
          return true}

        if (! this.allow_blank_close) {
          ctx.scanner = this.continueScanner(ctx);}
        return}

      else if (this.invert_close) {
        // e.g. '\' continuations at end of line
        ctx.scanner = this.continueScanner(ctx);}

      return this.nestMatch(close,
        ctx, this.hostScanner || this) }

    nestMatch(close, ctx, hostScanner) {
      const nesting = this.nesting;
      if (undefined !== nesting) {
        return this.nestWith(
          nesting[close],
          ctx, hostScanner) }
      return true }// pop ctx.scanner

    nestWith(nested, ctx, hostScanner) {
      if (true === nested || undefined === nested || null === nested) {
        return true }// pop ctx.scanner

      else if (hostScanner === nested || 'host' === nested) {
        ctx.scanner = hostScanner.continueScanner(ctx);
        return}

      else if ('function' === typeof nested.nestedScanner) {
        ctx.scanner = nested.nestedScanner(ctx);
        return}

      else if ('function' === typeof nested) {
        return nested(ctx, hostScanner) }

      return nested}


    nestedScanner(ctx) {
      return this._asNestedScanner(ctx, 'nest',{} ) }

    continueScanner(ctx) {
      return this._asNestedScanner(ctx, 'cont',{
        op: this.op_continue || this.op
      , continueScanner(ctx) {return this}
      , scan(ctx, idx0) {
          this.scan_continue(ctx, idx0);} } ) }

    _asNestedScanner(ctx, desc, body) {
      const restore_scanner = ctx.scanner;
      const self ={
        __proto__: this
      , description: `${this.description} (${desc})`
      , ln_first: ctx.ln_first || ctx.ln

      , _pop_scanner(ctx) {
          if (this.op_pop) {
            this.emit_ast(ctx, '', this.op_pop); }
          ctx.scanner = restore_scanner;}

      , scan(ctx, idx0) {
          if (true === super.scan(ctx, idx0)) {
            this._pop_scanner(ctx);} }

      , scan_continue(ctx, idx0) {
          if (true === super.scan_continue(ctx, idx0)) {
            this._pop_scanner(ctx);} } };

      return Object.assign(self, body) } };


  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  let MultiLineScanner$1 = class MultiLineScanner extends RegExpScanner$1 {
    newline(ctx, is_blank) {}
    get multiline() {return true}

    ast_extend(ctx, ast) {
      //let ln = this.ln_first || ctx.ln
      let col = ast.loc.start.column;
      let mlctx = this.mlctx ??= {col};

      if (col < mlctx.col) {
        mlctx.col = col;}

      ast.mlctx = mlctx;
      return ast} };


  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  let TaggedRegExpScanner$1 = class TaggedRegExpScanner extends RegExpScanner$1 {
    withTag(ctx, tag, hostScanner) {
      const rx_replace = this.rx_replace || /tag/g;

      const re_open = this.rx_open.source
        .replace(rx_replace, tag);
      const re_close = this.rx_close.source
        .replace(rx_replace, tag);

      const rx_open = new RegExp(re_open);
      const rx_close = new RegExp(re_close);
      const rx_disp = new RegExp(re_open + rx_close.source);
      const rx_resume = new RegExp('^' + re_close);

      const self ={__proto__: this, hostScanner,
        rx_open, rx_close, rx_resume, rx_disp,
        tag, ln_first: ctx.ln
      , compileForDispatch(ds) {
          // skip testing example for second pass of this object
          ds.addRegExpScanner(this, this.kind, this.rx_disp.source); } };

      self.tagScanner(ctx, tag, hostScanner);
      return self}

    tagScanner(ctx, tag, hostScanner) {} };


  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  let DynamicScanner$1 = class DynamicScanner extends MultiLineScanner$1 {
    scan(ctx, idx0) {
      const leader_match = this.rx_disp.exec(ctx.ln_source.slice(idx0));

      const self = this.withLeaderTag(ctx, leader_match[2]);
      return self._leader.scan(ctx, idx0)}

    withLeaderTag(ctx, tag) {
      const self ={
        __proto__: this
      , __root__: this.__root__ || this
      , ln_first: ctx.ln};

      self._trailer = this.trailer && this.trailer.withTag(ctx, tag, self);
      self._leader = this.leader.withTag(ctx, tag, self);
      return self} };


  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  let EmbeddedDynamicScanner$1 = class EmbeddedDynamicScanner extends DynamicScanner$1 {
    continueScanner(ctx) {
      ensure_indent$1(ctx, this);
      const ds_body = this.ds_body.cloneWithScanner(this._trailer);

      // inherit ln_first
      ds_body.ln_first = 
        ds_body.disp_name === ctx.dispatch.disp_name
          ? ctx.dispatch.ln_first
          : this.ln_first || ctx.ln;

      return ds_body}

    andDispatchWith(options) {
      options.scannerList =[... options.scannerList, this];
      const ds_body = new EmbeddedDispatchScanner$1(options);
      this.ds_body = ds_body;
      return ds_body} };

  function bind_context_scanner$1(context_scanners) {
    if (! Object.isFrozen(context_scanners) || ! Array.isArray(context_scanners)) {
      throw new TypeError(`Expected a frozen array of context scanners`) }

    const cache = bind_context_scanner$1.cache || new WeakMap();
    if (cache !== bind_context_scanner$1.cache) {
      bind_context_scanner$1.cache = cache;}

    let res = cache.get(context_scanners);
    if (undefined === res) {
      res = compile_context_scanner$1(context_scanners);
      cache.set(context_scanners, res);}
    return res}


  function compile_context_scanner$1(context_scanners) {
    const ds_first = build_composite_scanner();
    return context_scanner

    function context_scanner(offside_lines) {
      const ctx ={scanner: ds_first.clone0()};

      for (const ln of offside_lines) {
        if (ln.is_blank) {
          delete ln.content;
          ctx.scanner.newline(ctx, true);
          continue}


        ctx.parts = [];
        ctx.ln = ln;

        scan_source(ctx, ln.content);

        if (0 === ctx.parts.length) {
          throw new Error(`No parts generated by context scanner`) }

        ln.content = ctx.parts;
        ctx.scanner.newline(ctx, false);}

      ctx.scanner.newline(ctx, true);
      return offside_lines}


    function scan_source(ctx, ln_content) {
      const ln_source = ctx.ln_source = ln_content.content;
      const loc_start = ctx.loc_tip = ctx.loc_start = ln_content.loc.start;
      const pos0 = loc_start.pos;

      while (true) {
        const idx0 = ctx.loc_tip.pos - pos0;
        if (idx0 >= ln_source.length) {
          return }// done with this line

        ctx.scanner.scan(ctx, idx0); } }


    function build_composite_scanner() {
      const ds_body = new DispatchScanner$1().startCompile();
      ds_body.description = 'JSY Dispatch scanner (0)';
      const ds_first = new DispatchFirstlineScanner$1().startCompile();
      ds_first.description = 'Firstline JSY Dispatch scanner (0)';

      for (const scanner of context_scanners) {
        if (! scanner) {continue}

        const ds = scanner.firstline ? ds_first : ds_body;
        ds.addScanner(scanner);}

      ds_body.finishCompile();
      return ds_first.finishCompile(ds_body)} }

  function scan_offside_contexts$1(source, feedback, disp_name, context_scanners) {
    // see scan_javascript and scan_clike for good context_scanners
    const context_scanner = bind_context_scanner$1(disp_name);
    return context_scanner(basic_offside_scanner$1(source, feedback)) }

  const scanner_source$1 =
    new SourceCodeScanner$1({
        description: 'Source Code Scanner'
      , op: 'src'});

  const scanner_nestedSrc$1 =
    new NestedCodeScanner$1({
      op: 'src', description: 'Template parameter source'
    , char_pairs:{
        '{': true, '}': '{'
      , '(': true, ')': '('
      , '[': true, ']': '['} });

  const scanner_hashbangDirective$1 =
    new RegExpScanner$1({
        description: 'Hashbang directive'
      , example: '#!/usr/bin/env node'
      , op: 'hashbang', kind:'#!'
      , rx_open: /^(#!)/, rx_close: /.*($)/,
        firstline: true
      , allow_blank_close: true});

  const scanner_commentEOL$1 =
    new RegExpScanner$1({
        description: 'Comment to end of line'
      , example: '// comment'
      , op: 'comment_eol', kind:'//'
      , rx_open: /(\/\/)/, rx_close: /.*($)/,
        allow_blank_close: true});

  const scanner_commentMultiLine$1 =
    new MultiLineScanner$1({
        description: 'Multi-line comment'
      , example: '/* comment */'
      , op: 'comment_multi', kind:'/*'
      , rx_open: /(\/\*)/, rx_close: /.*?(\*\/|$)/,});

  const scanner_strSingle$1 =
    new RegExpScanner$1({
        description: 'Single quote string literal'
      , example: "'single quote'"
      , op: 'str1', kind:"'"
      , rx_open: /(')/, rx_close: /(?:\\.|[^'])*('|$)/,});

  const scanner_strDouble$1 =
    new RegExpScanner$1({
        description: 'Double quote string literal'
      , example: '"double quote"'
      , op: 'str2', kind:'"'
      , rx_open: /(")/, rx_close: /(?:\\.|[^"])*("|$)/,});

  const scanner_preprocessor$1 =
    new RegExpScanner$1({
        description: 'Preprocessor directive'
      , example: '# IF platform === "web"'
      , op: 'preprocessor', kind:'#'
      , rx_open: /^\s*(#)/, rx_close: /.*?([\\]?)\s*$/,
        invert_close: true // preprocessor uses '\' continuations
      , allow_blank_close: true});


  const clike_context_scanners$1 = Object.freeze([
    scanner_source$1
  , scanner_hashbangDirective$1
  , scanner_commentEOL$1
  , scanner_commentMultiLine$1
  , scanner_strSingle$1
  , scanner_strDouble$1
  , scanner_preprocessor$1]);

  const scanner_regexp$1 =
    new RegExpScanner$1({
        description: 'RegExp literal'
      , example: '/regexp/'
      , op: 'regexp'
      , kind: '/'

      , /*
        rx_open: rx_or_parts @:
          opts: @[]
            /(\/)(?![\/\*])/    // start of a potential regexp literal, but not a comment

            @{}                 // ...complex regexp grammar...
              pre: ''
              opts: @[]
                /\\./           // ...any escaped character...
                /[^\\\/\[]/     // ...or any non-special character...

                @{}             // ... or a bracket [] expression...
                  pre: '\\['        // started with a '[' character
                  opts: @[]
                    /\\./           // ...with any escaped character
                    /[^\]]/         // ...or any non-escaped non-ending ']' character
                  post: '*\\]'      // ended with an ending ']' character

              post: '+'         // one or more interior expressions

            /(?=\/)/            // (lookahead) end of a regexp literal
        */

        rx_open: new RegExp(
          /(\/)(?![\/\*])/ .source + // a RegExp start but not a comment
          /(?:\\.|[^\\\/\[]|\[(?:\\.|[^\]])*\])+/ .source)

      , rx_close: /(\/[a-z]*)\s*(?=[;.,)\]}]|$)/  // inspired by vim's syntax highlighting end

      , });//multiline: false // spec https://tc39.es/ecma262/#sec-literals-regular-expression-literals


  const scanner_strTemplate$1 =
    new MultiLineScanner$1({
        description: 'Template quote string literal'
      , example: '`template string`'
      , op: 'str_template'
      , kind: '`'
      , rx_open: /(`)\\?/
      , rx_close: /(?:\\.|\$(?!{)|[^\$`\\])*(`|\${|$)/
      , nesting:{
          '${': templateArgNesting$1}

      , ast_scan_match(scan, ast) {
          if ('`' == scan.open) {
            ast.tmpl_opened = true;}
          if ('`' == scan.close) {
            ast.tmpl_closed = true;} } });

  function templateArgNesting$1(ctx, hostScanner) {
    const src = scanner_nestedSrc$1.withOuter({
      scanner: hostScanner.continueScanner(ctx)
    , stack:['{' ]// from the template parameter opening
    , ast_end: 'template_param_end'});

    src.emit_ast(ctx, '', 'template_param');

    ctx.scanner = ctx.dispatch_root.cloneWithScanner(src);}



  const js_context_scanners$1 = Object.freeze([
    scanner_regexp$1
  , scanner_strTemplate$1
  , ... clike_context_scanners$1]);

  const scanner_jsxContent$1 =
    new SourceCodeScanner$1({
        description: 'JSX Content Scanner'
      , op: 'jsx_content'});

  const scanner_jsxContentExpr$1 =
    new RegExpScanner$1({
        description: 'JSX Content Expression'
      , example: '{ param }'
      , op: 'jsx_content_expr'
      , kind: '{'
      , rx_open: /\s*({)/,
        rx_close: /()/,

        nestTrim(content, close, isContinue) {}
      , post_scan(ctx) {jsxArgNesting$1(ctx, null);} });

  const scanner_jsxAttrNameValue$1 =
    new RegExpScanner$1({
        description: 'JSX attribute name value'
      , op: 'jsx_attr_name'
      , rx_open: /\s*([a-zA-Z0-9_:.\-]+)/,
        rx_close: /\s*(=)\s*/,});

  const scanner_jsxAttrNameOnly$1 =
    new RegExpScanner$1({
        description: 'JSX attribute name only'
      , op: 'jsx_attr_name_only'
      , rx_open: /\s*([a-zA-Z0-9_:.\-]+)/,
        rx_close: /()/,

        post_scan(ctx, close) {
          return this.nestMatch(close,
            ctx, this.hostScanner || this) } });

  const scanner_jsxAttrSingle$1 =
    new RegExpScanner$1({
        description: 'JSX Single quote attribute literal'
      , multiline: true
      , op: 'jsx_attr_str1'
      , rx_open: /\s*(')/,
        rx_close: /(?:\\.|[^'])*(')\s*/,});

  const scanner_jsxAttrDouble$1 =
    new RegExpScanner$1({
        description: 'JSX Double quote attribute literal'
      , multiline: true
      , op: 'jsx_attr_str2'
      , rx_open: /\s*(")/,
        rx_close: /(?:\\.|[^"])*(")\s*/,});

  const scanner_jsxTagClose$1 =
    new TaggedRegExpScanner$1({
        description: 'JSX Close Tag'
      , example: '</tag>'
      , op: 'jsx_tag_close'
      , kind: '</'
      , multiline: true
      , rx_open: /(<\/)\s*/
      , rx_close: /([a-zA-Z0-9_:.\-]+)\s*>/

      , tagScanner(ctx) {
          this.restore_scanner = ctx.scanner;}

      , post_scan(ctx, close) {
          if (close !== this.tag) {
            throw ctx.loc_tip.syntaxError(
        `Mismatched JSX close tag "</${close}>", expected "</${this.tag}>". (${ctx.loc_tip})`) }

          ctx.scanner = this.restore_scanner;} });



  const scanner_jsxTag$1 =
    new TaggedRegExpScanner$1({
        description: 'JSX Tag'
      , multiline: true
      , op: 'jsx_tag'
      , op_continue: 'jsx_tag_part'

      , rx_open: /(<)tag\b\s*/
      , rx_close: /\s*?($|\/>|[{'">]|[a-zA-Z0-9_:.\-]+=?)/

      , nesting:{
          '>': 'host' // use hostScanner
        , '/>': true }// pop ctx.scanner

      , nestingEnd:{
          '{': jsxArgNesting$1
        , '=': scanner_jsxAttrNameValue$1
        , "'": scanner_jsxAttrSingle$1
        , '"': scanner_jsxAttrDouble$1}

      , nestTrim(content, close, isContinue) {
          if (! this.nesting[close]) {
            content = content.slice(0, - close.length);}
          return content || null}

      , nestMatch(close, ctx, hostScanner) {
          let inner = this.nesting[close];
          if (undefined === inner) {
            inner = this.nestingEnd[close.slice(-1)]
              || scanner_jsxAttrNameOnly$1;}

          if (true !== inner && 'host' !== inner) {
            // we're actually pushign two scanners onto the stack
            // the first for this context, the second for the attribute
            ctx.scanner = hostScanner = this.continueScanner(ctx);}

          return this.nestWith(inner, ctx, hostScanner) } });

  function jsxArgNesting$1(ctx, hostScanner) {
    const src = scanner_nestedSrc$1.withOuter({
      scanner: null !== hostScanner
        ? hostScanner.continueScanner(ctx)
        : ctx.scanner
    , stack:['{' ]// from the jsx parameter opening
    , ast_end: 'jsx_param_end'});

    src.emit_ast(ctx, '{', 'jsx_param');

    ctx.scanner = ctx.dispatch_root.cloneWithScanner(src);}




  const scanner_jsx$1 =
    new EmbeddedDynamicScanner$1({
        description: 'Embedded JSX expression'
      , example: '<section>content</section>'
      , kind:'<'
      , disp_name: 'jsx'
      , op: 'jsx'

      , // recognize by '<tag' followed by 'attr=' or '/>' or '>'
        rx_open: /(<)([a-zA-Z0-9_:.\-]+)(?=\s*?(?:$|\/>|>|\s{|\s[a-zA-Z0-9_:\-]+=?))/
      , rx_close: /.*$/

      , leader: scanner_jsxTag$1
      , trailer: scanner_jsxTagClose$1});


  const scanner_embedded_jsx$1 =
    scanner_jsx$1.andDispatchWith({
      description: 'JSX Dispatch Scanner (0)'
    , disp_name: 'jsx'

    , scannerList:[
        scanner_jsxContent$1
      , scanner_jsxContentExpr$1] });

  const scanner_jsx_close_fragment$1 =
    new RegExpScanner$1({
        description: 'Embedded JSX fragment close expression'
      , example: '</>'
      , op: 'jsx_frag_close'
      , kind: '</'
      , allow_blank_close: true

      , rx_open: /(<\/)\s*/
      , rx_close: /([a-zA-Z0-9_:.\-]*)\s*>/

      , post_scan(ctx, close) {
          if (close) {
            throw ctx.loc_tip.syntaxError(
        `Mismatched JSX fragment close tag "</${close}>", expected "</$>". (${ctx.loc_tip})`) }

          ctx.scanner = this.restore_scanner;} });

  const scanner_jsx_fragment$1 =
    new RegExpScanner$1({
        description: 'Embedded JSX fragment expression'
      , example: '<></>'
      , op: 'jsx_frag'
      , kind: '<>'

      , rx_open: /(<>)/
      , rx_close: /.*($|<\/>)/

      , nestTrim(content, close, isContinue) {
          return '<>'}

      , post_scan(ctx) {
          const jsx_frag_close ={
            __proto__: scanner_jsx_close_fragment$1
          , restore_scanner: ctx.scanner};

          const ds_body = 
            scanner_embedded_jsx$1.cloneWithScanner(
              jsx_frag_close);

          ds_body.description = 'Fragment' + ds_body.description;
          const disp = ds_body.get_active_dispatch(ctx);
          ds_body.ln_first = disp && disp.ln_first || ctx.ln;

          ctx.scanner = ds_body;} });




  const jsx_context_scanners$1 = Object.freeze([
    scanner_jsx_fragment$1
  , scanner_jsx$1
  , ... js_context_scanners$1]);

  function scan_javascript_with_jsx$1(source, feedback) {
    return scan_offside_contexts$1(source, feedback, jsx_context_scanners$1)}

  const _is_offside_dedent$1 = part => 'offside_dedent' === part.type;
  function jsy_scan$1(source, feedback) {
    const jsy_ast = scan_javascript_with_jsx$1(source, feedback);

    inject_dedent$1(jsy_ast,['comment_eol']);

    for (let ln of jsy_ast) {
      if (ln.is_blank) {continue}

      let ln_parts = ln.content = transform_jsy_ops$1(ln.content, ln);

      let idx_tail = ln_parts.findIndex(_is_offside_dedent$1);
      let dedent = ln_parts[idx_tail--];

      while (idx_tail >= 0) {
        let tail = ln_parts[idx_tail--];
        if (undefined === tail) {
          continue}

        if (/^jsy_op/.test(tail.type)) {
          dedent.ends_with_jsy_op = true;
          tail.ending_jsy_op = true;}
        else if ('src' !== tail.type || tail.content.trim()) {
          break} } }

    return jsy_ast}



  function transform_jsy_ops$1(ln_parts, ln) {
    const res = [];

    for (let p, i=0; undefined !== (p = ln_parts[i]) ; i++) {
      if ('src' === p.type) {
        transform_jsy_part$1(res, p, ln);}
      else res.push(p);}


    // allow keywords at the start and in code blocks after "::"
    let kw_allowed = 'src' === res[0].type;
    for (let idx=0 ; undefined !== res[idx] ; idx ++) {
      if (kw_allowed) {
        transform_jsy_keyword$1(res, idx, ln);
        kw_allowed = false;}

      else if ('jsy_op' === res[idx].type) {
        kw_allowed = '::' === res[idx].op;} }

    return res}



  function transform_jsy_keyword$1(res, idx, ln) {
    const first = res[idx];

    rx_keyword_ops$1.lastIndex = 0;
    const kw_match = rx_keyword_ops$1.exec(first.content);
    if (! kw_match) {return false}

    const rest = kw_match.input.slice(rx_keyword_ops$1.lastIndex);
    if ('(' === rest[0]) {
      return res }// explicit keyword arguments

    const kw_start = first.loc.start;
    const kw_end = kw_start.move(kw_match[0]);
    const kw = kw_match[0].split(' ').filter(Boolean).join(' ');

    const after = rest ? null : res[1+idx];
    const explicit = after && 'jsy_op' === after.type && '@' === after.op;

    const kw_node ={
      type: 'jsy_kw', kw, 
      loc:{start: kw_start, end: kw_end}
    , len_indent: ln.len_indent
    , explicit};

    const post_node = as_src_ast$1(rest, kw_end, first.loc.end);

    res.splice(idx, 1, kw_node, post_node);
    return true}


  function transform_jsy_part$1(res, part, ln) {
     {
      rx_offside_ops$1.lastIndex = 0;

      let loc_tip = part.loc.start;
      while (true) {
        let start = loc_tip, idx0 = rx_offside_ops$1.lastIndex;
        const op_match = rx_offside_ops$1.exec(part.content);

        if (! op_match) {
          _tail(loc_tip, idx0);
          return res}

        if (idx0 < op_match.index) {
          start = loc_tip = _inner(loc_tip, idx0, op_match.index);
          idx0 = rx_offside_ops$1.lastIndex;}


        const op = op_match[0].trim();
        const end = loc_tip = loc_tip.move(op_match[0]);

        const op_part ={
          type: 'jsy_op', op
        , loc:{start, end}
        , len_indent: ln.len_indent
        , content: op_match[0]};

        const op_args = op_match.slice(1).filter(Boolean);
        if (op_args.length) {
          op_part.type = 'jsy_op_args';
          op_part.op_args = op_args;
          op_part.op = op_args.reduce(
            (op, p) => op.replace(p, ''), op); }

        res.push(op_part); } }

    function _unknown_ops(content, loc_tip, idx0) {
      rx_unknown_ops$1.lastIndex = idx0;
      const op_unknown = rx_unknown_ops$1.exec(content);
      if (op_unknown) {
        const op = op_unknown[0].trim();
        const start = loc_tip;
        const end = loc_tip = loc_tip.move(op_unknown[0]);
        res.push({
          type: 'jsy_unknown', op
        , loc:{start, end}
        , len_indent: ln.len_indent
        , content: op_unknown[0]}); } }

    function _inner(loc_tip, idx0, idx_content) {
      const pre = part.content.slice(idx0, idx_content);
      _unknown_ops(pre, loc_tip, idx0);

      const start = loc_tip;
      const end = loc_tip.move(pre);
      res.push(as_src_ast$1(pre, start, end));
      return end}

    function _tail(loc_tip, idx0) {
      const rest = part.content.slice(idx0);
      if (rest) {
        _unknown_ops(rest, loc_tip, idx0);

        const start = loc_tip;
        const end = start.move(rest);
        res.push(as_src_ast$1(rest, start, end)); } } }

  function as_src_ast$1(content, start, end) {
    return {type: 'src', loc: {start, end}, content} }

  const rx_punct$1 =  /[,.;:?]/;
  const rx_binary_ops$1 =  /\&\&|\|\||\?\?/;
  const rx_add_sub_ops$1 =  /(?<![+-])[+-]/; // but exclude increment and decrement ops

  const rx_disrupt_comma_tail$1 = /* #__PURE__ */
    _regexp_join$1('', [ rx_punct$1, /=>/, rx_add_sub_ops$1, rx_binary_ops$1 ], '\\s*$');

  const rx_disrupt_comma_head$1 = /* #__PURE__ */
    _regexp_join$1('^\\s*', [ rx_punct$1, rx_binary_ops$1 ], '');

  const rx_rescue_comma_head$1 = /* #__PURE__ */
    _regexp_join$1('^\\s*', [ /\.\.\./ ], '');

  const rx_last_bits$1 =  /[()\[\]{}]|<\/?\w*>/ ;
  const rx_dict_as_name$1 =  /\s+as\s+\w+/g;

  function checkOptionalComma$1(op, pre_body, post_body) {
    let pre_end = pre_body.split(rx_last_bits$1).pop();
    if (rx_disrupt_comma_tail$1.test(pre_end)) {
      return false}

    let post_start = post_body.split(rx_last_bits$1).shift();
    if (rx_disrupt_comma_head$1.test(post_start)) {
      if (! rx_rescue_comma_head$1.test(post_start)) {
        return false} }

    if (op.pre.includes('{')) {
      // support for blocks like:
      //   import {name as othername} from 'file' blocks
      //   export {name as othername}
      pre_body = pre_body.replace(rx_dict_as_name$1, '');
      post_body = post_body.replace(rx_dict_as_name$1, '');}

    if (checkSyntax$1(`${op.pre} ${pre_body} , post_body ${op.post}`) ) {
      return true}

    if (checkSyntax$1(`${op.pre} pre_body , ${post_body} ${op.post}`) ) {
      return true}

    return false}


  const fn_flavors$1 = [
    (function(){}).constructor
  , (function *(){}).constructor
  , (async function(){}).constructor
  , (async function *(){}).constructor];

  function checkSyntax$1(expr) {
    for (let FuncKind of fn_flavors$1) {
      try {
        new FuncKind(`return ${expr}`);
        return true}
      catch (err) {} }

    return false}


  function _regexp_join$1(pre, rx_options, post) {
    rx_options = [... rx_options]
      .flatMap(rx => rx ? [rx.source] : []);
    return new RegExp(`${pre}(?:${rx_options.join('|')})${post}`)}

  const pp_sym$1 = Symbol('#IF?');
  const basic_preprocessor_proto$1 ={
    bind() {
      const rx = /^#\s*([A-Z]+\b)(.*)$/;
      return (( part, stacktop ) => {
        let [,directive,arg] = rx.exec(part.content) || [];
        if (! this['v$'+directive]) {
          throw this.syntaxError(part)}

        return this['v$'+directive](
          part, (arg||'').trim(), stacktop) }) }

  , syntaxError: part => part.loc.start.syntaxError(`Preprocessor Invalid: "${part.content}"`)

  , v$IF(part, arg, stacktop) {
      if (! arg) {throw this.syntaxError(part)}
      let ans = !! this.answerFor(arg);
      return stacktop[pp_sym$1] = ans}

  , v$ELIF(part, arg, stacktop) {
      if (! arg || 'boolean' !== typeof stacktop[pp_sym$1]) {
        throw this.syntaxError(part)}

      if (! stacktop[pp_sym$1]) {
        let ans = !! this.answerFor(arg);
        return stacktop[pp_sym$1] = ans}
      return false}

  , v$ELSE(part, arg, stacktop) {
      if (arg || 'boolean' !== typeof stacktop[pp_sym$1]) {
        throw this.syntaxError(part)}

      if (! stacktop[pp_sym$1]) {
        stacktop[pp_sym$1] = null;
        return true}
      return false} };


  function basic_preprocessor$1(answerFor) {
    if (null == answerFor) {
      return }// defines is null -- disable preprocessor

    if ('object' === typeof answerFor) {
      answerFor = shunting_yard$1(answerFor);}
    else if ('function' !== typeof answerFor) {
      throw new TypeError(`Expected a function or object for basic_preprocessor`) }

    return {__proto__: basic_preprocessor_proto$1, answerFor}.bind()}


  function shunting_yard$1(defines) {
     {
      let _op_ = (order, op_fn) => (op_fn.order=order, op_fn);
      let NOT = v => ! v;
      let AND = (a, b) => a && b;
      let OR = (a, b) => a || b;

      let ops ={
        __proto__: null
      , false: false, FALSE: false,
        true: true, TRUE: true
      , NOT, '!': _op_(0, NOT),
        AND, '&&': _op_(10, AND),
        OR, '||': _op_(20, OR),};

      var lut_expr = key => ops[key] ?? defines[key];}

    function eval_op(fn_op, args) {
      args.push(
        fn_op.length
          ? fn_op(... args.splice(-fn_op.length))
          : fn_op()); }

    return function eval_shunting_yard(expr_src) {
      // see https://en.wikipedia.org/wiki/Shunting-yard_algorithm
      let args=[], ops=[];

      let expr = expr_src.split(/\s+/).map(lut_expr);
      for (let tip of expr) {
        if ('function' !== typeof tip) {
          args.push(tip);
          continue}

        // eval all lesser order operations
        while (ops[0] && (0 | ops[0].order) <= (0 | tip.order)) {
          eval_op(ops.shift(), args);}

        // push this operator on the stack
        ops.unshift(tip);}

      // evaluate all operations
      while (ops[0]) {
        eval_op(ops.shift(), args);}

      if (1 !== args.length) {
        throw new SyntaxError(
    `Invalid preprocessor expression: "${expr_src}"`) }

      return args[0]} }

  const preprocess_visitor$1 = {
    __proto__: null

  , *ast_iter(ast) {
      let ln, state = this.start();

      for (ln of ast) {
        ln = ln.is_blank
          ? this.blank_line(ln)
          : this.ast_line(ln, state);

        if (null != ln) {
          yield ln;} }

      ln = this.finish(state);
      if (null != ln) {
        yield ln;} }

  , start() {return {tip: {}}}
  , finish(state) {}

  , blank_line(ln) {return ln}

  , indent_state(ln, state) {
      let tip = state.tip;
      while (ln.len_indent < (tip.len|0)) {
        tip = tip.tail;}

      return state.tip = tip}

  , _dbg_ln(ln) {return ln.indent.indent + ln.content.map(v=>v.content||'').join('')}

  , ast_line(ln, state) {
      let tip = this.indent_state(ln, state);

      if ('exclude' === tip.op) {
        this.exclude_line(ln, state);
        return ln}

      //if tip.dedent > 0  ::
      //  ln.indent.indent = ln.indent.indent.slice(0, -tip.dedent)

      for (let part of ln.content) {
        this[`v$${part.type}`]?.( part, ln, state );}
      return ln}

  , preprocess(p, stacktop) {}
  , v$preprocessor(p, ln, state) {
      let tail = state.tip;
      let ans = p.ans = this.preprocess(p, tail);

      if (false === ans) {
        p.type += '_exc';
        state.tip ={
          op: 'exclude'
        , len: ln.len_inner
        , tail}; }

      else if (true === ans) {
        p.type += '_inc';
        state.tip ={
          len: ln.len_inner
        , //dedent: (tail.dedent|0) + ln.len_inner - ln.len_indent
          tail}; }

      else if ('string' === typeof ans) {
        p.type += '_sz';} }


  , exclude_line(ln, state) {
      let content =[
        {type: 'exclude_line', content: '//~ '} ];

      for (let part of ln.content) {
        if ('offside_dedent' === part.type) {
          content.unshift(part);}
        else {
          part.type = 'exclude_part';
          content.push(part);} }

      ln.content = content;
      return ln} };

  const rx_leading_space$1 =  /^[ \t]+/ ;

  const root_head$1 = /* #__PURE__ */ Object.freeze({__proto__: null});

  const transpile_visitor$1 = {
    __proto__: null

  , *ast_iter(jsy_ast) {
      this.start();

      let ln, fin;
      for (ln of jsy_ast) {
        fin = this.ast_line(ln);
        yield `${fin?.join('') ?? fin ?? ''}\n`;}

      fin = this.finish();
      yield `${fin?.join('') ?? fin ?? ''}\n`;}


  , ast_line(ln) {
      if (ln.is_blank) {
        return this.blank_line(ln)}

      this.start_line(ln);
      this.v$offside_indent(ln.indent);

      let prev = ln.indent;
      for (let part of ln.content) {
        let fn_visit = `v$${part.type}`;
        if (undefined === this[fn_visit]) {
          throw new Error(`JSY transpile function "${fn_visit}" not found`) }

        this[fn_visit]( part, ln, prev );
        prev = part;}

      return this.finish_line(ln)}

  , start() {
      this.lineno = 0;
      this.head = root_head$1;}

  , finish() {
      if (root_head$1 !== this.head) {
        throw new Error('Excess stack at finish') } }

  , blank_line(ln) {
      this.lineno ++;}

  , start_line(ln) {
      this.lineno ++;
      this.cur_ln = ln;
      let line_src = this._cur = [];
      line_src.finish_ops = [];}

  , finish_line(ln) {
      let line_src = this._cur;
      for (let fn of line_src.finish_ops || []) {
        line_src = fn(line_src, ln);}

      let comma_body = this.head.comma_body;
      if (undefined !== comma_body) {
        comma_body.push('\n'); }

      return line_src}

  , emit_raw(src) {
      if (src) {this._cur.push(src);} }

  , emit(src, loc_start) {
      if (loc_start && this.addSourceMapping) {
        const column = this._cur.join('').length;
        this.addSourceMapping({
          generated:{line: this.lineno, column}
        , original:{line: loc_start.line, column: loc_start.column} }); }

      const comma_body = this.head.comma_body;
      if (undefined !== comma_body) {
        comma_body.push(src); }

      this._cur.push(src); }

  , emit_indent(indent) {
      const cur = this._cur;
      if (0 !== cur.length) {
        throw new Error(`Indent must be first element of cur list`) }

      const comma_body = this.head.comma_body;
      if (undefined === comma_body) {
        cur.push(indent);
        return}

      comma_body.splice(0, comma_body.length,
        comma_body.join('').trimLeft());

      if (comma_body.len_inner != this.cur_ln.len_indent) {
        cur.push(indent);
        return}

      cur.push(indent || ' ');

      let finish_commas = (cur) => {
        const pre = comma_body[0];
        if (! pre) {return cur}

        const post = comma_body.slice(1).join('');
        const opt_comma = this.checkOptionalComma(comma_body.op, pre, post);
        if (opt_comma) {
          if (cur[0].length > 1) {
            cur[0] = cur[0].replace(/\s\s$/, ', ');}
          else cur[0] = ',';
          comma_body.shift();}
        return cur};

      cur.finish_ops.push(finish_commas); }

  , _checkOptionalComma: checkOptionalComma$1
  , checkOptionalComma: checkOptionalComma$1

  , stack_push(op, p) {
      if (op.foldTop && this.head.isFoldable) {
        this.stack_pop();}

      if (null === op.post) {
        if (op.pre) {this.emit(op.pre);}
        return}

      const {len_indent, loc} = p;
      const head ={__proto__: this.head
      , op, len_indent, loc
      , isFoldable: op.isFoldable
      , nestBreak: op.nestBreak};

      if (',' == op.implicitSep) {
        const comma_body = head.comma_body = [];
        comma_body.op = op;
        comma_body.len_inner = this.cur_ln.len_inner;}
      else head.comma_body = undefined;

      if (op.in_nested_block) {
        head.in_nested_block = true;
        head.nested_block_indent = len_indent;}

      head.tail = [this.head].concat(head.tail || []);

      let src_pre = head.op.pre;
      if (src_pre) {this.emit(src_pre);}

      this.head = head;}

  , stack_pop(c) {
      let head = this.head;
      let next = head.tail[0];
      this.head = next;

      if (next.comma_body) {
        let substitute = head.op.substitute ??(// explicit substution
          ',' == head.op.implicitSep ? 'expr' // is a comma-based expression
          : /[\)\]]\s*$/.test(head.op.post) ? 'expr' // ends as call or index expr
          : null);

        if (null != substitute) {
          // internal op was an expression; simplify for comma_body
          next.comma_body.push(` ${substitute} `);} }

      let src_post = head.op.post;
      if (src_post) {
        this.emit(c ? ' '+src_post : src_post); } }

  , v$jsy_unknown(p) {
      throw p.loc.start.syntaxError(
`JSY unknown operator "${p.op}"`  ) }

  , v$jsy_kw(p) {
      const kw_op = p.explicit
        ? extra_jsy_ops$1.kw_explicit
        : extra_jsy_ops$1.kw_normal;

      this.stack_push(kw_op.kwExpandOp(p), p); }

  , v$jsy_op(p) {
      this._jsy_op(at_offside_map$1[p.op], p); }

  , v$jsy_op_args(p) {
      this._jsy_op(at_offside_map$1[p.op], p); }

  , _jsy_op(jsy_op, p) {
      if (! jsy_op) {
        throw new Error(`JSY op handler not found for "${p.op}"`) }

      if (jsy_op.warn) {jsy_op.warn(p);}

      if (jsy_op.opResolve) {
        jsy_op = validate_jsy_op_item$1(jsy_op.opResolve(p));
        if (jsy_op.warn) {jsy_op.warn(p);} }

      this._jsy_op_exec(jsy_op, p);}

  , _jsy_op_exec(jsy_op, p) {
      if (jsy_op.is_kw_close) {
        this._dedent_nested_block(p);}

      this.stack_push(jsy_op, p); }


  , _dedent_nested_block(p) {
      if (! this.head.in_nested_block) {return}

      if (null != p) {
        p.len_indent = this.head.nested_block_indent;}

      let c = 0, done=false;
      while (this.head && this.head.in_nested_block && ! done) {
        done = this.head.op.in_nested_block;
        this.stack_pop(c++); } }

  , _dedent_multi_ops() {
      if (! this.head.loc) {return}

      const line = this.cur_ln.loc.start.line;
      const t = this.head.tail
        .filter(t => t.loc && line === t.loc.start.line)
        .pop();

      if (undefined === t) {return}

      let c = 0;
      while (t !== this.head && !this.head.nestBreak) {
        this.stack_pop(c++); } }

  , v$offside_dedent(p) {
      if (! p.ends_with_jsy_op) {
        this._dedent_multi_ops();}

      let c = 0;
      while (this.head.len_indent >= p.len_dedent) {
        this.stack_pop(c++); } }


  , v$offside_indent(p) {
      this.emit_indent(p.indent); }


  , v$template_param(p) {this._param(extra_jsy_ops$1.tmpl_param, p);}
  , v$template_param_end(p) {this._param_end(p);}

  , v$jsx_param(p) {this._param(extra_jsy_ops$1.jsx_param, p);}
  , v$jsx_param_end(p) {this._param_end(p);}

  , _param(op, p) {
      this.stack_push(op, p);
      this.emit_raw(p.content); }

  , _param_end(p) {
      this._dedent_nested_block(p);
      this.emit_raw(p.content);

      let comma_body = this.head.comma_body;
      if (undefined !== comma_body) {
        // fixup comma_body with simplified template param
        comma_body.push('null }'); } }


  , v$str_template(p, ln, p0) {
      if (p.tmpl_opened) {
        this.stack_push(op_template_str$1, p); }

      if (p0 === ln.indent && p.mlctx) {
        let indent = this._cur.pop();
        this._cur.push(indent.slice(p.mlctx.col)); }

      this.emit(p.content, p.loc.start);

      if (p.tmpl_closed) {
        this.stack_pop();
        let comma_body = this.head.comma_body;
        if (undefined !== comma_body) {
          // fixup comma_body with simplified template param
          comma_body.push('`tmpl_expr`'); } } }

  , v$src(p, ln, p0) {
      let content = p.content;
      if ({jsy_op:1, jsy_kw:1}[p0.type] && rx_leading_space$1.test(content)) {
        content = content.replace(rx_leading_space$1, '');}

      this.emit(content, p.loc.start); }


  , v$preprocessor(p, ln) {this.emit(p.content);}
  , v$preprocessor_sz(p, ln) {this.emit(p.ans);}
  , v$preprocessor_inc(p, ln) {
      if (this.inc_preprocessor) {
        this.emit(`//+~${p.content}`); } }
  , v$preprocessor_exc(p, ln) {
      if (this.inc_preprocessor) {
        this.emit(`//-~${p.content}`); } }
  , v$exclude_line(p, ln) {
      if (this.inc_preprocessor) {
        this.emit(p.content);} }
  , v$exclude_part(p, ln) {
      if (this.inc_preprocessor) {
        this.emit(p.content);} }

  , v$str: direct_src$1
  , v$str1: direct_src$1
  , v$str2: direct_src$1

  , v$regexp: direct_src$1

  , v$jsx_frag: direct_src$1
  , v$jsx_frag_close: direct_src$1
  , v$jsx_tag: direct_src$1
  , v$jsx_tag_part: direct_src$1
  , v$jsx_tag_close: direct_src$1
  , v$jsx_attr_name: direct_src$1
  , v$jsx_attr_name_only: direct_src$1
  , v$jsx_attr_str1: direct_src$1
  , v$jsx_attr_str2: direct_src$1
  , v$jsx_content: direct_src$1
  , v$jsx_content_expr: direct_src$1

  , v$hashbang: raw_src$1
  , v$comment_eol: raw_src$1
  , v$comment_multi: raw_src$1};


  function raw_src$1(p) {this.emit_raw(p.content);}
  function direct_src$1(p) {this.emit(p.content, p.loc.start);}

  function validate_jsy_op_item$1(jsy_op_item) {
    let {pre, post} = jsy_op_item;

    if (null !== pre && 'string' !== typeof pre) {
      throw new Error('Invalid resolved jsy_op_item.pre result') }
    if (null !== post && 'string' !== typeof post) {
      throw new Error('Invalid resolved jsy_op_item.post result') }

    return jsy_op_item}

  function jsy_transpile$1(ast, feedback) {
    return [... jsy_iter_transpile$1(ast, feedback)]
      .join('') // join the stream that has embedded newlines
      .replace(/\s+$/, '\n') }// trimming excess whitespace at end into single newline

  function * jsy_iter_transpile$1(ast, feedback) {
    if (! feedback) {feedback = {};}

    if ('string' === typeof ast) {
      ast = jsy_scan$1(ast, feedback);}


    let preprocess = feedback.preprocessor?.()
      ?? basic_preprocessor$1(feedback.defines);

    if (preprocess) {// preprocessor pass
      let pp_visitor ={
        __proto__: preprocess_visitor$1
      , ... feedback.preprocess_visitor
      , preprocess};

      ast = pp_visitor.ast_iter(ast);}


     {// transpile pass
      let jsy_visitor ={
        __proto__: transpile_visitor$1
      , ... feedback.visitor};

      if (feedback.checkOptionalComma) {
        jsy_visitor.checkOptionalComma = feedback.checkOptionalComma;}

      if (feedback.addSourceMapping) {
        jsy_visitor.addSourceMapping = feedback.addSourceMapping;}


      yield * jsy_visitor.ast_iter(ast);}


     {// sourcemap output
      let srcmap = feedback.inlineSourceMap?.();
      if (srcmap) {
        yield sourcemap_comment$1(srcmap, '\n');} } }

  ({
    i: 1, ts: Date.now().toString(36)});

  const { assert: assert$6 } = require('chai');

  function scan_jsy_lines(jsy_lines) {
    return jsy_scan$1(jsy_lines.join('\n')) }

  function jsy_scan_throws(error, jsy_lines) {
    if (Array.isArray(error)) {
      jsy_lines = error;
      error = SyntaxError;}

    return assert$6.throws(
      (() =>scan_jsy_lines(jsy_lines))
    , error) }



  function ast_tokens(offside_ast) {
    return offside_ast
      .filter(ln => ! ln.is_blank)
      .map(ln =>
        ln.content.map(e => e.type) ) }

  function dbg_tokens(offside_ast) {
    const lead_start = '  @[]', lead_space = '     ';

    console.log();
    for (const ln of offside_ast) {
      if (ln.is_blank) {continue}
      let lead = lead_start;

      for (const e of ln.content) {
        console.log(`${lead} ${JSON.stringify(e.type)}'`);

        lead = lead_space;}

      console.log();} }

  function test_ast_tokens(offside_ast, ... expected) {
    const tokens = ast_tokens(offside_ast);
    try {
      assert$6.deepEqual(tokens, expected); }
    catch (err) {
      dbg_tokens(offside_ast);
      throw err}

    jsy_transpile$1(offside_ast);}



  function ast_tokens_content(offside_ast) {
    return offside_ast
      .filter(ln => ! ln.is_blank)
      .map(ln =>
        ln.content.map(e => {
          const sub = 'regexp' === e.type
            ? e.content
            : JSON.stringify(e.content) || '';

          return `${e.type} ${sub}`.trim()} ) ) }

  function dbg_tokens_content(offside_ast) {
    const lead_start = '  @[]', lead_space = '     ';

    console.log();
    for (const ln of offside_ast) {
      if (ln.is_blank) {continue}
      let lead = lead_start;

      for (const e of ln.content) {
        let sub = 'regexp' === e.type
          ? e.content.replace(/\\/g, '\\\\')
          : JSON.stringify(e.content);

        if (undefined !== sub) {
          sub = sub.replace(/'/g, "\\'");
          console.log(`${lead} '${e.type} ${sub}'`); }
        else {
          console.log(`${lead} '${e.type}'`); }

        lead = lead_space;}

      console.log();} }

  function test_ast_tokens_content(offside_ast, ... expected) {
    const tokens = ast_tokens_content(offside_ast);
    try {
      assert$6.deepEqual(tokens, expected); }
    catch (err) {
      dbg_tokens_content(offside_ast);
      throw err}

    jsy_transpile$1(offside_ast);}

  require('chai');

  describe('Scanners', (() => {
    describe('C-Like Line Scanner', (() => {

      it('Works with JSY', (() => {
        // source from https://github.com/shanewholloway/js-consistent-fnvxor32/blob/d2554377c4a540258f93f2958d4259c1f4f03ff9/code/fnvxor32.jsy on 2018-08-09
        scan_clike(`
export function hash_fnv32(sz) ::
  // FNV32, from https://en.wikipedia.org/wiki/Fowler%E2%80%93Noll%E2%80%93Vo_hash_function#FNV-1a_hash
  let h = 0x811C9DC5 // fnv-1a 32 bit initial value
  for let i=0; i < sz.length; i++ ::
    h ^= sz.charCodeAt(i)
    h += (h << 24) + (h << 8) + (h << 7) + (h << 4) + (h << 1)
  return h

export function xor32(h) ::
  // XOR Shift 32, from https://en.wikipedia.org/wiki/Xorshift
  // from Marsaglia, George (July 2003). "Xorshift RNGs". Journal of Statistical Software. 8 (14). doi:10.18637/jss.v008.i14.
  h ^= h << 13
  h ^= h >>> 17
  h ^= h << 5
  return h
`); } ) );

      it('Works with block comments', (() => {
        const src = `
/**
 * Author:    Somebody
 * Created:   2018.08.09
 * 
 * This is a commonly found block comment style
 **/
`;

        test_ast_tokens(scan_clike(src),
          ['comment_multi']
        , ['comment_multi']
        , ['comment_multi']
        , ['comment_multi']
        , ['comment_multi']
        , ['comment_multi'] ); } ) );

      it('Preprocessor simple block', (() => {
        const src = `
  # IF awesome(a,b,c)
      one
      two
      three
`;

        test_ast_tokens_content(scan_clike(src), 
          ['preprocessor "# IF awesome(a,b,c)"']
        , ['src "one"']
        , ['src "two"']
        , ['src "three"'] ); } ) );

      it('Preprocessor continuation block', (() => {
        const src = `
  # DEFINE awesome \\
    body_of_awesome

      odd but acceptable indented block
`;

        test_ast_tokens_content(scan_clike(src), 
          ['preprocessor "# DEFINE awesome \\\\"']
        , ['preprocessor "body_of_awesome"']
        , ['src "odd but acceptable indented block"'] ); } ) );

      it('Works with Rust-Lang source', (() => {
        // source from https://doc.rust-lang.org/rust-by-example/flow_control/while.html on 2018-08-09
        scan_clike(`
fn main() ::
    // A counter variable
    let mut n = 1;

    // Loop while 'n' is less than 101
    while n < 101 ::
        if n % 15 == 0 ::
            println!("fizzbuzz");
        else if n % 3 == 0 ::
            println!("fizz");
        else if n % 5 == 0 ::
            println!("buzz");
        else ::
            println!("{}", n);

        // Increment counter
        n += 1;
`); } ) );

      it('Works with Go-Lang source', (() => {
        // source from https://golang.org/ on 2018-08-09
        scan_clike(`
// A concurrent prime sieve

package main

import "fmt"

// Send the sequence 2, 3, 4, ... to channel 'ch'.
func Generate(ch chan<- int) ::
  for i := 2; ; i++ ::
    ch <- i // Send 'i' to channel 'ch'.

// Copy the values from channel 'in' to channel 'out',
// removing those divisible by 'prime'.
func Filter(in <-chan int, out chan<- int, prime int) ::
  for ::
    i := <-in // Receive value from 'in'.
    if i%prime != 0 ::
      out <- i // Send 'i' to 'out'.

// The prime sieve: Daisy-chain Filter processes.
func main() ::
  ch := make(chan int) // Create a new channel.
  go Generate(ch)      // Launch Generate goroutine.
  for i := 0; i < 10; i++ ::
    prime := <-ch
    fmt.Println(prime)
    ch1 := make(chan int)
    go Filter(ch, ch1, prime)
    ch = ch1
`); } ) );

      it('Works with C++ source', (() => {
        // source from https://en.wikipedia.org/wiki/C%2B%2B on 2018-08-09
        scan_clike(`
#include <iostream>
#include <vector>
#include <stdexcept>

int main() ::
    try ::
        std::vector<int> vec{3, 4, 3, 1};
        int i{vec.at(4)}; // Throws an exception, std::out_of_range (indexing for vec is from 0-3 not 1-4)
    // An exception handler, catches std::out_of_range, which is thrown by vec.at(4)
    catch (std::out_of_range &e) ::
        std::cerr << "Accessing a non-existent element: " << e.what() << '\\n';
    // To catch any other standard library exceptions (they derive from std::exception)
    catch (std::exception &e) ::
        std::cerr << "Exception thrown: " << e.what() << '\\n';
    // Catch any unrecognised exceptions (i.e. those which don't derive from std::exception)
    catch (...) ::
        std::cerr << "Some fatal error\\n";
`); } ) );

      it('Works with C# source', (() => {
        // source from SRCBLAH on 2018-08-09
        scan_clike(`
using System;
using System.Windows.Forms;

class Program ::
    static void Main() ::
        MessageBox.Show("Hello, World!");
        Console.WriteLine("Is almost the same argument!");
`); } ) ); } ) ); } ) );

  const { assert: assert$5 } = require('chai');
  const { SourceMapGenerator } = require('source-map');


  describe('JSY Scanner (doc example)', (() => {
    let offside_ast, offside_src;
    beforeEach (() => {
      // source from https://github.com/shanewholloway/js-consistent-fnvxor32/blob/d2554377c4a540258f93f2958d4259c1f4f03ff9/code/fnvxor32.jsy on 2018-08-09
      offside_ast = jsy_scan$1(offside_src = `
const apiUrl = 'http://api.example.com'

class ExampleApi extends SomeBaseClass ::
  constructor( credentials ) ::
    const apiCall = async ( pathName, body ) => ::
      const res = await fetch @ \`$\{apiUrl}/$\{pathName}\`, @{}
        method: 'POST'
        headers: @{}
          'Content-Type': 'application/json'
        body: JSON.stringify @ body

      return await res.json()

    Object.assign @ this, @{}
      add: data => apiCall @ 'add', data
      modify: data => apiCall @ 'send', data
      retrieve: data => apiCall @ 'get', data

  compare(a,b) ::
    if a > b ::
      console.log @ 'JSY is the best!'
    else if a < b ::
      console.log @ 'JSY rocks!'
    else ::
      console.log @ 'JSY is still awesome!'

  print_q(q) ::
    while 0 != q.length ::
      console.log @ q.pop()
`); } );

    it('can self-verify locations match original source', (() => {
      const to_source = node => node.loc.start.slice(node.loc.end);
      for (const ln of offside_ast) {
        if (ln.is_blank) {continue}

        assert$5.equal(ln.indent.indent, to_source(ln.indent));
        for (const part of ln.content) {
          if (!part.loc || !part.content) {continue}

          assert$5.equal(part.content, to_source(part)); } } } ) );

    it('transpiles to valid JavaScript', (() => {
      const js_src = jsy_transpile$1(offside_ast);
      new Function(`{\n${js_src}\n}`);} ) );

    it('has source-maps', (() => {
      const sourcemap = new SourceMapGenerator();

      const source = 'example.jsy';
      sourcemap.setSourceContent(source, offside_src);

      const js_src = jsy_transpile$1(offside_ast,{
        addSourceMapping(arg) {
          arg.source = source;
          sourcemap.addMapping(arg);}
      , inlineSourceMap() {
          return sourcemap.toString()} } );

      const rx_sourcemap = /^\/\/# sourceMappingURL=/m ;
      assert$5.ok(rx_sourcemap.test(js_src)); } ) ); } ) );

  const { assert: assert$4 } = require('chai');


  describe('JSY Scanner (misc)', (() => {
    it('hashbang', (() => {
      const jsy_src =[
        '#!/usr/bin/env jsy-node'
      , ''
      , 'if test() ::'
      , '  console.log @'
      , '    "hello JSY world!"'];

      const js_src = jsy_transpile$1(scan_jsy_lines(jsy_src));
      assert$4.deepEqual(js_src.split('\n'),[
        '#!/usr/bin/env jsy-node'
      , ''
      , 'if (test()) {'
      , '  console.log('
      , '    "hello JSY world!") }'
      , ''] ); } ) );


    it('syntax error on mixed tabs and spaces (same line)', (() => {
      jsy_scan_throws([
        'first @'
      , '  second @'
      , ' \t third @']); } ) );

    it('syntax error on unterminated single-quote string', (() => {
      jsy_scan_throws([
        'line1'
      , 'const sz = \'unterminated string example'
      , 'line3']); } ) );

    it('syntax error on unterminated double-quote string', (() => {
      jsy_scan_throws([
        'line1'
      , 'const sz = "unterminated string example'
      , 'line3']); } ) );

    it('correctly handles @{} at end of line with trailing spaces', (() => {
      const offside_ast = scan_jsy_lines([
        'const test = @{} a, b, c: @[] '
      , '  d, e, f']);

      test_ast_tokens_content(offside_ast,
        ['src "const test ="'
          , 'jsy_op " @{}"'
          , 'src " a, b, c:"'
          , 'jsy_op " @[]"'
          , 'src " "'
          , 'offside_dedent']

      , ['src "d, e, f"'
          , 'offside_dedent'] );

      const js_src = jsy_transpile$1(offside_ast);
      assert$4.deepEqual(js_src.split('\n'),[
        'const test ={a, b, c:['
      , '  d, e, f] }'
      , ''] ); } ) ); } ) );

  describe('JSY RegExp handling', (() => {
    it('allow division operator', (() => {
      const offside_ast = scan_jsy_lines([
        'line1'
      , 'const expr = first/second'
      , 'line3']);

      test_ast_tokens_content(offside_ast,
        ['src "line1"'
          , 'offside_dedent']

      , ['src "const expr = first/second"'
          , 'offside_dedent']

      , ['src "line3"'
          , 'offside_dedent'] ); } ) );

    it('allow regexp with single quote tokens', (() => {
      const offside_ast = scan_jsy_lines([
        'line1'
      , "const rx_single_quote = /first ' second/"
      , 'line3']);

      test_ast_tokens_content(offside_ast,
        ['src "line1"'
          , 'offside_dedent']

      , ['src "const rx_single_quote = "'
          , "regexp /first ' second/"
          , 'offside_dedent']

      , ['src "line3"'
          , 'offside_dedent'] ); } ) );

    it('allow regexp with double quote tokens', (() => {
      const offside_ast = scan_jsy_lines([
        'line1'
      , 'const rx_double_quote = /first " second/'
      , 'line3']);

      test_ast_tokens_content(offside_ast,
        ['src "line1"'
          , 'offside_dedent']

      , ['src "const rx_double_quote = "'
          , 'regexp /first " second/'
          , 'offside_dedent']

      , ['src "line3"'
          , 'offside_dedent'] ); } ) );

    it('allow regexp with template quote tokens', (() => {
      const offside_ast = scan_jsy_lines([
        'line1'
      , 'const rx_multi_quote = /first ` second/'
      , 'line3']);

      test_ast_tokens_content(offside_ast,
        ['src "line1"'
          , 'offside_dedent']

      , ['src "const rx_multi_quote = "'
          , 'regexp /first ` second/'
          , 'offside_dedent']

      , ['src "line3"'
          , 'offside_dedent'] ); } ) );

    it('allow complex regexp with quote tokens', (() => {
      const offside_ast = scan_jsy_lines([
        'line1'
      , 'const rx_close = /\\s*($|\\/?>|[{\'"]|[a-zA-Z0-9_:.\\-]+=)/'
      , 'line3']);

      test_ast_tokens_content(offside_ast,
        ['src "line1"'
          , 'offside_dedent']

      , ['src "const rx_close = "'
          , 'regexp /\\s*($|\\/?>|[{\'"]|[a-zA-Z0-9_:.\\-]+=)/'
          , 'offside_dedent']

      , ['src "line3"'
          , 'offside_dedent'] ); } ) );

    it('allow complex regexp with nested slashes', (() => {
      const offside_ast = scan_jsy_lines([
        'line1'
      , 'const rx_close = /(^[*!]|[/()[\\]{}"])/'
      , 'line3']);

      test_ast_tokens_content(offside_ast,
        ['src "line1"'
          , 'offside_dedent']

      , ['src "const rx_close = "'
          , 'regexp /(^[*!]|[/()[\\]{}"])/'
          , 'offside_dedent']

      , ['src "line3"'
          , 'offside_dedent'] ); } ) );

    it('a complex template string that fights like a regexp', (() => {
      const offside_ast = scan_jsy_lines([
        "return `//# ${'sourceMapping'}URL=data:application/json;charset=utf-8;base64,${b64}`}"]);

      test_ast_tokens_content(offside_ast,
        ['src "return "'
          , 'str_template "`//# ${"'
          , 'template_param ""'
          , 'str1 "\'sourceMapping\'"'
          , 'template_param_end "}"'
          , 'str_template "URL=data:application/json;charset=utf-8;base64,${"'
          , 'template_param ""'
          , 'src "b64"'
          , 'template_param_end "}"'
          , 'str_template "`"'
          , 'src "}"'
          , 'offside_dedent'] ); } ) ); } ) );

  const { assert: assert$3 } = require('chai');
  require('source-map');

  const _pp_normalize = js_src =>
    js_src.split('\n').map(ln => ln.trimRight());

  describe('JSY Scanner (preprocessor)', (() => {
    describe('scenarios', (() => {
      let ast_src;
      beforeEach (() => {
        ast_src = scan_jsy_lines([
          '#!/usr/bin/env jsy-node'
        , ''
        , '# TESTME'
        , '  if test() ::'
        , '    console.log @'
        , '      "hello JSY world with compile time processing!"'
        , 'if after() ::'
        , '  console.log @'
        , '    "hello JSY world!"'
        , '']); } );

      it('default', (() => {
        const js_src = jsy_transpile$1(ast_src);

        assert$3.deepEqual(_pp_normalize(js_src),[
          '#!/usr/bin/env jsy-node'
        , ''
        , '# TESTME'
        , '  if (test()) {'
        , '    console.log('
        , '      "hello JSY world with compile time processing!") }'
        , 'if (after()) {',
          '  console.log(',
          '    "hello JSY world!") }'
        , ''] ); } ) );

      it('include', (() => {
        const js_src = jsy_transpile$1(ast_src,{
          preprocessor: () => p => true} );

        assert$3.deepEqual(_pp_normalize(js_src),[
          '#!/usr/bin/env jsy-node'
        , ''
        , ''
        , '  if (test()) {'
        , '    console.log('
        , '      "hello JSY world with compile time processing!") }'
        , 'if (after()) {',
          '  console.log(',
          '    "hello JSY world!") }'
        , ''] ); } ) );

      it('replace', (() => {
        const js_src = jsy_transpile$1(ast_src,{
          preprocessor: () => p => '//'+p.content} );

        assert$3.deepEqual(_pp_normalize(js_src),[
          '#!/usr/bin/env jsy-node'
        , ''
        , '//# TESTME'
        , '  if (test()) {'
        , '    console.log('
        , '      "hello JSY world with compile time processing!") }'
        , 'if (after()) {',
          '  console.log(',
          '    "hello JSY world!") }'
        , ''] ); } ) );

      it('exclude', (() => {
        const js_src = jsy_transpile$1(ast_src,{
          preprocessor: () => p => false} );

        assert$3.deepEqual(_pp_normalize(js_src),[
          '#!/usr/bin/env jsy-node'
        , ''
        , ''
        , ''
        , ''
        , ''
        , 'if (after()) {',
          '  console.log(',
          '    "hello JSY world!") }'
        , ''] ); } ) ); } ) );


    describe('IF / ELIF', (() => {

      describe('one-level', (() => {

        let ast_src;
        beforeEach (() => {
          ast_src = scan_jsy_lines([
            '# IF PLAT_WEB'
          , '  body_web'
          , ''
          , '# ELIF PLAT_NODEJS'
          , '  body_nodejs'
          , ''
          , '# ELSE'
          , '  body_else']); } );

        it('PLAT_WEB', (() => {
          const js_src = jsy_transpile$1(ast_src,{
            defines:{PLAT_WEB: true} } );

          assert$3.deepEqual(_pp_normalize(js_src).filter(Boolean),[
            '  body_web'] ); } ) );

        it('PLAT_NODEJS', (() => {
          const js_src = jsy_transpile$1(ast_src,{
            defines:{PLAT_NODEJS: true} } );

          assert$3.deepEqual(_pp_normalize(js_src).filter(Boolean),[
            '  body_nodejs'] ); } ) );

        it('ELSE', (() => {
          const js_src = jsy_transpile$1(ast_src,{
            defines: {}} );

          assert$3.deepEqual(_pp_normalize(js_src).filter(Boolean),[
            '  body_else'] ); } ) ); } ) );


      describe('two-level', (() => {

        let ast_src;
        beforeEach (() => {
          ast_src = scan_jsy_lines([
            '# IF PLAT_WEB'
          , '  # IF OPT_A'
          , '    body_web_opt_a'
          , ''
          , '  # ELIF OPT_B'
          , '    body_web_opt_b'
          , ''
          , '  # ELSE'
          , '    body_web_else'
          , ''
          , '# ELIF PLAT_NODEJS'
          , '  # IF OPT_A'
          , '    body_nodejs_opt_a'
          , ''
          , '  # ELIF OPT_B'
          , '    body_nodejs_opt_b'
          , ''
          , '  # ELSE'
          , '    body_nodejs_else'
          , '']); } );

        it('PLAT_WEB OPT_A', (() => {
          const js_src = jsy_transpile$1(ast_src,{
            defines:{PLAT_WEB: true, OPT_A: true} } );

          assert$3.deepEqual(_pp_normalize(js_src).filter(Boolean),[
            '    body_web_opt_a'] ); } ) );

        it('PLAT_WEB OPT_B', (() => {
          const js_src = jsy_transpile$1(ast_src,{
            defines:{PLAT_WEB: true, OPT_B: true} } );

          assert$3.deepEqual(_pp_normalize(js_src).filter(Boolean),[
            '    body_web_opt_b'] ); } ) );

        it('PLAT_WEB ELSE', (() => {
          const js_src = jsy_transpile$1(ast_src,{
            defines:{PLAT_WEB: true} } );

          assert$3.deepEqual(_pp_normalize(js_src).filter(Boolean),[
            '    body_web_else'] ); } ) );

        it('PLAT_NODEJS OPT_A', (() => {
          const js_src = jsy_transpile$1(ast_src,{
            defines:{PLAT_NODEJS: true, OPT_A: true} } );

          assert$3.deepEqual(_pp_normalize(js_src).filter(Boolean),[
            '    body_nodejs_opt_a'] ); } ) );

        it('PLAT_NODEJS OPT_B', (() => {
          const js_src = jsy_transpile$1(ast_src,{
            defines:{PLAT_NODEJS: true, OPT_B: true} } );

          assert$3.deepEqual(_pp_normalize(js_src).filter(Boolean),[
            '    body_nodejs_opt_b'] ); } ) );

        it('PLAT_NODEJS ELSE', (() => {
          const js_src = jsy_transpile$1(ast_src,{
            defines:{PLAT_NODEJS: true} } );

          assert$3.deepEqual(_pp_normalize(js_src).filter(Boolean),[
            '    body_nodejs_else'] ); } ) );

        it('ELSE', (() => {
          const js_src = jsy_transpile$1(ast_src,{
            defines:{OPT_A: true, OPT_B: true} } );

          assert$3.deepEqual(_pp_normalize(js_src).filter(Boolean),[] ); } ) ); } ) );



      describe('eval shunting yard (using &&, ||, !)', (() =>
        _test_shunting_yard([
            'before'
          , '# IF OPT_A && OPT_B && OPT_C'
          , '    body_abc'
          , '# ELIF OPT_A && OPT_C || OPT_B && OPT_C'
          , '    body_ac_or_bc'
          , '# ELIF OPT_A || OPT_B && OPT_C'
          , '    body_a_or_bc'
          , '# ELIF OPT_A && OPT_B || OPT_C'
          , '    body_ab_or_c'
          , '# ELIF ! OPT_A && OPT_D'
          , '    body_not_a_and_d'
          , '# ELSE'
          , '    body_last'
          , 'after']) ) );

      describe('eval shunting yard (using AND, OR, NOT)', (() =>
        _test_shunting_yard([
            'before'
          , '# IF OPT_A AND OPT_B AND OPT_C'
          , '    body_abc'
          , '# ELIF OPT_A AND OPT_C OR OPT_B AND OPT_C'
          , '    body_ac_or_bc'
          , '# ELIF OPT_A OR OPT_B AND OPT_C'
          , '    body_a_or_bc'
          , '# ELIF OPT_A AND OPT_B OR OPT_C'
          , '    body_ab_or_c'
          , '# ELIF NOT OPT_A AND OPT_D'
          , '    body_not_a_and_d'
          , '# ELSE'
          , '    body_last'
          , 'after']) ) );

      function _test_shunting_yard(jsy_src_lines) {
        let ast_src;
        beforeEach (() => {
          ast_src = scan_jsy_lines(jsy_src_lines);} );

        it('A && B && C', (() => {
          const js_src = jsy_transpile$1(ast_src,{
            defines:{OPT_A: true, OPT_B: true, OPT_C: true} } );

          assert$3.deepEqual(_pp_normalize(js_src).filter(Boolean),[
            'before'
          , '    body_abc'
          , 'after'] ); } ) );

        it('A', (() => {
          const js_src = jsy_transpile$1(ast_src,{
            defines:{OPT_A: true} } );

          assert$3.deepEqual(_pp_normalize(js_src).filter(Boolean),[
            'before'
          , '    body_a_or_bc'
          , 'after'] ); } ) );

        it('B', (() => {
          const js_src = jsy_transpile$1(ast_src,{
            defines:{OPT_B: true} } );

          assert$3.deepEqual(_pp_normalize(js_src).filter(Boolean),[
            'before'
          , '    body_last'
          , 'after'] ); } ) );

        it('C', (() => {
          const js_src = jsy_transpile$1(ast_src,{
            defines:{OPT_C: true} } );

          assert$3.deepEqual(_pp_normalize(js_src).filter(Boolean),[
            'before'
          , '    body_ab_or_c'
          , 'after'] ); } ) );

        it('BC', (() => {
          const js_src = jsy_transpile$1(ast_src,{
            defines:{OPT_B: true, OPT_C: true} } );

          assert$3.deepEqual(_pp_normalize(js_src).filter(Boolean),[
            'before'
          , '    body_ac_or_bc'
          , 'after'] ); } ) );

        it('AB', (() => {
          const js_src = jsy_transpile$1(ast_src,{
            defines:{OPT_A: true, OPT_B: true} } );

          assert$3.deepEqual(_pp_normalize(js_src).filter(Boolean),[
            'before'
          , '    body_a_or_bc'
          , 'after'] ); } ) );

        it('AC', (() => {
          const js_src = jsy_transpile$1(ast_src,{
            defines:{OPT_A: true, OPT_C: true} } );

          assert$3.deepEqual(_pp_normalize(js_src).filter(Boolean),[
            'before'
          , '    body_ac_or_bc'
          , 'after'] ); } ) );

        it('D', (() => {
          const js_src = jsy_transpile$1(ast_src,{
            defines:{OPT_D: true} } );

          assert$3.deepEqual(_pp_normalize(js_src).filter(Boolean),[
            'before'
          , '    body_not_a_and_d'
          , 'after'] ); } ) ); } } ) ); } ) );

  const { assert: assert$2 } = require('chai');


  describe('JSY Scanner (template strings)', (() => {
    it('dedent multi-line strings', (() => {
      const jsy_src =[
        'test @ `'
      , '     Wouldn\'t it be nice to have your multi-line strings'
      , '   auto-shifted based on their indent?'
      , ''
      , '   After all, if you need greater control, you\'ll likely'
      , '     have to manually format the strings anyway… `'];

      const js_src = jsy_transpile$1(scan_jsy_lines(jsy_src));
      assert$2.deepEqual(js_src.split('\n'),[
        'test(`'
      , '  Wouldn\'t it be nice to have your multi-line strings'
      , 'auto-shifted based on their indent?'
      , ''
      , 'After all, if you need greater control, you\'ll likely'
      , '  have to manually format the strings anyway… `)'
      , ''] ); } ) );


    it('single template strings', (() => {
      const offside_ast = scan_jsy_lines([
        'const classes = `header ${ inner() } extra`']);

      test_ast_tokens_content(offside_ast,
        ['src "const classes = "'
          , 'str_template "`header ${"'
          , 'template_param ""'
          , 'src " inner() "'
          , 'template_param_end "}"'
          , 'str_template " extra`"'
          , 'offside_dedent'] ); } ) );

    it('single template strings with $ in string', (() => {
      const offside_ast = scan_jsy_lines(['`$${name}$`']);
      test_ast_tokens_content(offside_ast,
        ['str_template "`$${"'
          , 'template_param ""'
          , 'src "name"'
          , 'template_param_end "}"'
          , 'str_template "$`"'
          , 'offside_dedent'] ); } ) );

    it('single template strings with jsy_ops', (() => {
      const offside_ast = scan_jsy_lines([
        'const classes = `header ${ first @ second @# third, 42 } extra`']);

      test_ast_tokens_content(offside_ast,
        ['src "const classes = "'
          , 'str_template "`header ${"'
          , 'template_param ""'
          , 'src " first"'
          , 'jsy_op " @"'
          , 'src " second"'
          , 'jsy_op " @#"'
          , 'src " third, 42 "'
          , 'template_param_end "}"'
          , 'str_template " extra`"'
          , 'offside_dedent'] ); } ) );


    it('regexp literal vs template internal', (() => {
      const offside_ast = scan_jsy_lines([
        "`$${a.b / 100} / ${c.d}`"]);

      test_ast_tokens_content(offside_ast,
        ['str_template "`$${"'
          , 'template_param ""'
          , 'src "a.b / 100"'
          , 'template_param_end "}"'
          , 'str_template " / ${"'
          , 'template_param ""'
          , 'src "c.d"'
          , 'template_param_end "}"'
          , 'str_template "`"'
          , 'offside_dedent'] ); } ) );

    it('nested template strings', (() => {
      const offside_ast = scan_jsy_lines([
        "const classes = `header ${ isLargeScreen() ? '' :"
      , "  `icon-${item.isCollapsed ? 'expander' : 'collapser'}` } extra`"]);

      test_ast_tokens_content(offside_ast,
        ['src "const classes = "'
          , 'str_template "`header ${"'
          , 'template_param ""'
          , 'src " isLargeScreen() ? "'
          , 'str1 "\'\'"'
          , 'src " :"'
          , 'offside_dedent']

      , ['str_template "`icon-${"'
          , 'template_param ""'
          , 'src "item.isCollapsed ? "'
          , 'str1 "\'expander\'"'
          , 'src " : "'
          , 'str1 "\'collapser\'"'
          , 'template_param_end "}"'
          , 'str_template "`"'
          , 'src " "'
          , 'template_param_end "}"'
          , 'str_template " extra`"'
          , 'offside_dedent'] ); } ) );



    describe('Syntax Errors', (() => {
      it('crossing indent levels', (() => {
        jsy_scan_throws([
          'if cond_a ::'
        , '  if cond_b ::'
        , '    render @ `'
        , '      <outer>'
        , '       <first>'
        , '        <second>content</second>'
        , '     </first>'
        , '  </outer>`'
        , '']); } ) );

      it('mismatched closing in template param', (() => {
        jsy_scan_throws([
          'test @ `'
        , '  hello ${'
        , '    one({two:"three")}'
        , '  } there `']); } ) ); } ) ); } ) );

  const { assert: assert$1 } = require('chai');


  describe('JSY Scanner (with JSX expressions)', (() => {
    describe('JSX basic', (() => {
      it('basic body', (() => {
        const offside_ast = scan_jsy_lines([
          '<section>example</section>']);

        test_ast_tokens_content(offside_ast,
          ['jsx_tag "<section>"'
            , 'jsx_content "example"'
            , 'jsx_tag_close "</section>"'
            , 'offside_dedent'] ); } ) );


      it('basic body with attr only', (() => {
        const offside_ast = scan_jsy_lines([
          '<section hidden>example</section>']);

        test_ast_tokens_content(offside_ast,
          ['jsx_tag "<section "'
            , 'jsx_attr_name_only "hidden"'
            , 'jsx_tag_part ">"'
            , 'jsx_content "example"'
            , 'jsx_tag_close "</section>"'
            , 'offside_dedent'] ); } ) );


      it('basic body with attr', (() => {
        const offside_ast = scan_jsy_lines([
          '<section class="nice">example</section>']);

        test_ast_tokens_content(offside_ast,
          ['jsx_tag "<section "'
            , 'jsx_attr_name "class="'
            , 'jsx_attr_str2 "\\"nice\\""'
            , 'jsx_tag_part ">"'
            , 'jsx_content "example"'
            , 'jsx_tag_close "</section>"'
            , 'offside_dedent'] ); } ) );


      it('basic body with attr param', (() => {
        const offside_ast = scan_jsy_lines([
          '<section {param}>example</section>']);

        test_ast_tokens_content(offside_ast,
          ['jsx_tag "<section "'
            , 'jsx_param "{"'
            , 'src "param"'
            , 'jsx_param_end "}"'
            , 'jsx_tag_part ">"'
            , 'jsx_content "example"'
            , 'jsx_tag_close "</section>"'
            , 'offside_dedent'] ); } ) );


      it('basic body with jsy_op in param', (() => {
        const offside_ast = scan_jsy_lines([
          '<section {caller @ param}>example</section>']);

        test_ast_tokens_content(offside_ast,
          ['jsx_tag "<section "'
            , 'jsx_param "{"'
            , 'src "caller"'
            , 'jsy_op " @"'
            , 'src " param"'
            , 'jsx_param_end "}"'
            , 'jsx_tag_part ">"'
            , 'jsx_content "example"'
            , 'jsx_tag_close "</section>"'
            , 'offside_dedent'] ); } ) ); } ) );



    describe('JSX Fragment', (() => {
      it('basic body', (() => {
        const offside_ast = scan_jsy_lines([
          '<>example</>']);

        test_ast_tokens_content(offside_ast,
          ['jsx_frag "<>"'
            , 'jsx_content "example"'
            , 'jsx_frag_close "</>"'
            , 'offside_dedent'] ); } ) );


      it('basic body with attr', (() => {
        const offside_ast = scan_jsy_lines([
          '<><div /><span>example</span></>']);

        test_ast_tokens_content(offside_ast,
          ['jsx_frag "<>"'
            , 'jsx_tag "<div />"'
            , 'jsx_tag "<span>"'
            , 'jsx_content "example"'
            , 'jsx_tag_close "</span>"'
            , 'jsx_frag_close "</>"'
            , 'offside_dedent'] ); } ) ); } ) );




    describe('JSX self closing', (() => {
      it('self closing', (() => {
        const offside_ast = scan_jsy_lines([
          '<section />']);

        test_ast_tokens_content(offside_ast,
          ['jsx_tag "<section />"'
            , 'offside_dedent'] ); } ) );


      it('self closing with attr (1)', (() => {
        const offside_ast = scan_jsy_lines([
          '<section class=\'nice\' />']);

        test_ast_tokens_content(offside_ast,
          ['jsx_tag "<section "'
            , 'jsx_attr_name "class="'
            , "jsx_attr_str1 \"'nice' \""
            , 'jsx_tag_part "/>"'
            , 'offside_dedent'] ); } ) );

      it('self closing with two attrs (1)', (() => {
        const offside_ast = scan_jsy_lines([
          '<section class=\'nice\' style=\'color: "red"\' />']);

        test_ast_tokens_content(offside_ast,
          ['jsx_tag "<section "'
            , 'jsx_attr_name "class="'
            , 'jsx_attr_str1 "\'nice\' "'
            , 'jsx_attr_name "style="'
            , 'jsx_attr_str1 "\'color: \\"red\\"\' "'
            , 'jsx_tag_part "/>"'
            , 'offside_dedent'] ); } ) );



      it('self closing with attr (2)', (() => {
        const offside_ast = scan_jsy_lines([
          '<section class="nice" />']);

        test_ast_tokens_content(offside_ast,
          ['jsx_tag "<section "'
            , 'jsx_attr_name "class="'
            , 'jsx_attr_str2 "\\"nice\\" "'
            , 'jsx_tag_part "/>"'
            , 'offside_dedent'] ); } ) );

      it('self closing with two attrs (2)', (() => {
        const offside_ast = scan_jsy_lines([
          '<section class="nice" style="color: \'red\'" />']);

        test_ast_tokens_content(offside_ast,
          ['jsx_tag "<section "'
            , 'jsx_attr_name "class="'
            , 'jsx_attr_str2 "\\"nice\\" "'
            , 'jsx_attr_name "style="'
            , 'jsx_attr_str2 "\\"color: \'red\'\\" "'
            , 'jsx_tag_part "/>"'
            , 'offside_dedent'] ); } ) );

      it('self closing with param', (() => {
        const offside_ast = scan_jsy_lines([
          '<section {param} />']);

        test_ast_tokens_content(offside_ast,
          ['jsx_tag "<section "'
            , 'jsx_param "{"'
            , 'src "param"'
            , 'jsx_param_end "}"'
            , 'jsx_tag_part " />"'
            , 'offside_dedent'] ); } ) ); } ) );



    describe('JSX nested', (() => {
      it('body', (() => {
        const offside_ast = scan_jsy_lines([
          '<outer>'
        , '  <first>aaaa</first>'
        , '  <second>bbbb</second>'
        , '  <third />'
        , '</outer>']);

        test_ast_tokens_content(offside_ast,
          ['jsx_tag "<outer>"'
             , 'offside_dedent']

        , ['jsx_tag "<first>"'
            , 'jsx_content "aaaa"'
            , 'jsx_tag_close "</first>"'
            , 'offside_dedent']

        , ['jsx_tag "<second>"'
            , 'jsx_content "bbbb"'
            , 'jsx_tag_close "</second>"'
            , 'offside_dedent']

        , ['jsx_tag "<third />"'
             , 'offside_dedent']

        , ['jsx_tag_close "</outer>"'
            , 'offside_dedent'] ); } ) );


      it('body with mixed attrs', (() => {
        const offside_ast = scan_jsy_lines([
          '<outer>'
        , '  <first class="nice">aaaa</first>'
        , '  <second class=\'some\' {extra}/>'
        , '  <third class={param}>cccc</third>'
        , '</outer>']);

        test_ast_tokens_content(offside_ast,
          ['jsx_tag "<outer>"'
            , 'offside_dedent']

        , ['jsx_tag "<first "'
            , 'jsx_attr_name "class="'
            , 'jsx_attr_str2 "\\"nice\\""'
            , 'jsx_tag_part ">"'
            , 'jsx_content "aaaa"'
            , 'jsx_tag_close "</first>"'
            , 'offside_dedent']

        , ['jsx_tag "<second "'
            , 'jsx_attr_name "class="'
            , 'jsx_attr_str1 "\'some\' "'
            , 'jsx_param "{"'
            , 'src "extra"'
            , 'jsx_param_end "}"'
            , 'jsx_tag_part "/>"'
            , 'offside_dedent']

        , ['jsx_tag "<third "'
            , 'jsx_attr_name "class="'
            , 'jsx_param "{"'
            , 'src "param"'
            , 'jsx_param_end "}"'
            , 'jsx_tag_part ">"'
            , 'jsx_content "cccc"'
            , 'jsx_tag_close "</third>"'
            , 'offside_dedent']

        , ['jsx_tag_close "</outer>"'
            , 'offside_dedent'] ); } ) );


      it('fragment body with mixed attrs', (() => {
        const offside_ast = scan_jsy_lines([
          '<>'
        , '  <first class="nice">aaaa</first>'
        , '  <second class=\'some\' {extra}/>'
        , '  <third class={param}>cccc</third>'
        , '</>']);

        test_ast_tokens_content(offside_ast,
          ['jsx_frag "<>"'
            , 'offside_dedent']

        , ['jsx_tag "<first "'
            , 'jsx_attr_name "class="'
            , 'jsx_attr_str2 "\\"nice\\""'
            , 'jsx_tag_part ">"'
            , 'jsx_content "aaaa"'
            , 'jsx_tag_close "</first>"'
            , 'offside_dedent']

        , ['jsx_tag "<second "'
            , 'jsx_attr_name "class="'
            , 'jsx_attr_str1 "\'some\' "'
            , 'jsx_param "{"'
            , 'src "extra"'
            , 'jsx_param_end "}"'
            , 'jsx_tag_part "/>"'
            , 'offside_dedent']

        , ['jsx_tag "<third "'
            , 'jsx_attr_name "class="'
            , 'jsx_param "{"'
            , 'src "param"'
            , 'jsx_param_end "}"'
            , 'jsx_tag_part ">"'
            , 'jsx_content "cccc"'
            , 'jsx_tag_close "</third>"'
            , 'offside_dedent']

        , ['jsx_frag_close "</>"'
            , 'offside_dedent'] ); } ) ); } ) );



    describe('with content param', (() => {

      it('basic body with content param', (() => {
        const offside_ast = scan_jsy_lines([
          '<section>before{param}after</section>']);

        test_ast_tokens_content(offside_ast,
          ['jsx_tag "<section>"'
            , 'jsx_content "before"'
            , 'jsx_param "{"'
            , 'src "param"'
            , 'jsx_param_end "}"'
            , 'jsx_content "after"'
            , 'jsx_tag_close "</section>"'
            , 'offside_dedent'] ); } ) );


      it('basic body with jsy_op in content param', (() => {
        const offside_ast = scan_jsy_lines([
          '<section>before{caller @ param}after</section>']);

        test_ast_tokens_content(offside_ast,
          ['jsx_tag "<section>"'
            , 'jsx_content "before"'
            , 'jsx_param "{"'
            , 'src "caller"'
            , 'jsy_op " @"'
            , 'src " param"'
            , 'jsx_param_end "}"'
            , 'jsx_content "after"'
            , 'jsx_tag_close "</section>"'
            , 'offside_dedent'] ); } ) );

      it('nested body with content param', (() => {
        const offside_ast = scan_jsy_lines([
          '<outer>'
        , '  <first>'
        , '    <second>{param}</second>'
        , '  </first>'
        , '</outer>']);

        test_ast_tokens_content(offside_ast,
          ['jsx_tag "<outer>"'
            , 'offside_dedent']

        , ['jsx_tag "<first>"'
            , 'offside_dedent']

        , ['jsx_tag "<second>"'
            , 'jsx_param "{"'
            , 'src "param"'
            , 'jsx_param_end "}"'
            , 'jsx_tag_close "</second>"'
            , 'offside_dedent']

        , ['jsx_tag_close "</first>"'
            , 'offside_dedent']

        , ['jsx_tag_close "</outer>"'
            , 'offside_dedent'] ); } ) );


      it('nested body with jsy_op in content param', (() => {
        const offside_ast = scan_jsy_lines([
          '<outer>'
        , '  <first>'
        , '    <second>{caller @ param}</second>'
        , '  </first>'
        , '</outer>']);

        test_ast_tokens_content(offside_ast,
          ['jsx_tag "<outer>"'
            , 'offside_dedent']

        , ['jsx_tag "<first>"'
            , 'offside_dedent']

        , ['jsx_tag "<second>"'
            , 'jsx_param "{"'
            , 'src "caller"'
            , 'jsy_op " @"'
            , 'src " param"'
            , 'jsx_param_end "}"'
            , 'jsx_tag_close "</second>"'
            , 'offside_dedent']

        , ['jsx_tag_close "</first>"'
            , 'offside_dedent']

        , ['jsx_tag_close "</outer>"'
            , 'offside_dedent'] ); } ) ); } ) );



    describe('Syntax Errors', (() => {
      it('crossing indent levels', (() => {
        jsy_scan_throws([
          'if cond_a ::'
        , '  if cond_b ::'
        , '    render @'
        , '      <outer>'
        , '       <first>'
        , '        <second>content</second>'
        , '     </first>'
        , '  </outer>'
        , '']); } ) );

      it('mismatched outer closing tags', (() => {
        jsy_scan_throws([
          'render @'
        , '  <outer>'
        , '    <first>'
        , '      content'
        , '    </first>'
        , '  </wrong>']); } ) );

      it('mismatched inner closing tags', (() => {
        jsy_scan_throws([
          'render @'
        , '  <outer>'
        , '    <first>'
        , '      content'
        , '    </wrong>'
        , '  </outer>'
        , '']); } ) );

      it('mismatched inner closing tags within JSX fragment', (() => {
        jsy_scan_throws([
          'render @'
        , '  <>'
        , '    <first>'
        , '      content'
        , '    </wrong>'
        , '  </>'
        , '']); } ) );

      it('mismatched outer closing tags within JSX fragment', (() => {
        jsy_scan_throws([
          'render @'
        , '  <>'
        , '    <first>'
        , '      content'
        , '    </first>'
        , '  </wrong>'
        , '']); } ) ); } ) );


    describe('Within Code', (() => {
      it('basic self-closing', (() => {
        const offside_ast = scan_jsy_lines([
          'first @ <br />'
        , 'second @ <hr />']);

        test_ast_tokens_content(offside_ast,
          ['src "first"'
            , 'jsy_op " @"'
            , 'src " "'
            , 'jsx_tag "<br />"'
            , 'offside_dedent']

        , ['src "second"'
            , 'jsy_op " @"'
            , 'src " "'
            , 'jsx_tag "<hr />"'
            , 'offside_dedent'] ); } ) );

      it('basic open-close', (() => {
        const offside_ast = scan_jsy_lines([
          'first @ <h1>title</h1>'
        , 'second @ <h2>subtitle</h2>']);

        test_ast_tokens_content(offside_ast,
          ['src "first"'
            , 'jsy_op " @"'
            , 'src " "'
            , 'jsx_tag "<h1>"',
              'jsx_content "title"',
              'jsx_tag_close "</h1>"',
              'offside_dedent']

        , ['src "second"'
            , 'jsy_op " @"'
            , 'src " "'
            , 'jsx_tag "<h2>"',
              'jsx_content "subtitle"',
              'jsx_tag_close "</h2>"',
              'offside_dedent'] ); } ) );

      it('nested open-close', (() => {
        const offside_ast = scan_jsy_lines([
          'first @'
        , '  <h1>'
        , '    title'
        , '    <small>subtitle</small>'
        , '  </h1>'
        , ''
        , 'second @ arg'
        , 'third @ <p>content</p>']);

        test_ast_tokens_content(offside_ast,
          ['src "first"'
            , 'jsy_op " @"'
            , 'offside_dedent']

        , ['jsx_tag "<h1>"'
            , 'offside_dedent']

        , ['jsx_content "title"'
            , 'offside_dedent']

        , ['jsx_tag "<small>"'
            , 'jsx_content "subtitle"'
            , 'jsx_tag_close "</small>"'
            , 'offside_dedent']

        , ['jsx_tag_close "</h1>"'
            , 'offside_dedent']

        , ['src "second"'
            , 'jsy_op " @"'
            , 'src " arg"'
            , 'offside_dedent']

        , ['src "third"'
            , 'jsy_op " @"'
            , 'src " "'
            , 'jsx_tag "<p>"'
            , 'jsx_content "content"'
            , 'jsx_tag_close "</p>"'
            , 'offside_dedent'] ); } ) );

      it('multi open-close', (() => {
        const offside_ast = scan_jsy_lines([
          'first @'
        , '  <outer>'
        , '    <first class="nice">aaaa</first>'
        , '    <second class=\'some\' {extra} />'
        , '    <third class={param}>cccc</third>'
        , '  </outer>'
        , ''
        , 'second @ after']);

        test_ast_tokens_content(offside_ast,
          ['src "first"'
            , 'jsy_op " @"'
            , 'offside_dedent']

        , ['jsx_tag "<outer>"'
            , 'offside_dedent']

        , ['jsx_tag "<first "'
            , 'jsx_attr_name "class="'
            , 'jsx_attr_str2 "\\"nice\\""'
            , 'jsx_tag_part ">"'
            , 'jsx_content "aaaa"'
            , 'jsx_tag_close "</first>"'
            , 'offside_dedent']

        , ['jsx_tag "<second "'
            , 'jsx_attr_name "class="'
            , 'jsx_attr_str1 "\'some\' "'
            , 'jsx_param "{"'
            , 'src "extra"'
            , 'jsx_param_end "}"'
            , 'jsx_tag_part " />"'
            , 'offside_dedent']

        , ['jsx_tag "<third "'
            , 'jsx_attr_name "class="'
            , 'jsx_param "{"'
            , 'src "param"'
            , 'jsx_param_end "}"'
            , 'jsx_tag_part ">"'
            , 'jsx_content "cccc"'
            , 'jsx_tag_close "</third>"'
            , 'offside_dedent']

        , ['jsx_tag_close "</outer>"'
            , 'offside_dedent']

        , ['src "second"'
            , 'jsy_op " @"'
            , 'src " after"'
            , 'offside_dedent'] ); } ) );


      it(`Multiple nested JSX to JS to JSX to JS`, (() => {
        const offside_ast = scan_jsy_lines([
           'const ex = @'
         , '    <ul>{'
         , '      this.props.items.map @ item => @'
         , '        <li key={item.id}>{item.text}</li>'
         , '    }</ul>']);

        test_ast_tokens_content(offside_ast,
          ['src "const ex ="'
            , 'jsy_op " @"'
            , 'offside_dedent']

        , ['jsx_tag "<ul>"'
            , 'jsx_param "{"'
            , 'offside_dedent']

        , ['src "this.props.items.map"'
            , 'jsy_op " @"'
            , 'src " item =>"'
            , 'jsy_op " @"'
            , 'offside_dedent']

        , ['jsx_tag "<li "'
            , 'jsx_attr_name "key="'
            , 'jsx_param "{"'
            , 'src "item.id"'
            , 'jsx_param_end "}"'
            , 'jsx_tag_part ">"'
            , 'jsx_param "{"'
            , 'src "item.text"'
            , 'jsx_param_end "}"'
            , 'jsx_tag_close "</li>"'
            , 'offside_dedent']

        , ['jsx_param_end "}"'
            , 'jsx_tag_close "</ul>"'
            , 'offside_dedent'] );

        assert$1.deepEqual(
          jsy_transpile$1(offside_ast).split(/\n/),[
            'const ex =('
          , '    <ul>{'
          , '      this.props.items.map(item =>('
          , '        <li key={item.id}>{item.text}</li>) )'
          , '    }</ul>)'
          , ''] ); } ) ); } ) ); } ) );

  // This file was generated. Do not modify manually!
  var astralIdentifierCodes = [509, 0, 227, 0, 150, 4, 294, 9, 1368, 2, 2, 1, 6, 3, 41, 2, 5, 0, 166, 1, 574, 3, 9, 9, 370, 1, 81, 2, 71, 10, 50, 3, 123, 2, 54, 14, 32, 10, 3, 1, 11, 3, 46, 10, 8, 0, 46, 9, 7, 2, 37, 13, 2, 9, 6, 1, 45, 0, 13, 2, 49, 13, 9, 3, 2, 11, 83, 11, 7, 0, 3, 0, 158, 11, 6, 9, 7, 3, 56, 1, 2, 6, 3, 1, 3, 2, 10, 0, 11, 1, 3, 6, 4, 4, 193, 17, 10, 9, 5, 0, 82, 19, 13, 9, 214, 6, 3, 8, 28, 1, 83, 16, 16, 9, 82, 12, 9, 9, 84, 14, 5, 9, 243, 14, 166, 9, 71, 5, 2, 1, 3, 3, 2, 0, 2, 1, 13, 9, 120, 6, 3, 6, 4, 0, 29, 9, 41, 6, 2, 3, 9, 0, 10, 10, 47, 15, 406, 7, 2, 7, 17, 9, 57, 21, 2, 13, 123, 5, 4, 0, 2, 1, 2, 6, 2, 0, 9, 9, 49, 4, 2, 1, 2, 4, 9, 9, 330, 3, 10, 1, 2, 0, 49, 6, 4, 4, 14, 9, 5351, 0, 7, 14, 13835, 9, 87, 9, 39, 4, 60, 6, 26, 9, 1014, 0, 2, 54, 8, 3, 82, 0, 12, 1, 19628, 1, 4706, 45, 3, 22, 543, 4, 4, 5, 9, 7, 3, 6, 31, 3, 149, 2, 1418, 49, 513, 54, 5, 49, 9, 0, 15, 0, 23, 4, 2, 14, 1361, 6, 2, 16, 3, 6, 2, 1, 2, 4, 101, 0, 161, 6, 10, 9, 357, 0, 62, 13, 499, 13, 983, 6, 110, 6, 6, 9, 4759, 9, 787719, 239];

  // This file was generated. Do not modify manually!
  var astralIdentifierStartCodes = [0, 11, 2, 25, 2, 18, 2, 1, 2, 14, 3, 13, 35, 122, 70, 52, 268, 28, 4, 48, 48, 31, 14, 29, 6, 37, 11, 29, 3, 35, 5, 7, 2, 4, 43, 157, 19, 35, 5, 35, 5, 39, 9, 51, 13, 10, 2, 14, 2, 6, 2, 1, 2, 10, 2, 14, 2, 6, 2, 1, 68, 310, 10, 21, 11, 7, 25, 5, 2, 41, 2, 8, 70, 5, 3, 0, 2, 43, 2, 1, 4, 0, 3, 22, 11, 22, 10, 30, 66, 18, 2, 1, 11, 21, 11, 25, 71, 55, 7, 1, 65, 0, 16, 3, 2, 2, 2, 28, 43, 28, 4, 28, 36, 7, 2, 27, 28, 53, 11, 21, 11, 18, 14, 17, 111, 72, 56, 50, 14, 50, 14, 35, 349, 41, 7, 1, 79, 28, 11, 0, 9, 21, 43, 17, 47, 20, 28, 22, 13, 52, 58, 1, 3, 0, 14, 44, 33, 24, 27, 35, 30, 0, 3, 0, 9, 34, 4, 0, 13, 47, 15, 3, 22, 0, 2, 0, 36, 17, 2, 24, 20, 1, 64, 6, 2, 0, 2, 3, 2, 14, 2, 9, 8, 46, 39, 7, 3, 1, 3, 21, 2, 6, 2, 1, 2, 4, 4, 0, 19, 0, 13, 4, 159, 52, 19, 3, 21, 2, 31, 47, 21, 1, 2, 0, 185, 46, 42, 3, 37, 47, 21, 0, 60, 42, 14, 0, 72, 26, 38, 6, 186, 43, 117, 63, 32, 7, 3, 0, 3, 7, 2, 1, 2, 23, 16, 0, 2, 0, 95, 7, 3, 38, 17, 0, 2, 0, 29, 0, 11, 39, 8, 0, 22, 0, 12, 45, 20, 0, 19, 72, 264, 8, 2, 36, 18, 0, 50, 29, 113, 6, 2, 1, 2, 37, 22, 0, 26, 5, 2, 1, 2, 31, 15, 0, 328, 18, 16, 0, 2, 12, 2, 33, 125, 0, 80, 921, 103, 110, 18, 195, 2637, 96, 16, 1071, 18, 5, 4026, 582, 8634, 568, 8, 30, 18, 78, 18, 29, 19, 47, 17, 3, 32, 20, 6, 18, 689, 63, 129, 74, 6, 0, 67, 12, 65, 1, 2, 0, 29, 6135, 9, 1237, 43, 8, 8936, 3, 2, 6, 2, 1, 2, 290, 16, 0, 30, 2, 3, 0, 15, 3, 9, 395, 2309, 106, 6, 12, 4, 8, 8, 9, 5991, 84, 2, 70, 2, 1, 3, 0, 3, 1, 3, 3, 2, 11, 2, 0, 2, 6, 2, 64, 2, 3, 3, 7, 2, 6, 2, 27, 2, 3, 2, 4, 2, 0, 4, 6, 2, 339, 3, 24, 2, 24, 2, 30, 2, 24, 2, 30, 2, 24, 2, 30, 2, 24, 2, 30, 2, 24, 2, 7, 1845, 30, 7, 5, 262, 61, 147, 44, 11, 6, 17, 0, 322, 29, 19, 43, 485, 27, 757, 6, 2, 3, 2, 1, 2, 14, 2, 196, 60, 67, 8, 0, 1205, 3, 2, 26, 2, 1, 2, 0, 3, 0, 2, 9, 2, 3, 2, 0, 2, 0, 7, 0, 5, 0, 2, 0, 2, 0, 2, 2, 2, 1, 2, 0, 3, 0, 2, 0, 2, 0, 2, 0, 2, 0, 2, 1, 2, 0, 3, 3, 2, 6, 2, 3, 2, 3, 2, 0, 2, 9, 2, 16, 6, 2, 2, 4, 2, 16, 4421, 42719, 33, 4153, 7, 221, 3, 5761, 15, 7472, 3104, 541, 1507, 4938, 6, 4191];

  // This file was generated. Do not modify manually!
  var nonASCIIidentifierChars = "\u200c\u200d\xb7\u0300-\u036f\u0387\u0483-\u0487\u0591-\u05bd\u05bf\u05c1\u05c2\u05c4\u05c5\u05c7\u0610-\u061a\u064b-\u0669\u0670\u06d6-\u06dc\u06df-\u06e4\u06e7\u06e8\u06ea-\u06ed\u06f0-\u06f9\u0711\u0730-\u074a\u07a6-\u07b0\u07c0-\u07c9\u07eb-\u07f3\u07fd\u0816-\u0819\u081b-\u0823\u0825-\u0827\u0829-\u082d\u0859-\u085b\u0898-\u089f\u08ca-\u08e1\u08e3-\u0903\u093a-\u093c\u093e-\u094f\u0951-\u0957\u0962\u0963\u0966-\u096f\u0981-\u0983\u09bc\u09be-\u09c4\u09c7\u09c8\u09cb-\u09cd\u09d7\u09e2\u09e3\u09e6-\u09ef\u09fe\u0a01-\u0a03\u0a3c\u0a3e-\u0a42\u0a47\u0a48\u0a4b-\u0a4d\u0a51\u0a66-\u0a71\u0a75\u0a81-\u0a83\u0abc\u0abe-\u0ac5\u0ac7-\u0ac9\u0acb-\u0acd\u0ae2\u0ae3\u0ae6-\u0aef\u0afa-\u0aff\u0b01-\u0b03\u0b3c\u0b3e-\u0b44\u0b47\u0b48\u0b4b-\u0b4d\u0b55-\u0b57\u0b62\u0b63\u0b66-\u0b6f\u0b82\u0bbe-\u0bc2\u0bc6-\u0bc8\u0bca-\u0bcd\u0bd7\u0be6-\u0bef\u0c00-\u0c04\u0c3c\u0c3e-\u0c44\u0c46-\u0c48\u0c4a-\u0c4d\u0c55\u0c56\u0c62\u0c63\u0c66-\u0c6f\u0c81-\u0c83\u0cbc\u0cbe-\u0cc4\u0cc6-\u0cc8\u0cca-\u0ccd\u0cd5\u0cd6\u0ce2\u0ce3\u0ce6-\u0cef\u0cf3\u0d00-\u0d03\u0d3b\u0d3c\u0d3e-\u0d44\u0d46-\u0d48\u0d4a-\u0d4d\u0d57\u0d62\u0d63\u0d66-\u0d6f\u0d81-\u0d83\u0dca\u0dcf-\u0dd4\u0dd6\u0dd8-\u0ddf\u0de6-\u0def\u0df2\u0df3\u0e31\u0e34-\u0e3a\u0e47-\u0e4e\u0e50-\u0e59\u0eb1\u0eb4-\u0ebc\u0ec8-\u0ece\u0ed0-\u0ed9\u0f18\u0f19\u0f20-\u0f29\u0f35\u0f37\u0f39\u0f3e\u0f3f\u0f71-\u0f84\u0f86\u0f87\u0f8d-\u0f97\u0f99-\u0fbc\u0fc6\u102b-\u103e\u1040-\u1049\u1056-\u1059\u105e-\u1060\u1062-\u1064\u1067-\u106d\u1071-\u1074\u1082-\u108d\u108f-\u109d\u135d-\u135f\u1369-\u1371\u1712-\u1715\u1732-\u1734\u1752\u1753\u1772\u1773\u17b4-\u17d3\u17dd\u17e0-\u17e9\u180b-\u180d\u180f-\u1819\u18a9\u1920-\u192b\u1930-\u193b\u1946-\u194f\u19d0-\u19da\u1a17-\u1a1b\u1a55-\u1a5e\u1a60-\u1a7c\u1a7f-\u1a89\u1a90-\u1a99\u1ab0-\u1abd\u1abf-\u1ace\u1b00-\u1b04\u1b34-\u1b44\u1b50-\u1b59\u1b6b-\u1b73\u1b80-\u1b82\u1ba1-\u1bad\u1bb0-\u1bb9\u1be6-\u1bf3\u1c24-\u1c37\u1c40-\u1c49\u1c50-\u1c59\u1cd0-\u1cd2\u1cd4-\u1ce8\u1ced\u1cf4\u1cf7-\u1cf9\u1dc0-\u1dff\u203f\u2040\u2054\u20d0-\u20dc\u20e1\u20e5-\u20f0\u2cef-\u2cf1\u2d7f\u2de0-\u2dff\u302a-\u302f\u3099\u309a\ua620-\ua629\ua66f\ua674-\ua67d\ua69e\ua69f\ua6f0\ua6f1\ua802\ua806\ua80b\ua823-\ua827\ua82c\ua880\ua881\ua8b4-\ua8c5\ua8d0-\ua8d9\ua8e0-\ua8f1\ua8ff-\ua909\ua926-\ua92d\ua947-\ua953\ua980-\ua983\ua9b3-\ua9c0\ua9d0-\ua9d9\ua9e5\ua9f0-\ua9f9\uaa29-\uaa36\uaa43\uaa4c\uaa4d\uaa50-\uaa59\uaa7b-\uaa7d\uaab0\uaab2-\uaab4\uaab7\uaab8\uaabe\uaabf\uaac1\uaaeb-\uaaef\uaaf5\uaaf6\uabe3-\uabea\uabec\uabed\uabf0-\uabf9\ufb1e\ufe00-\ufe0f\ufe20-\ufe2f\ufe33\ufe34\ufe4d-\ufe4f\uff10-\uff19\uff3f";

  // This file was generated. Do not modify manually!
  var nonASCIIidentifierStartChars = "\xaa\xb5\xba\xc0-\xd6\xd8-\xf6\xf8-\u02c1\u02c6-\u02d1\u02e0-\u02e4\u02ec\u02ee\u0370-\u0374\u0376\u0377\u037a-\u037d\u037f\u0386\u0388-\u038a\u038c\u038e-\u03a1\u03a3-\u03f5\u03f7-\u0481\u048a-\u052f\u0531-\u0556\u0559\u0560-\u0588\u05d0-\u05ea\u05ef-\u05f2\u0620-\u064a\u066e\u066f\u0671-\u06d3\u06d5\u06e5\u06e6\u06ee\u06ef\u06fa-\u06fc\u06ff\u0710\u0712-\u072f\u074d-\u07a5\u07b1\u07ca-\u07ea\u07f4\u07f5\u07fa\u0800-\u0815\u081a\u0824\u0828\u0840-\u0858\u0860-\u086a\u0870-\u0887\u0889-\u088e\u08a0-\u08c9\u0904-\u0939\u093d\u0950\u0958-\u0961\u0971-\u0980\u0985-\u098c\u098f\u0990\u0993-\u09a8\u09aa-\u09b0\u09b2\u09b6-\u09b9\u09bd\u09ce\u09dc\u09dd\u09df-\u09e1\u09f0\u09f1\u09fc\u0a05-\u0a0a\u0a0f\u0a10\u0a13-\u0a28\u0a2a-\u0a30\u0a32\u0a33\u0a35\u0a36\u0a38\u0a39\u0a59-\u0a5c\u0a5e\u0a72-\u0a74\u0a85-\u0a8d\u0a8f-\u0a91\u0a93-\u0aa8\u0aaa-\u0ab0\u0ab2\u0ab3\u0ab5-\u0ab9\u0abd\u0ad0\u0ae0\u0ae1\u0af9\u0b05-\u0b0c\u0b0f\u0b10\u0b13-\u0b28\u0b2a-\u0b30\u0b32\u0b33\u0b35-\u0b39\u0b3d\u0b5c\u0b5d\u0b5f-\u0b61\u0b71\u0b83\u0b85-\u0b8a\u0b8e-\u0b90\u0b92-\u0b95\u0b99\u0b9a\u0b9c\u0b9e\u0b9f\u0ba3\u0ba4\u0ba8-\u0baa\u0bae-\u0bb9\u0bd0\u0c05-\u0c0c\u0c0e-\u0c10\u0c12-\u0c28\u0c2a-\u0c39\u0c3d\u0c58-\u0c5a\u0c5d\u0c60\u0c61\u0c80\u0c85-\u0c8c\u0c8e-\u0c90\u0c92-\u0ca8\u0caa-\u0cb3\u0cb5-\u0cb9\u0cbd\u0cdd\u0cde\u0ce0\u0ce1\u0cf1\u0cf2\u0d04-\u0d0c\u0d0e-\u0d10\u0d12-\u0d3a\u0d3d\u0d4e\u0d54-\u0d56\u0d5f-\u0d61\u0d7a-\u0d7f\u0d85-\u0d96\u0d9a-\u0db1\u0db3-\u0dbb\u0dbd\u0dc0-\u0dc6\u0e01-\u0e30\u0e32\u0e33\u0e40-\u0e46\u0e81\u0e82\u0e84\u0e86-\u0e8a\u0e8c-\u0ea3\u0ea5\u0ea7-\u0eb0\u0eb2\u0eb3\u0ebd\u0ec0-\u0ec4\u0ec6\u0edc-\u0edf\u0f00\u0f40-\u0f47\u0f49-\u0f6c\u0f88-\u0f8c\u1000-\u102a\u103f\u1050-\u1055\u105a-\u105d\u1061\u1065\u1066\u106e-\u1070\u1075-\u1081\u108e\u10a0-\u10c5\u10c7\u10cd\u10d0-\u10fa\u10fc-\u1248\u124a-\u124d\u1250-\u1256\u1258\u125a-\u125d\u1260-\u1288\u128a-\u128d\u1290-\u12b0\u12b2-\u12b5\u12b8-\u12be\u12c0\u12c2-\u12c5\u12c8-\u12d6\u12d8-\u1310\u1312-\u1315\u1318-\u135a\u1380-\u138f\u13a0-\u13f5\u13f8-\u13fd\u1401-\u166c\u166f-\u167f\u1681-\u169a\u16a0-\u16ea\u16ee-\u16f8\u1700-\u1711\u171f-\u1731\u1740-\u1751\u1760-\u176c\u176e-\u1770\u1780-\u17b3\u17d7\u17dc\u1820-\u1878\u1880-\u18a8\u18aa\u18b0-\u18f5\u1900-\u191e\u1950-\u196d\u1970-\u1974\u1980-\u19ab\u19b0-\u19c9\u1a00-\u1a16\u1a20-\u1a54\u1aa7\u1b05-\u1b33\u1b45-\u1b4c\u1b83-\u1ba0\u1bae\u1baf\u1bba-\u1be5\u1c00-\u1c23\u1c4d-\u1c4f\u1c5a-\u1c7d\u1c80-\u1c88\u1c90-\u1cba\u1cbd-\u1cbf\u1ce9-\u1cec\u1cee-\u1cf3\u1cf5\u1cf6\u1cfa\u1d00-\u1dbf\u1e00-\u1f15\u1f18-\u1f1d\u1f20-\u1f45\u1f48-\u1f4d\u1f50-\u1f57\u1f59\u1f5b\u1f5d\u1f5f-\u1f7d\u1f80-\u1fb4\u1fb6-\u1fbc\u1fbe\u1fc2-\u1fc4\u1fc6-\u1fcc\u1fd0-\u1fd3\u1fd6-\u1fdb\u1fe0-\u1fec\u1ff2-\u1ff4\u1ff6-\u1ffc\u2071\u207f\u2090-\u209c\u2102\u2107\u210a-\u2113\u2115\u2118-\u211d\u2124\u2126\u2128\u212a-\u2139\u213c-\u213f\u2145-\u2149\u214e\u2160-\u2188\u2c00-\u2ce4\u2ceb-\u2cee\u2cf2\u2cf3\u2d00-\u2d25\u2d27\u2d2d\u2d30-\u2d67\u2d6f\u2d80-\u2d96\u2da0-\u2da6\u2da8-\u2dae\u2db0-\u2db6\u2db8-\u2dbe\u2dc0-\u2dc6\u2dc8-\u2dce\u2dd0-\u2dd6\u2dd8-\u2dde\u3005-\u3007\u3021-\u3029\u3031-\u3035\u3038-\u303c\u3041-\u3096\u309b-\u309f\u30a1-\u30fa\u30fc-\u30ff\u3105-\u312f\u3131-\u318e\u31a0-\u31bf\u31f0-\u31ff\u3400-\u4dbf\u4e00-\ua48c\ua4d0-\ua4fd\ua500-\ua60c\ua610-\ua61f\ua62a\ua62b\ua640-\ua66e\ua67f-\ua69d\ua6a0-\ua6ef\ua717-\ua71f\ua722-\ua788\ua78b-\ua7ca\ua7d0\ua7d1\ua7d3\ua7d5-\ua7d9\ua7f2-\ua801\ua803-\ua805\ua807-\ua80a\ua80c-\ua822\ua840-\ua873\ua882-\ua8b3\ua8f2-\ua8f7\ua8fb\ua8fd\ua8fe\ua90a-\ua925\ua930-\ua946\ua960-\ua97c\ua984-\ua9b2\ua9cf\ua9e0-\ua9e4\ua9e6-\ua9ef\ua9fa-\ua9fe\uaa00-\uaa28\uaa40-\uaa42\uaa44-\uaa4b\uaa60-\uaa76\uaa7a\uaa7e-\uaaaf\uaab1\uaab5\uaab6\uaab9-\uaabd\uaac0\uaac2\uaadb-\uaadd\uaae0-\uaaea\uaaf2-\uaaf4\uab01-\uab06\uab09-\uab0e\uab11-\uab16\uab20-\uab26\uab28-\uab2e\uab30-\uab5a\uab5c-\uab69\uab70-\uabe2\uac00-\ud7a3\ud7b0-\ud7c6\ud7cb-\ud7fb\uf900-\ufa6d\ufa70-\ufad9\ufb00-\ufb06\ufb13-\ufb17\ufb1d\ufb1f-\ufb28\ufb2a-\ufb36\ufb38-\ufb3c\ufb3e\ufb40\ufb41\ufb43\ufb44\ufb46-\ufbb1\ufbd3-\ufd3d\ufd50-\ufd8f\ufd92-\ufdc7\ufdf0-\ufdfb\ufe70-\ufe74\ufe76-\ufefc\uff21-\uff3a\uff41-\uff5a\uff66-\uffbe\uffc2-\uffc7\uffca-\uffcf\uffd2-\uffd7\uffda-\uffdc";

  // These are a run-length and offset encoded representation of the

  // Reserved word lists for various dialects of the language

  var reservedWords = {
    3: "abstract boolean byte char class double enum export extends final float goto implements import int interface long native package private protected public short static super synchronized throws transient volatile",
    5: "class enum extends super const export import",
    6: "enum",
    strict: "implements interface let package private protected public static yield",
    strictBind: "eval arguments"
  };

  // And the keywords

  var ecma5AndLessKeywords = "break case catch continue debugger default do else finally for function if return switch throw try var while with null true false instanceof typeof void delete new in this";

  var keywords$1 = {
    5: ecma5AndLessKeywords,
    "5module": ecma5AndLessKeywords + " export import",
    6: ecma5AndLessKeywords + " const class extends export import super"
  };

  var keywordRelationalOperator = /^in(stanceof)?$/;

  // ## Character categories

  var nonASCIIidentifierStart = new RegExp("[" + nonASCIIidentifierStartChars + "]");
  var nonASCIIidentifier = new RegExp("[" + nonASCIIidentifierStartChars + nonASCIIidentifierChars + "]");

  // This has a complexity linear to the value of the code. The
  // assumption is that looking up astral identifier characters is
  // rare.
  function isInAstralSet(code, set) {
    var pos = 0x10000;
    for (var i = 0; i < set.length; i += 2) {
      pos += set[i];
      if (pos > code) { return false }
      pos += set[i + 1];
      if (pos >= code) { return true }
    }
    return false
  }

  // Test whether a given character code starts an identifier.

  function isIdentifierStart(code, astral) {
    if (code < 65) { return code === 36 }
    if (code < 91) { return true }
    if (code < 97) { return code === 95 }
    if (code < 123) { return true }
    if (code <= 0xffff) { return code >= 0xaa && nonASCIIidentifierStart.test(String.fromCharCode(code)) }
    if (astral === false) { return false }
    return isInAstralSet(code, astralIdentifierStartCodes)
  }

  // Test whether a given character is part of an identifier.

  function isIdentifierChar(code, astral) {
    if (code < 48) { return code === 36 }
    if (code < 58) { return true }
    if (code < 65) { return false }
    if (code < 91) { return true }
    if (code < 97) { return code === 95 }
    if (code < 123) { return true }
    if (code <= 0xffff) { return code >= 0xaa && nonASCIIidentifier.test(String.fromCharCode(code)) }
    if (astral === false) { return false }
    return isInAstralSet(code, astralIdentifierStartCodes) || isInAstralSet(code, astralIdentifierCodes)
  }

  // ## Token types

  // The assignment of fine-grained, information-carrying type objects
  // allows the tokenizer to store the information it has about a
  // token in a way that is very cheap for the parser to look up.

  // All token type variables start with an underscore, to make them
  // easy to recognize.

  // The `beforeExpr` property is used to disambiguate between regular
  // expressions and divisions. It is set on all token types that can
  // be followed by an expression (thus, a slash after them would be a
  // regular expression).
  //
  // The `startsExpr` property is used to check if the token ends a
  // `yield` expression. It is set on all token types that either can
  // directly start an expression (like a quotation mark) or can
  // continue an expression (like the body of a string).
  //
  // `isLoop` marks a keyword as starting a loop, which is important
  // to know when parsing a label, in order to allow or disallow
  // continue jumps to that label.

  var TokenType = function TokenType(label, conf) {
    if ( conf === void 0 ) conf = {};

    this.label = label;
    this.keyword = conf.keyword;
    this.beforeExpr = !!conf.beforeExpr;
    this.startsExpr = !!conf.startsExpr;
    this.isLoop = !!conf.isLoop;
    this.isAssign = !!conf.isAssign;
    this.prefix = !!conf.prefix;
    this.postfix = !!conf.postfix;
    this.binop = conf.binop || null;
    this.updateContext = null;
  };

  function binop(name, prec) {
    return new TokenType(name, {beforeExpr: true, binop: prec})
  }
  var beforeExpr = {beforeExpr: true}, startsExpr = {startsExpr: true};

  // Map keyword names to token types.

  var keywords = {};

  // Succinct definitions of keyword token types
  function kw(name, options) {
    if ( options === void 0 ) options = {};

    options.keyword = name;
    return keywords[name] = new TokenType(name, options)
  }

  var types$1 = {
    num: new TokenType("num", startsExpr),
    regexp: new TokenType("regexp", startsExpr),
    string: new TokenType("string", startsExpr),
    name: new TokenType("name", startsExpr),
    privateId: new TokenType("privateId", startsExpr),
    eof: new TokenType("eof"),

    // Punctuation token types.
    bracketL: new TokenType("[", {beforeExpr: true, startsExpr: true}),
    bracketR: new TokenType("]"),
    braceL: new TokenType("{", {beforeExpr: true, startsExpr: true}),
    braceR: new TokenType("}"),
    parenL: new TokenType("(", {beforeExpr: true, startsExpr: true}),
    parenR: new TokenType(")"),
    comma: new TokenType(",", beforeExpr),
    semi: new TokenType(";", beforeExpr),
    colon: new TokenType(":", beforeExpr),
    dot: new TokenType("."),
    question: new TokenType("?", beforeExpr),
    questionDot: new TokenType("?."),
    arrow: new TokenType("=>", beforeExpr),
    template: new TokenType("template"),
    invalidTemplate: new TokenType("invalidTemplate"),
    ellipsis: new TokenType("...", beforeExpr),
    backQuote: new TokenType("`", startsExpr),
    dollarBraceL: new TokenType("${", {beforeExpr: true, startsExpr: true}),

    // Operators. These carry several kinds of properties to help the
    // parser use them properly (the presence of these properties is
    // what categorizes them as operators).
    //
    // `binop`, when present, specifies that this operator is a binary
    // operator, and will refer to its precedence.
    //
    // `prefix` and `postfix` mark the operator as a prefix or postfix
    // unary operator.
    //
    // `isAssign` marks all of `=`, `+=`, `-=` etcetera, which act as
    // binary operators with a very low precedence, that should result
    // in AssignmentExpression nodes.

    eq: new TokenType("=", {beforeExpr: true, isAssign: true}),
    assign: new TokenType("_=", {beforeExpr: true, isAssign: true}),
    incDec: new TokenType("++/--", {prefix: true, postfix: true, startsExpr: true}),
    prefix: new TokenType("!/~", {beforeExpr: true, prefix: true, startsExpr: true}),
    logicalOR: binop("||", 1),
    logicalAND: binop("&&", 2),
    bitwiseOR: binop("|", 3),
    bitwiseXOR: binop("^", 4),
    bitwiseAND: binop("&", 5),
    equality: binop("==/!=/===/!==", 6),
    relational: binop("</>/<=/>=", 7),
    bitShift: binop("<</>>/>>>", 8),
    plusMin: new TokenType("+/-", {beforeExpr: true, binop: 9, prefix: true, startsExpr: true}),
    modulo: binop("%", 10),
    star: binop("*", 10),
    slash: binop("/", 10),
    starstar: new TokenType("**", {beforeExpr: true}),
    coalesce: binop("??", 1),

    // Keyword token types.
    _break: kw("break"),
    _case: kw("case", beforeExpr),
    _catch: kw("catch"),
    _continue: kw("continue"),
    _debugger: kw("debugger"),
    _default: kw("default", beforeExpr),
    _do: kw("do", {isLoop: true, beforeExpr: true}),
    _else: kw("else", beforeExpr),
    _finally: kw("finally"),
    _for: kw("for", {isLoop: true}),
    _function: kw("function", startsExpr),
    _if: kw("if"),
    _return: kw("return", beforeExpr),
    _switch: kw("switch"),
    _throw: kw("throw", beforeExpr),
    _try: kw("try"),
    _var: kw("var"),
    _const: kw("const"),
    _while: kw("while", {isLoop: true}),
    _with: kw("with"),
    _new: kw("new", {beforeExpr: true, startsExpr: true}),
    _this: kw("this", startsExpr),
    _super: kw("super", startsExpr),
    _class: kw("class", startsExpr),
    _extends: kw("extends", beforeExpr),
    _export: kw("export"),
    _import: kw("import", startsExpr),
    _null: kw("null", startsExpr),
    _true: kw("true", startsExpr),
    _false: kw("false", startsExpr),
    _in: kw("in", {beforeExpr: true, binop: 7}),
    _instanceof: kw("instanceof", {beforeExpr: true, binop: 7}),
    _typeof: kw("typeof", {beforeExpr: true, prefix: true, startsExpr: true}),
    _void: kw("void", {beforeExpr: true, prefix: true, startsExpr: true}),
    _delete: kw("delete", {beforeExpr: true, prefix: true, startsExpr: true})
  };

  // Matches a whole line break (where CRLF is considered a single
  // line break). Used to count lines.

  var lineBreak = /\r\n?|\n|\u2028|\u2029/;
  var lineBreakG = new RegExp(lineBreak.source, "g");

  function isNewLine(code) {
    return code === 10 || code === 13 || code === 0x2028 || code === 0x2029
  }

  function nextLineBreak(code, from, end) {
    if ( end === void 0 ) end = code.length;

    for (var i = from; i < end; i++) {
      var next = code.charCodeAt(i);
      if (isNewLine(next))
        { return i < end - 1 && next === 13 && code.charCodeAt(i + 1) === 10 ? i + 2 : i + 1 }
    }
    return -1
  }

  var nonASCIIwhitespace = /[\u1680\u2000-\u200a\u202f\u205f\u3000\ufeff]/;

  var skipWhiteSpace = /(?:\s|\/\/.*|\/\*[^]*?\*\/)*/g;

  var ref = Object.prototype;
  var hasOwnProperty = ref.hasOwnProperty;
  var toString = ref.toString;

  var hasOwn = Object.hasOwn || (function (obj, propName) { return (
    hasOwnProperty.call(obj, propName)
  ); });

  var isArray = Array.isArray || (function (obj) { return (
    toString.call(obj) === "[object Array]"
  ); });

  function wordsRegexp(words) {
    return new RegExp("^(?:" + words.replace(/ /g, "|") + ")$")
  }

  function codePointToString(code) {
    // UTF-16 Decoding
    if (code <= 0xFFFF) { return String.fromCharCode(code) }
    code -= 0x10000;
    return String.fromCharCode((code >> 10) + 0xD800, (code & 1023) + 0xDC00)
  }

  var loneSurrogate = /(?:[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF])/;

  // These are used when `options.locations` is on, for the
  // `startLoc` and `endLoc` properties.

  var Position = function Position(line, col) {
    this.line = line;
    this.column = col;
  };

  Position.prototype.offset = function offset (n) {
    return new Position(this.line, this.column + n)
  };

  var SourceLocation$1 = function SourceLocation(p, start, end) {
    this.start = start;
    this.end = end;
    if (p.sourceFile !== null) { this.source = p.sourceFile; }
  };

  // The `getLineInfo` function is mostly useful when the
  // `locations` option is off (for performance reasons) and you
  // want to find the line/column position for a given character
  // offset. `input` should be the code string that the offset refers
  // into.

  function getLineInfo(input, offset) {
    for (var line = 1, cur = 0;;) {
      var nextBreak = nextLineBreak(input, cur, offset);
      if (nextBreak < 0) { return new Position(line, offset - cur) }
      ++line;
      cur = nextBreak;
    }
  }

  // A second argument must be given to configure the parser process.
  // These options are recognized (only `ecmaVersion` is required):

  var defaultOptions = {
    // `ecmaVersion` indicates the ECMAScript version to parse. Must be
    // either 3, 5, 6 (or 2015), 7 (2016), 8 (2017), 9 (2018), 10
    // (2019), 11 (2020), 12 (2021), 13 (2022), 14 (2023), or `"latest"`
    // (the latest version the library supports). This influences
    // support for strict mode, the set of reserved words, and support
    // for new syntax features.
    ecmaVersion: null,
    // `sourceType` indicates the mode the code should be parsed in.
    // Can be either `"script"` or `"module"`. This influences global
    // strict mode and parsing of `import` and `export` declarations.
    sourceType: "script",
    // `onInsertedSemicolon` can be a callback that will be called
    // when a semicolon is automatically inserted. It will be passed
    // the position of the comma as an offset, and if `locations` is
    // enabled, it is given the location as a `{line, column}` object
    // as second argument.
    onInsertedSemicolon: null,
    // `onTrailingComma` is similar to `onInsertedSemicolon`, but for
    // trailing commas.
    onTrailingComma: null,
    // By default, reserved words are only enforced if ecmaVersion >= 5.
    // Set `allowReserved` to a boolean value to explicitly turn this on
    // an off. When this option has the value "never", reserved words
    // and keywords can also not be used as property names.
    allowReserved: null,
    // When enabled, a return at the top level is not considered an
    // error.
    allowReturnOutsideFunction: false,
    // When enabled, import/export statements are not constrained to
    // appearing at the top of the program, and an import.meta expression
    // in a script isn't considered an error.
    allowImportExportEverywhere: false,
    // By default, await identifiers are allowed to appear at the top-level scope only if ecmaVersion >= 2022.
    // When enabled, await identifiers are allowed to appear at the top-level scope,
    // but they are still not allowed in non-async functions.
    allowAwaitOutsideFunction: null,
    // When enabled, super identifiers are not constrained to
    // appearing in methods and do not raise an error when they appear elsewhere.
    allowSuperOutsideMethod: null,
    // When enabled, hashbang directive in the beginning of file is
    // allowed and treated as a line comment. Enabled by default when
    // `ecmaVersion` >= 2023.
    allowHashBang: false,
    // When `locations` is on, `loc` properties holding objects with
    // `start` and `end` properties in `{line, column}` form (with
    // line being 1-based and column 0-based) will be attached to the
    // nodes.
    locations: false,
    // A function can be passed as `onToken` option, which will
    // cause Acorn to call that function with object in the same
    // format as tokens returned from `tokenizer().getToken()`. Note
    // that you are not allowed to call the parser from the
    // callback—that will corrupt its internal state.
    onToken: null,
    // A function can be passed as `onComment` option, which will
    // cause Acorn to call that function with `(block, text, start,
    // end)` parameters whenever a comment is skipped. `block` is a
    // boolean indicating whether this is a block (`/* */`) comment,
    // `text` is the content of the comment, and `start` and `end` are
    // character offsets that denote the start and end of the comment.
    // When the `locations` option is on, two more parameters are
    // passed, the full `{line, column}` locations of the start and
    // end of the comments. Note that you are not allowed to call the
    // parser from the callback—that will corrupt its internal state.
    onComment: null,
    // Nodes have their start and end characters offsets recorded in
    // `start` and `end` properties (directly on the node, rather than
    // the `loc` object, which holds line/column data. To also add a
    // [semi-standardized][range] `range` property holding a `[start,
    // end]` array with the same numbers, set the `ranges` option to
    // `true`.
    //
    // [range]: https://bugzilla.mozilla.org/show_bug.cgi?id=745678
    ranges: false,
    // It is possible to parse multiple files into a single AST by
    // passing the tree produced by parsing the first file as
    // `program` option in subsequent parses. This will add the
    // toplevel forms of the parsed file to the `Program` (top) node
    // of an existing parse tree.
    program: null,
    // When `locations` is on, you can pass this to record the source
    // file in every node's `loc` object.
    sourceFile: null,
    // This value, if given, is stored in every node, whether
    // `locations` is on or off.
    directSourceFile: null,
    // When enabled, parenthesized expressions are represented by
    // (non-standard) ParenthesizedExpression nodes
    preserveParens: false
  };

  // Interpret and default an options object

  var warnedAboutEcmaVersion = false;

  function getOptions(opts) {
    var options = {};

    for (var opt in defaultOptions)
      { options[opt] = opts && hasOwn(opts, opt) ? opts[opt] : defaultOptions[opt]; }

    if (options.ecmaVersion === "latest") {
      options.ecmaVersion = 1e8;
    } else if (options.ecmaVersion == null) {
      if (!warnedAboutEcmaVersion && typeof console === "object" && console.warn) {
        warnedAboutEcmaVersion = true;
        console.warn("Since Acorn 8.0.0, options.ecmaVersion is required.\nDefaulting to 2020, but this will stop working in the future.");
      }
      options.ecmaVersion = 11;
    } else if (options.ecmaVersion >= 2015) {
      options.ecmaVersion -= 2009;
    }

    if (options.allowReserved == null)
      { options.allowReserved = options.ecmaVersion < 5; }

    if (!opts || opts.allowHashBang == null)
      { options.allowHashBang = options.ecmaVersion >= 14; }

    if (isArray(options.onToken)) {
      var tokens = options.onToken;
      options.onToken = function (token) { return tokens.push(token); };
    }
    if (isArray(options.onComment))
      { options.onComment = pushComment(options, options.onComment); }

    return options
  }

  function pushComment(options, array) {
    return function(block, text, start, end, startLoc, endLoc) {
      var comment = {
        type: block ? "Block" : "Line",
        value: text,
        start: start,
        end: end
      };
      if (options.locations)
        { comment.loc = new SourceLocation$1(this, startLoc, endLoc); }
      if (options.ranges)
        { comment.range = [start, end]; }
      array.push(comment);
    }
  }

  // Each scope gets a bitset that may contain these flags
  var
      SCOPE_TOP = 1,
      SCOPE_FUNCTION = 2,
      SCOPE_ASYNC = 4,
      SCOPE_GENERATOR = 8,
      SCOPE_ARROW = 16,
      SCOPE_SIMPLE_CATCH = 32,
      SCOPE_SUPER = 64,
      SCOPE_DIRECT_SUPER = 128,
      SCOPE_CLASS_STATIC_BLOCK = 256,
      SCOPE_VAR = SCOPE_TOP | SCOPE_FUNCTION | SCOPE_CLASS_STATIC_BLOCK;

  function functionFlags(async, generator) {
    return SCOPE_FUNCTION | (async ? SCOPE_ASYNC : 0) | (generator ? SCOPE_GENERATOR : 0)
  }

  // Used in checkLVal* and declareName to determine the type of a binding
  var
      BIND_NONE = 0, // Not a binding
      BIND_VAR = 1, // Var-style binding
      BIND_LEXICAL = 2, // Let- or const-style binding
      BIND_FUNCTION = 3, // Function declaration
      BIND_SIMPLE_CATCH = 4, // Simple (identifier pattern) catch binding
      BIND_OUTSIDE = 5; // Special case for function names as bound inside the function

  var Parser = function Parser(options, input, startPos) {
    this.options = options = getOptions(options);
    this.sourceFile = options.sourceFile;
    this.keywords = wordsRegexp(keywords$1[options.ecmaVersion >= 6 ? 6 : options.sourceType === "module" ? "5module" : 5]);
    var reserved = "";
    if (options.allowReserved !== true) {
      reserved = reservedWords[options.ecmaVersion >= 6 ? 6 : options.ecmaVersion === 5 ? 5 : 3];
      if (options.sourceType === "module") { reserved += " await"; }
    }
    this.reservedWords = wordsRegexp(reserved);
    var reservedStrict = (reserved ? reserved + " " : "") + reservedWords.strict;
    this.reservedWordsStrict = wordsRegexp(reservedStrict);
    this.reservedWordsStrictBind = wordsRegexp(reservedStrict + " " + reservedWords.strictBind);
    this.input = String(input);

    // Used to signal to callers of `readWord1` whether the word
    // contained any escape sequences. This is needed because words with
    // escape sequences must not be interpreted as keywords.
    this.containsEsc = false;

    // Set up token state

    // The current position of the tokenizer in the input.
    if (startPos) {
      this.pos = startPos;
      this.lineStart = this.input.lastIndexOf("\n", startPos - 1) + 1;
      this.curLine = this.input.slice(0, this.lineStart).split(lineBreak).length;
    } else {
      this.pos = this.lineStart = 0;
      this.curLine = 1;
    }

    // Properties of the current token:
    // Its type
    this.type = types$1.eof;
    // For tokens that include more information than their type, the value
    this.value = null;
    // Its start and end offset
    this.start = this.end = this.pos;
    // And, if locations are used, the {line, column} object
    // corresponding to those offsets
    this.startLoc = this.endLoc = this.curPosition();

    // Position information for the previous token
    this.lastTokEndLoc = this.lastTokStartLoc = null;
    this.lastTokStart = this.lastTokEnd = this.pos;

    // The context stack is used to superficially track syntactic
    // context to predict whether a regular expression is allowed in a
    // given position.
    this.context = this.initialContext();
    this.exprAllowed = true;

    // Figure out if it's a module code.
    this.inModule = options.sourceType === "module";
    this.strict = this.inModule || this.strictDirective(this.pos);

    // Used to signify the start of a potential arrow function
    this.potentialArrowAt = -1;
    this.potentialArrowInForAwait = false;

    // Positions to delayed-check that yield/await does not exist in default parameters.
    this.yieldPos = this.awaitPos = this.awaitIdentPos = 0;
    // Labels in scope.
    this.labels = [];
    // Thus-far undefined exports.
    this.undefinedExports = Object.create(null);

    // If enabled, skip leading hashbang line.
    if (this.pos === 0 && options.allowHashBang && this.input.slice(0, 2) === "#!")
      { this.skipLineComment(2); }

    // Scope tracking for duplicate variable names (see scope.js)
    this.scopeStack = [];
    this.enterScope(SCOPE_TOP);

    // For RegExp validation
    this.regexpState = null;

    // The stack of private names.
    // Each element has two properties: 'declared' and 'used'.
    // When it exited from the outermost class definition, all used private names must be declared.
    this.privateNameStack = [];
  };

  var prototypeAccessors = { inFunction: { configurable: true },inGenerator: { configurable: true },inAsync: { configurable: true },canAwait: { configurable: true },allowSuper: { configurable: true },allowDirectSuper: { configurable: true },treatFunctionsAsVar: { configurable: true },allowNewDotTarget: { configurable: true },inClassStaticBlock: { configurable: true } };

  Parser.prototype.parse = function parse () {
    var node = this.options.program || this.startNode();
    this.nextToken();
    return this.parseTopLevel(node)
  };

  prototypeAccessors.inFunction.get = function () { return (this.currentVarScope().flags & SCOPE_FUNCTION) > 0 };

  prototypeAccessors.inGenerator.get = function () { return (this.currentVarScope().flags & SCOPE_GENERATOR) > 0 && !this.currentVarScope().inClassFieldInit };

  prototypeAccessors.inAsync.get = function () { return (this.currentVarScope().flags & SCOPE_ASYNC) > 0 && !this.currentVarScope().inClassFieldInit };

  prototypeAccessors.canAwait.get = function () {
    for (var i = this.scopeStack.length - 1; i >= 0; i--) {
      var scope = this.scopeStack[i];
      if (scope.inClassFieldInit || scope.flags & SCOPE_CLASS_STATIC_BLOCK) { return false }
      if (scope.flags & SCOPE_FUNCTION) { return (scope.flags & SCOPE_ASYNC) > 0 }
    }
    return (this.inModule && this.options.ecmaVersion >= 13) || this.options.allowAwaitOutsideFunction
  };

  prototypeAccessors.allowSuper.get = function () {
    var ref = this.currentThisScope();
      var flags = ref.flags;
      var inClassFieldInit = ref.inClassFieldInit;
    return (flags & SCOPE_SUPER) > 0 || inClassFieldInit || this.options.allowSuperOutsideMethod
  };

  prototypeAccessors.allowDirectSuper.get = function () { return (this.currentThisScope().flags & SCOPE_DIRECT_SUPER) > 0 };

  prototypeAccessors.treatFunctionsAsVar.get = function () { return this.treatFunctionsAsVarInScope(this.currentScope()) };

  prototypeAccessors.allowNewDotTarget.get = function () {
    var ref = this.currentThisScope();
      var flags = ref.flags;
      var inClassFieldInit = ref.inClassFieldInit;
    return (flags & (SCOPE_FUNCTION | SCOPE_CLASS_STATIC_BLOCK)) > 0 || inClassFieldInit
  };

  prototypeAccessors.inClassStaticBlock.get = function () {
    return (this.currentVarScope().flags & SCOPE_CLASS_STATIC_BLOCK) > 0
  };

  Parser.extend = function extend () {
      var plugins = [], len = arguments.length;
      while ( len-- ) plugins[ len ] = arguments[ len ];

    var cls = this;
    for (var i = 0; i < plugins.length; i++) { cls = plugins[i](cls); }
    return cls
  };

  Parser.parse = function parse (input, options) {
    return new this(options, input).parse()
  };

  Parser.parseExpressionAt = function parseExpressionAt (input, pos, options) {
    var parser = new this(options, input, pos);
    parser.nextToken();
    return parser.parseExpression()
  };

  Parser.tokenizer = function tokenizer (input, options) {
    return new this(options, input)
  };

  Object.defineProperties( Parser.prototype, prototypeAccessors );

  var pp$9 = Parser.prototype;

  // ## Parser utilities

  var literal = /^(?:'((?:\\.|[^'\\])*?)'|"((?:\\.|[^"\\])*?)")/;
  pp$9.strictDirective = function(start) {
    if (this.options.ecmaVersion < 5) { return false }
    for (;;) {
      // Try to find string literal.
      skipWhiteSpace.lastIndex = start;
      start += skipWhiteSpace.exec(this.input)[0].length;
      var match = literal.exec(this.input.slice(start));
      if (!match) { return false }
      if ((match[1] || match[2]) === "use strict") {
        skipWhiteSpace.lastIndex = start + match[0].length;
        var spaceAfter = skipWhiteSpace.exec(this.input), end = spaceAfter.index + spaceAfter[0].length;
        var next = this.input.charAt(end);
        return next === ";" || next === "}" ||
          (lineBreak.test(spaceAfter[0]) &&
           !(/[(`.[+\-/*%<>=,?^&]/.test(next) || next === "!" && this.input.charAt(end + 1) === "="))
      }
      start += match[0].length;

      // Skip semicolon, if any.
      skipWhiteSpace.lastIndex = start;
      start += skipWhiteSpace.exec(this.input)[0].length;
      if (this.input[start] === ";")
        { start++; }
    }
  };

  // Predicate that tests whether the next token is of the given
  // type, and if yes, consumes it as a side effect.

  pp$9.eat = function(type) {
    if (this.type === type) {
      this.next();
      return true
    } else {
      return false
    }
  };

  // Tests whether parsed token is a contextual keyword.

  pp$9.isContextual = function(name) {
    return this.type === types$1.name && this.value === name && !this.containsEsc
  };

  // Consumes contextual keyword if possible.

  pp$9.eatContextual = function(name) {
    if (!this.isContextual(name)) { return false }
    this.next();
    return true
  };

  // Asserts that following token is given contextual keyword.

  pp$9.expectContextual = function(name) {
    if (!this.eatContextual(name)) { this.unexpected(); }
  };

  // Test whether a semicolon can be inserted at the current position.

  pp$9.canInsertSemicolon = function() {
    return this.type === types$1.eof ||
      this.type === types$1.braceR ||
      lineBreak.test(this.input.slice(this.lastTokEnd, this.start))
  };

  pp$9.insertSemicolon = function() {
    if (this.canInsertSemicolon()) {
      if (this.options.onInsertedSemicolon)
        { this.options.onInsertedSemicolon(this.lastTokEnd, this.lastTokEndLoc); }
      return true
    }
  };

  // Consume a semicolon, or, failing that, see if we are allowed to
  // pretend that there is a semicolon at this position.

  pp$9.semicolon = function() {
    if (!this.eat(types$1.semi) && !this.insertSemicolon()) { this.unexpected(); }
  };

  pp$9.afterTrailingComma = function(tokType, notNext) {
    if (this.type === tokType) {
      if (this.options.onTrailingComma)
        { this.options.onTrailingComma(this.lastTokStart, this.lastTokStartLoc); }
      if (!notNext)
        { this.next(); }
      return true
    }
  };

  // Expect a token of a given type. If found, consume it, otherwise,
  // raise an unexpected token error.

  pp$9.expect = function(type) {
    this.eat(type) || this.unexpected();
  };

  // Raise an unexpected token error.

  pp$9.unexpected = function(pos) {
    this.raise(pos != null ? pos : this.start, "Unexpected token");
  };

  var DestructuringErrors = function DestructuringErrors() {
    this.shorthandAssign =
    this.trailingComma =
    this.parenthesizedAssign =
    this.parenthesizedBind =
    this.doubleProto =
      -1;
  };

  pp$9.checkPatternErrors = function(refDestructuringErrors, isAssign) {
    if (!refDestructuringErrors) { return }
    if (refDestructuringErrors.trailingComma > -1)
      { this.raiseRecoverable(refDestructuringErrors.trailingComma, "Comma is not permitted after the rest element"); }
    var parens = isAssign ? refDestructuringErrors.parenthesizedAssign : refDestructuringErrors.parenthesizedBind;
    if (parens > -1) { this.raiseRecoverable(parens, isAssign ? "Assigning to rvalue" : "Parenthesized pattern"); }
  };

  pp$9.checkExpressionErrors = function(refDestructuringErrors, andThrow) {
    if (!refDestructuringErrors) { return false }
    var shorthandAssign = refDestructuringErrors.shorthandAssign;
    var doubleProto = refDestructuringErrors.doubleProto;
    if (!andThrow) { return shorthandAssign >= 0 || doubleProto >= 0 }
    if (shorthandAssign >= 0)
      { this.raise(shorthandAssign, "Shorthand property assignments are valid only in destructuring patterns"); }
    if (doubleProto >= 0)
      { this.raiseRecoverable(doubleProto, "Redefinition of __proto__ property"); }
  };

  pp$9.checkYieldAwaitInDefaultParams = function() {
    if (this.yieldPos && (!this.awaitPos || this.yieldPos < this.awaitPos))
      { this.raise(this.yieldPos, "Yield expression cannot be a default value"); }
    if (this.awaitPos)
      { this.raise(this.awaitPos, "Await expression cannot be a default value"); }
  };

  pp$9.isSimpleAssignTarget = function(expr) {
    if (expr.type === "ParenthesizedExpression")
      { return this.isSimpleAssignTarget(expr.expression) }
    return expr.type === "Identifier" || expr.type === "MemberExpression"
  };

  var pp$8 = Parser.prototype;

  // ### Statement parsing

  // Parse a program. Initializes the parser, reads any number of
  // statements, and wraps them in a Program node.  Optionally takes a
  // `program` argument.  If present, the statements will be appended
  // to its body instead of creating a new node.

  pp$8.parseTopLevel = function(node) {
    var exports = Object.create(null);
    if (!node.body) { node.body = []; }
    while (this.type !== types$1.eof) {
      var stmt = this.parseStatement(null, true, exports);
      node.body.push(stmt);
    }
    if (this.inModule)
      { for (var i = 0, list = Object.keys(this.undefinedExports); i < list.length; i += 1)
        {
          var name = list[i];

          this.raiseRecoverable(this.undefinedExports[name].start, ("Export '" + name + "' is not defined"));
        } }
    this.adaptDirectivePrologue(node.body);
    this.next();
    node.sourceType = this.options.sourceType;
    return this.finishNode(node, "Program")
  };

  var loopLabel = {kind: "loop"}, switchLabel = {kind: "switch"};

  pp$8.isLet = function(context) {
    if (this.options.ecmaVersion < 6 || !this.isContextual("let")) { return false }
    skipWhiteSpace.lastIndex = this.pos;
    var skip = skipWhiteSpace.exec(this.input);
    var next = this.pos + skip[0].length, nextCh = this.input.charCodeAt(next);
    // For ambiguous cases, determine if a LexicalDeclaration (or only a
    // Statement) is allowed here. If context is not empty then only a Statement
    // is allowed. However, `let [` is an explicit negative lookahead for
    // ExpressionStatement, so special-case it first.
    if (nextCh === 91 || nextCh === 92) { return true } // '[', '/'
    if (context) { return false }

    if (nextCh === 123 || nextCh > 0xd7ff && nextCh < 0xdc00) { return true } // '{', astral
    if (isIdentifierStart(nextCh, true)) {
      var pos = next + 1;
      while (isIdentifierChar(nextCh = this.input.charCodeAt(pos), true)) { ++pos; }
      if (nextCh === 92 || nextCh > 0xd7ff && nextCh < 0xdc00) { return true }
      var ident = this.input.slice(next, pos);
      if (!keywordRelationalOperator.test(ident)) { return true }
    }
    return false
  };

  // check 'async [no LineTerminator here] function'
  // - 'async /*foo*/ function' is OK.
  // - 'async /*\n*/ function' is invalid.
  pp$8.isAsyncFunction = function() {
    if (this.options.ecmaVersion < 8 || !this.isContextual("async"))
      { return false }

    skipWhiteSpace.lastIndex = this.pos;
    var skip = skipWhiteSpace.exec(this.input);
    var next = this.pos + skip[0].length, after;
    return !lineBreak.test(this.input.slice(this.pos, next)) &&
      this.input.slice(next, next + 8) === "function" &&
      (next + 8 === this.input.length ||
       !(isIdentifierChar(after = this.input.charCodeAt(next + 8)) || after > 0xd7ff && after < 0xdc00))
  };

  // Parse a single statement.
  //
  // If expecting a statement and finding a slash operator, parse a
  // regular expression literal. This is to handle cases like
  // `if (foo) /blah/.exec(foo)`, where looking at the previous token
  // does not help.

  pp$8.parseStatement = function(context, topLevel, exports) {
    var starttype = this.type, node = this.startNode(), kind;

    if (this.isLet(context)) {
      starttype = types$1._var;
      kind = "let";
    }

    // Most types of statements are recognized by the keyword they
    // start with. Many are trivial to parse, some require a bit of
    // complexity.

    switch (starttype) {
    case types$1._break: case types$1._continue: return this.parseBreakContinueStatement(node, starttype.keyword)
    case types$1._debugger: return this.parseDebuggerStatement(node)
    case types$1._do: return this.parseDoStatement(node)
    case types$1._for: return this.parseForStatement(node)
    case types$1._function:
      // Function as sole body of either an if statement or a labeled statement
      // works, but not when it is part of a labeled statement that is the sole
      // body of an if statement.
      if ((context && (this.strict || context !== "if" && context !== "label")) && this.options.ecmaVersion >= 6) { this.unexpected(); }
      return this.parseFunctionStatement(node, false, !context)
    case types$1._class:
      if (context) { this.unexpected(); }
      return this.parseClass(node, true)
    case types$1._if: return this.parseIfStatement(node)
    case types$1._return: return this.parseReturnStatement(node)
    case types$1._switch: return this.parseSwitchStatement(node)
    case types$1._throw: return this.parseThrowStatement(node)
    case types$1._try: return this.parseTryStatement(node)
    case types$1._const: case types$1._var:
      kind = kind || this.value;
      if (context && kind !== "var") { this.unexpected(); }
      return this.parseVarStatement(node, kind)
    case types$1._while: return this.parseWhileStatement(node)
    case types$1._with: return this.parseWithStatement(node)
    case types$1.braceL: return this.parseBlock(true, node)
    case types$1.semi: return this.parseEmptyStatement(node)
    case types$1._export:
    case types$1._import:
      if (this.options.ecmaVersion > 10 && starttype === types$1._import) {
        skipWhiteSpace.lastIndex = this.pos;
        var skip = skipWhiteSpace.exec(this.input);
        var next = this.pos + skip[0].length, nextCh = this.input.charCodeAt(next);
        if (nextCh === 40 || nextCh === 46) // '(' or '.'
          { return this.parseExpressionStatement(node, this.parseExpression()) }
      }

      if (!this.options.allowImportExportEverywhere) {
        if (!topLevel)
          { this.raise(this.start, "'import' and 'export' may only appear at the top level"); }
        if (!this.inModule)
          { this.raise(this.start, "'import' and 'export' may appear only with 'sourceType: module'"); }
      }
      return starttype === types$1._import ? this.parseImport(node) : this.parseExport(node, exports)

      // If the statement does not start with a statement keyword or a
      // brace, it's an ExpressionStatement or LabeledStatement. We
      // simply start parsing an expression, and afterwards, if the
      // next token is a colon and the expression was a simple
      // Identifier node, we switch to interpreting it as a label.
    default:
      if (this.isAsyncFunction()) {
        if (context) { this.unexpected(); }
        this.next();
        return this.parseFunctionStatement(node, true, !context)
      }

      var maybeName = this.value, expr = this.parseExpression();
      if (starttype === types$1.name && expr.type === "Identifier" && this.eat(types$1.colon))
        { return this.parseLabeledStatement(node, maybeName, expr, context) }
      else { return this.parseExpressionStatement(node, expr) }
    }
  };

  pp$8.parseBreakContinueStatement = function(node, keyword) {
    var isBreak = keyword === "break";
    this.next();
    if (this.eat(types$1.semi) || this.insertSemicolon()) { node.label = null; }
    else if (this.type !== types$1.name) { this.unexpected(); }
    else {
      node.label = this.parseIdent();
      this.semicolon();
    }

    // Verify that there is an actual destination to break or
    // continue to.
    var i = 0;
    for (; i < this.labels.length; ++i) {
      var lab = this.labels[i];
      if (node.label == null || lab.name === node.label.name) {
        if (lab.kind != null && (isBreak || lab.kind === "loop")) { break }
        if (node.label && isBreak) { break }
      }
    }
    if (i === this.labels.length) { this.raise(node.start, "Unsyntactic " + keyword); }
    return this.finishNode(node, isBreak ? "BreakStatement" : "ContinueStatement")
  };

  pp$8.parseDebuggerStatement = function(node) {
    this.next();
    this.semicolon();
    return this.finishNode(node, "DebuggerStatement")
  };

  pp$8.parseDoStatement = function(node) {
    this.next();
    this.labels.push(loopLabel);
    node.body = this.parseStatement("do");
    this.labels.pop();
    this.expect(types$1._while);
    node.test = this.parseParenExpression();
    if (this.options.ecmaVersion >= 6)
      { this.eat(types$1.semi); }
    else
      { this.semicolon(); }
    return this.finishNode(node, "DoWhileStatement")
  };

  // Disambiguating between a `for` and a `for`/`in` or `for`/`of`
  // loop is non-trivial. Basically, we have to parse the init `var`
  // statement or expression, disallowing the `in` operator (see
  // the second parameter to `parseExpression`), and then check
  // whether the next token is `in` or `of`. When there is no init
  // part (semicolon immediately after the opening parenthesis), it
  // is a regular `for` loop.

  pp$8.parseForStatement = function(node) {
    this.next();
    var awaitAt = (this.options.ecmaVersion >= 9 && this.canAwait && this.eatContextual("await")) ? this.lastTokStart : -1;
    this.labels.push(loopLabel);
    this.enterScope(0);
    this.expect(types$1.parenL);
    if (this.type === types$1.semi) {
      if (awaitAt > -1) { this.unexpected(awaitAt); }
      return this.parseFor(node, null)
    }
    var isLet = this.isLet();
    if (this.type === types$1._var || this.type === types$1._const || isLet) {
      var init$1 = this.startNode(), kind = isLet ? "let" : this.value;
      this.next();
      this.parseVar(init$1, true, kind);
      this.finishNode(init$1, "VariableDeclaration");
      if ((this.type === types$1._in || (this.options.ecmaVersion >= 6 && this.isContextual("of"))) && init$1.declarations.length === 1) {
        if (this.options.ecmaVersion >= 9) {
          if (this.type === types$1._in) {
            if (awaitAt > -1) { this.unexpected(awaitAt); }
          } else { node.await = awaitAt > -1; }
        }
        return this.parseForIn(node, init$1)
      }
      if (awaitAt > -1) { this.unexpected(awaitAt); }
      return this.parseFor(node, init$1)
    }
    var startsWithLet = this.isContextual("let"), isForOf = false;
    var refDestructuringErrors = new DestructuringErrors;
    var init = this.parseExpression(awaitAt > -1 ? "await" : true, refDestructuringErrors);
    if (this.type === types$1._in || (isForOf = this.options.ecmaVersion >= 6 && this.isContextual("of"))) {
      if (this.options.ecmaVersion >= 9) {
        if (this.type === types$1._in) {
          if (awaitAt > -1) { this.unexpected(awaitAt); }
        } else { node.await = awaitAt > -1; }
      }
      if (startsWithLet && isForOf) { this.raise(init.start, "The left-hand side of a for-of loop may not start with 'let'."); }
      this.toAssignable(init, false, refDestructuringErrors);
      this.checkLValPattern(init);
      return this.parseForIn(node, init)
    } else {
      this.checkExpressionErrors(refDestructuringErrors, true);
    }
    if (awaitAt > -1) { this.unexpected(awaitAt); }
    return this.parseFor(node, init)
  };

  pp$8.parseFunctionStatement = function(node, isAsync, declarationPosition) {
    this.next();
    return this.parseFunction(node, FUNC_STATEMENT | (declarationPosition ? 0 : FUNC_HANGING_STATEMENT), false, isAsync)
  };

  pp$8.parseIfStatement = function(node) {
    this.next();
    node.test = this.parseParenExpression();
    // allow function declarations in branches, but only in non-strict mode
    node.consequent = this.parseStatement("if");
    node.alternate = this.eat(types$1._else) ? this.parseStatement("if") : null;
    return this.finishNode(node, "IfStatement")
  };

  pp$8.parseReturnStatement = function(node) {
    if (!this.inFunction && !this.options.allowReturnOutsideFunction)
      { this.raise(this.start, "'return' outside of function"); }
    this.next();

    // In `return` (and `break`/`continue`), the keywords with
    // optional arguments, we eagerly look for a semicolon or the
    // possibility to insert one.

    if (this.eat(types$1.semi) || this.insertSemicolon()) { node.argument = null; }
    else { node.argument = this.parseExpression(); this.semicolon(); }
    return this.finishNode(node, "ReturnStatement")
  };

  pp$8.parseSwitchStatement = function(node) {
    this.next();
    node.discriminant = this.parseParenExpression();
    node.cases = [];
    this.expect(types$1.braceL);
    this.labels.push(switchLabel);
    this.enterScope(0);

    // Statements under must be grouped (by label) in SwitchCase
    // nodes. `cur` is used to keep the node that we are currently
    // adding statements to.

    var cur;
    for (var sawDefault = false; this.type !== types$1.braceR;) {
      if (this.type === types$1._case || this.type === types$1._default) {
        var isCase = this.type === types$1._case;
        if (cur) { this.finishNode(cur, "SwitchCase"); }
        node.cases.push(cur = this.startNode());
        cur.consequent = [];
        this.next();
        if (isCase) {
          cur.test = this.parseExpression();
        } else {
          if (sawDefault) { this.raiseRecoverable(this.lastTokStart, "Multiple default clauses"); }
          sawDefault = true;
          cur.test = null;
        }
        this.expect(types$1.colon);
      } else {
        if (!cur) { this.unexpected(); }
        cur.consequent.push(this.parseStatement(null));
      }
    }
    this.exitScope();
    if (cur) { this.finishNode(cur, "SwitchCase"); }
    this.next(); // Closing brace
    this.labels.pop();
    return this.finishNode(node, "SwitchStatement")
  };

  pp$8.parseThrowStatement = function(node) {
    this.next();
    if (lineBreak.test(this.input.slice(this.lastTokEnd, this.start)))
      { this.raise(this.lastTokEnd, "Illegal newline after throw"); }
    node.argument = this.parseExpression();
    this.semicolon();
    return this.finishNode(node, "ThrowStatement")
  };

  // Reused empty array added for node fields that are always empty.

  var empty$1 = [];

  pp$8.parseTryStatement = function(node) {
    this.next();
    node.block = this.parseBlock();
    node.handler = null;
    if (this.type === types$1._catch) {
      var clause = this.startNode();
      this.next();
      if (this.eat(types$1.parenL)) {
        clause.param = this.parseBindingAtom();
        var simple = clause.param.type === "Identifier";
        this.enterScope(simple ? SCOPE_SIMPLE_CATCH : 0);
        this.checkLValPattern(clause.param, simple ? BIND_SIMPLE_CATCH : BIND_LEXICAL);
        this.expect(types$1.parenR);
      } else {
        if (this.options.ecmaVersion < 10) { this.unexpected(); }
        clause.param = null;
        this.enterScope(0);
      }
      clause.body = this.parseBlock(false);
      this.exitScope();
      node.handler = this.finishNode(clause, "CatchClause");
    }
    node.finalizer = this.eat(types$1._finally) ? this.parseBlock() : null;
    if (!node.handler && !node.finalizer)
      { this.raise(node.start, "Missing catch or finally clause"); }
    return this.finishNode(node, "TryStatement")
  };

  pp$8.parseVarStatement = function(node, kind) {
    this.next();
    this.parseVar(node, false, kind);
    this.semicolon();
    return this.finishNode(node, "VariableDeclaration")
  };

  pp$8.parseWhileStatement = function(node) {
    this.next();
    node.test = this.parseParenExpression();
    this.labels.push(loopLabel);
    node.body = this.parseStatement("while");
    this.labels.pop();
    return this.finishNode(node, "WhileStatement")
  };

  pp$8.parseWithStatement = function(node) {
    if (this.strict) { this.raise(this.start, "'with' in strict mode"); }
    this.next();
    node.object = this.parseParenExpression();
    node.body = this.parseStatement("with");
    return this.finishNode(node, "WithStatement")
  };

  pp$8.parseEmptyStatement = function(node) {
    this.next();
    return this.finishNode(node, "EmptyStatement")
  };

  pp$8.parseLabeledStatement = function(node, maybeName, expr, context) {
    for (var i$1 = 0, list = this.labels; i$1 < list.length; i$1 += 1)
      {
      var label = list[i$1];

      if (label.name === maybeName)
        { this.raise(expr.start, "Label '" + maybeName + "' is already declared");
    } }
    var kind = this.type.isLoop ? "loop" : this.type === types$1._switch ? "switch" : null;
    for (var i = this.labels.length - 1; i >= 0; i--) {
      var label$1 = this.labels[i];
      if (label$1.statementStart === node.start) {
        // Update information about previous labels on this node
        label$1.statementStart = this.start;
        label$1.kind = kind;
      } else { break }
    }
    this.labels.push({name: maybeName, kind: kind, statementStart: this.start});
    node.body = this.parseStatement(context ? context.indexOf("label") === -1 ? context + "label" : context : "label");
    this.labels.pop();
    node.label = expr;
    return this.finishNode(node, "LabeledStatement")
  };

  pp$8.parseExpressionStatement = function(node, expr) {
    node.expression = expr;
    this.semicolon();
    return this.finishNode(node, "ExpressionStatement")
  };

  // Parse a semicolon-enclosed block of statements, handling `"use
  // strict"` declarations when `allowStrict` is true (used for
  // function bodies).

  pp$8.parseBlock = function(createNewLexicalScope, node, exitStrict) {
    if ( createNewLexicalScope === void 0 ) createNewLexicalScope = true;
    if ( node === void 0 ) node = this.startNode();

    node.body = [];
    this.expect(types$1.braceL);
    if (createNewLexicalScope) { this.enterScope(0); }
    while (this.type !== types$1.braceR) {
      var stmt = this.parseStatement(null);
      node.body.push(stmt);
    }
    if (exitStrict) { this.strict = false; }
    this.next();
    if (createNewLexicalScope) { this.exitScope(); }
    return this.finishNode(node, "BlockStatement")
  };

  // Parse a regular `for` loop. The disambiguation code in
  // `parseStatement` will already have parsed the init statement or
  // expression.

  pp$8.parseFor = function(node, init) {
    node.init = init;
    this.expect(types$1.semi);
    node.test = this.type === types$1.semi ? null : this.parseExpression();
    this.expect(types$1.semi);
    node.update = this.type === types$1.parenR ? null : this.parseExpression();
    this.expect(types$1.parenR);
    node.body = this.parseStatement("for");
    this.exitScope();
    this.labels.pop();
    return this.finishNode(node, "ForStatement")
  };

  // Parse a `for`/`in` and `for`/`of` loop, which are almost
  // same from parser's perspective.

  pp$8.parseForIn = function(node, init) {
    var isForIn = this.type === types$1._in;
    this.next();

    if (
      init.type === "VariableDeclaration" &&
      init.declarations[0].init != null &&
      (
        !isForIn ||
        this.options.ecmaVersion < 8 ||
        this.strict ||
        init.kind !== "var" ||
        init.declarations[0].id.type !== "Identifier"
      )
    ) {
      this.raise(
        init.start,
        ((isForIn ? "for-in" : "for-of") + " loop variable declaration may not have an initializer")
      );
    }
    node.left = init;
    node.right = isForIn ? this.parseExpression() : this.parseMaybeAssign();
    this.expect(types$1.parenR);
    node.body = this.parseStatement("for");
    this.exitScope();
    this.labels.pop();
    return this.finishNode(node, isForIn ? "ForInStatement" : "ForOfStatement")
  };

  // Parse a list of variable declarations.

  pp$8.parseVar = function(node, isFor, kind) {
    node.declarations = [];
    node.kind = kind;
    for (;;) {
      var decl = this.startNode();
      this.parseVarId(decl, kind);
      if (this.eat(types$1.eq)) {
        decl.init = this.parseMaybeAssign(isFor);
      } else if (kind === "const" && !(this.type === types$1._in || (this.options.ecmaVersion >= 6 && this.isContextual("of")))) {
        this.unexpected();
      } else if (decl.id.type !== "Identifier" && !(isFor && (this.type === types$1._in || this.isContextual("of")))) {
        this.raise(this.lastTokEnd, "Complex binding patterns require an initialization value");
      } else {
        decl.init = null;
      }
      node.declarations.push(this.finishNode(decl, "VariableDeclarator"));
      if (!this.eat(types$1.comma)) { break }
    }
    return node
  };

  pp$8.parseVarId = function(decl, kind) {
    decl.id = this.parseBindingAtom();
    this.checkLValPattern(decl.id, kind === "var" ? BIND_VAR : BIND_LEXICAL, false);
  };

  var FUNC_STATEMENT = 1, FUNC_HANGING_STATEMENT = 2, FUNC_NULLABLE_ID = 4;

  // Parse a function declaration or literal (depending on the
  // `statement & FUNC_STATEMENT`).

  // Remove `allowExpressionBody` for 7.0.0, as it is only called with false
  pp$8.parseFunction = function(node, statement, allowExpressionBody, isAsync, forInit) {
    this.initFunction(node);
    if (this.options.ecmaVersion >= 9 || this.options.ecmaVersion >= 6 && !isAsync) {
      if (this.type === types$1.star && (statement & FUNC_HANGING_STATEMENT))
        { this.unexpected(); }
      node.generator = this.eat(types$1.star);
    }
    if (this.options.ecmaVersion >= 8)
      { node.async = !!isAsync; }

    if (statement & FUNC_STATEMENT) {
      node.id = (statement & FUNC_NULLABLE_ID) && this.type !== types$1.name ? null : this.parseIdent();
      if (node.id && !(statement & FUNC_HANGING_STATEMENT))
        // If it is a regular function declaration in sloppy mode, then it is
        // subject to Annex B semantics (BIND_FUNCTION). Otherwise, the binding
        // mode depends on properties of the current scope (see
        // treatFunctionsAsVar).
        { this.checkLValSimple(node.id, (this.strict || node.generator || node.async) ? this.treatFunctionsAsVar ? BIND_VAR : BIND_LEXICAL : BIND_FUNCTION); }
    }

    var oldYieldPos = this.yieldPos, oldAwaitPos = this.awaitPos, oldAwaitIdentPos = this.awaitIdentPos;
    this.yieldPos = 0;
    this.awaitPos = 0;
    this.awaitIdentPos = 0;
    this.enterScope(functionFlags(node.async, node.generator));

    if (!(statement & FUNC_STATEMENT))
      { node.id = this.type === types$1.name ? this.parseIdent() : null; }

    this.parseFunctionParams(node);
    this.parseFunctionBody(node, allowExpressionBody, false, forInit);

    this.yieldPos = oldYieldPos;
    this.awaitPos = oldAwaitPos;
    this.awaitIdentPos = oldAwaitIdentPos;
    return this.finishNode(node, (statement & FUNC_STATEMENT) ? "FunctionDeclaration" : "FunctionExpression")
  };

  pp$8.parseFunctionParams = function(node) {
    this.expect(types$1.parenL);
    node.params = this.parseBindingList(types$1.parenR, false, this.options.ecmaVersion >= 8);
    this.checkYieldAwaitInDefaultParams();
  };

  // Parse a class declaration or literal (depending on the
  // `isStatement` parameter).

  pp$8.parseClass = function(node, isStatement) {
    this.next();

    // ecma-262 14.6 Class Definitions
    // A class definition is always strict mode code.
    var oldStrict = this.strict;
    this.strict = true;

    this.parseClassId(node, isStatement);
    this.parseClassSuper(node);
    var privateNameMap = this.enterClassBody();
    var classBody = this.startNode();
    var hadConstructor = false;
    classBody.body = [];
    this.expect(types$1.braceL);
    while (this.type !== types$1.braceR) {
      var element = this.parseClassElement(node.superClass !== null);
      if (element) {
        classBody.body.push(element);
        if (element.type === "MethodDefinition" && element.kind === "constructor") {
          if (hadConstructor) { this.raise(element.start, "Duplicate constructor in the same class"); }
          hadConstructor = true;
        } else if (element.key && element.key.type === "PrivateIdentifier" && isPrivateNameConflicted(privateNameMap, element)) {
          this.raiseRecoverable(element.key.start, ("Identifier '#" + (element.key.name) + "' has already been declared"));
        }
      }
    }
    this.strict = oldStrict;
    this.next();
    node.body = this.finishNode(classBody, "ClassBody");
    this.exitClassBody();
    return this.finishNode(node, isStatement ? "ClassDeclaration" : "ClassExpression")
  };

  pp$8.parseClassElement = function(constructorAllowsSuper) {
    if (this.eat(types$1.semi)) { return null }

    var ecmaVersion = this.options.ecmaVersion;
    var node = this.startNode();
    var keyName = "";
    var isGenerator = false;
    var isAsync = false;
    var kind = "method";
    var isStatic = false;

    if (this.eatContextual("static")) {
      // Parse static init block
      if (ecmaVersion >= 13 && this.eat(types$1.braceL)) {
        this.parseClassStaticBlock(node);
        return node
      }
      if (this.isClassElementNameStart() || this.type === types$1.star) {
        isStatic = true;
      } else {
        keyName = "static";
      }
    }
    node.static = isStatic;
    if (!keyName && ecmaVersion >= 8 && this.eatContextual("async")) {
      if ((this.isClassElementNameStart() || this.type === types$1.star) && !this.canInsertSemicolon()) {
        isAsync = true;
      } else {
        keyName = "async";
      }
    }
    if (!keyName && (ecmaVersion >= 9 || !isAsync) && this.eat(types$1.star)) {
      isGenerator = true;
    }
    if (!keyName && !isAsync && !isGenerator) {
      var lastValue = this.value;
      if (this.eatContextual("get") || this.eatContextual("set")) {
        if (this.isClassElementNameStart()) {
          kind = lastValue;
        } else {
          keyName = lastValue;
        }
      }
    }

    // Parse element name
    if (keyName) {
      // 'async', 'get', 'set', or 'static' were not a keyword contextually.
      // The last token is any of those. Make it the element name.
      node.computed = false;
      node.key = this.startNodeAt(this.lastTokStart, this.lastTokStartLoc);
      node.key.name = keyName;
      this.finishNode(node.key, "Identifier");
    } else {
      this.parseClassElementName(node);
    }

    // Parse element value
    if (ecmaVersion < 13 || this.type === types$1.parenL || kind !== "method" || isGenerator || isAsync) {
      var isConstructor = !node.static && checkKeyName(node, "constructor");
      var allowsDirectSuper = isConstructor && constructorAllowsSuper;
      // Couldn't move this check into the 'parseClassMethod' method for backward compatibility.
      if (isConstructor && kind !== "method") { this.raise(node.key.start, "Constructor can't have get/set modifier"); }
      node.kind = isConstructor ? "constructor" : kind;
      this.parseClassMethod(node, isGenerator, isAsync, allowsDirectSuper);
    } else {
      this.parseClassField(node);
    }

    return node
  };

  pp$8.isClassElementNameStart = function() {
    return (
      this.type === types$1.name ||
      this.type === types$1.privateId ||
      this.type === types$1.num ||
      this.type === types$1.string ||
      this.type === types$1.bracketL ||
      this.type.keyword
    )
  };

  pp$8.parseClassElementName = function(element) {
    if (this.type === types$1.privateId) {
      if (this.value === "constructor") {
        this.raise(this.start, "Classes can't have an element named '#constructor'");
      }
      element.computed = false;
      element.key = this.parsePrivateIdent();
    } else {
      this.parsePropertyName(element);
    }
  };

  pp$8.parseClassMethod = function(method, isGenerator, isAsync, allowsDirectSuper) {
    // Check key and flags
    var key = method.key;
    if (method.kind === "constructor") {
      if (isGenerator) { this.raise(key.start, "Constructor can't be a generator"); }
      if (isAsync) { this.raise(key.start, "Constructor can't be an async method"); }
    } else if (method.static && checkKeyName(method, "prototype")) {
      this.raise(key.start, "Classes may not have a static property named prototype");
    }

    // Parse value
    var value = method.value = this.parseMethod(isGenerator, isAsync, allowsDirectSuper);

    // Check value
    if (method.kind === "get" && value.params.length !== 0)
      { this.raiseRecoverable(value.start, "getter should have no params"); }
    if (method.kind === "set" && value.params.length !== 1)
      { this.raiseRecoverable(value.start, "setter should have exactly one param"); }
    if (method.kind === "set" && value.params[0].type === "RestElement")
      { this.raiseRecoverable(value.params[0].start, "Setter cannot use rest params"); }

    return this.finishNode(method, "MethodDefinition")
  };

  pp$8.parseClassField = function(field) {
    if (checkKeyName(field, "constructor")) {
      this.raise(field.key.start, "Classes can't have a field named 'constructor'");
    } else if (field.static && checkKeyName(field, "prototype")) {
      this.raise(field.key.start, "Classes can't have a static field named 'prototype'");
    }

    if (this.eat(types$1.eq)) {
      // To raise SyntaxError if 'arguments' exists in the initializer.
      var scope = this.currentThisScope();
      var inClassFieldInit = scope.inClassFieldInit;
      scope.inClassFieldInit = true;
      field.value = this.parseMaybeAssign();
      scope.inClassFieldInit = inClassFieldInit;
    } else {
      field.value = null;
    }
    this.semicolon();

    return this.finishNode(field, "PropertyDefinition")
  };

  pp$8.parseClassStaticBlock = function(node) {
    node.body = [];

    var oldLabels = this.labels;
    this.labels = [];
    this.enterScope(SCOPE_CLASS_STATIC_BLOCK | SCOPE_SUPER);
    while (this.type !== types$1.braceR) {
      var stmt = this.parseStatement(null);
      node.body.push(stmt);
    }
    this.next();
    this.exitScope();
    this.labels = oldLabels;

    return this.finishNode(node, "StaticBlock")
  };

  pp$8.parseClassId = function(node, isStatement) {
    if (this.type === types$1.name) {
      node.id = this.parseIdent();
      if (isStatement)
        { this.checkLValSimple(node.id, BIND_LEXICAL, false); }
    } else {
      if (isStatement === true)
        { this.unexpected(); }
      node.id = null;
    }
  };

  pp$8.parseClassSuper = function(node) {
    node.superClass = this.eat(types$1._extends) ? this.parseExprSubscripts(null, false) : null;
  };

  pp$8.enterClassBody = function() {
    var element = {declared: Object.create(null), used: []};
    this.privateNameStack.push(element);
    return element.declared
  };

  pp$8.exitClassBody = function() {
    var ref = this.privateNameStack.pop();
    var declared = ref.declared;
    var used = ref.used;
    var len = this.privateNameStack.length;
    var parent = len === 0 ? null : this.privateNameStack[len - 1];
    for (var i = 0; i < used.length; ++i) {
      var id = used[i];
      if (!hasOwn(declared, id.name)) {
        if (parent) {
          parent.used.push(id);
        } else {
          this.raiseRecoverable(id.start, ("Private field '#" + (id.name) + "' must be declared in an enclosing class"));
        }
      }
    }
  };

  function isPrivateNameConflicted(privateNameMap, element) {
    var name = element.key.name;
    var curr = privateNameMap[name];

    var next = "true";
    if (element.type === "MethodDefinition" && (element.kind === "get" || element.kind === "set")) {
      next = (element.static ? "s" : "i") + element.kind;
    }

    // `class { get #a(){}; static set #a(_){} }` is also conflict.
    if (
      curr === "iget" && next === "iset" ||
      curr === "iset" && next === "iget" ||
      curr === "sget" && next === "sset" ||
      curr === "sset" && next === "sget"
    ) {
      privateNameMap[name] = "true";
      return false
    } else if (!curr) {
      privateNameMap[name] = next;
      return false
    } else {
      return true
    }
  }

  function checkKeyName(node, name) {
    var computed = node.computed;
    var key = node.key;
    return !computed && (
      key.type === "Identifier" && key.name === name ||
      key.type === "Literal" && key.value === name
    )
  }

  // Parses module export declaration.

  pp$8.parseExport = function(node, exports) {
    this.next();
    // export * from '...'
    if (this.eat(types$1.star)) {
      if (this.options.ecmaVersion >= 11) {
        if (this.eatContextual("as")) {
          node.exported = this.parseModuleExportName();
          this.checkExport(exports, node.exported, this.lastTokStart);
        } else {
          node.exported = null;
        }
      }
      this.expectContextual("from");
      if (this.type !== types$1.string) { this.unexpected(); }
      node.source = this.parseExprAtom();
      this.semicolon();
      return this.finishNode(node, "ExportAllDeclaration")
    }
    if (this.eat(types$1._default)) { // export default ...
      this.checkExport(exports, "default", this.lastTokStart);
      var isAsync;
      if (this.type === types$1._function || (isAsync = this.isAsyncFunction())) {
        var fNode = this.startNode();
        this.next();
        if (isAsync) { this.next(); }
        node.declaration = this.parseFunction(fNode, FUNC_STATEMENT | FUNC_NULLABLE_ID, false, isAsync);
      } else if (this.type === types$1._class) {
        var cNode = this.startNode();
        node.declaration = this.parseClass(cNode, "nullableID");
      } else {
        node.declaration = this.parseMaybeAssign();
        this.semicolon();
      }
      return this.finishNode(node, "ExportDefaultDeclaration")
    }
    // export var|const|let|function|class ...
    if (this.shouldParseExportStatement()) {
      node.declaration = this.parseStatement(null);
      if (node.declaration.type === "VariableDeclaration")
        { this.checkVariableExport(exports, node.declaration.declarations); }
      else
        { this.checkExport(exports, node.declaration.id, node.declaration.id.start); }
      node.specifiers = [];
      node.source = null;
    } else { // export { x, y as z } [from '...']
      node.declaration = null;
      node.specifiers = this.parseExportSpecifiers(exports);
      if (this.eatContextual("from")) {
        if (this.type !== types$1.string) { this.unexpected(); }
        node.source = this.parseExprAtom();
      } else {
        for (var i = 0, list = node.specifiers; i < list.length; i += 1) {
          // check for keywords used as local names
          var spec = list[i];

          this.checkUnreserved(spec.local);
          // check if export is defined
          this.checkLocalExport(spec.local);

          if (spec.local.type === "Literal") {
            this.raise(spec.local.start, "A string literal cannot be used as an exported binding without `from`.");
          }
        }

        node.source = null;
      }
      this.semicolon();
    }
    return this.finishNode(node, "ExportNamedDeclaration")
  };

  pp$8.checkExport = function(exports, name, pos) {
    if (!exports) { return }
    if (typeof name !== "string")
      { name = name.type === "Identifier" ? name.name : name.value; }
    if (hasOwn(exports, name))
      { this.raiseRecoverable(pos, "Duplicate export '" + name + "'"); }
    exports[name] = true;
  };

  pp$8.checkPatternExport = function(exports, pat) {
    var type = pat.type;
    if (type === "Identifier")
      { this.checkExport(exports, pat, pat.start); }
    else if (type === "ObjectPattern")
      { for (var i = 0, list = pat.properties; i < list.length; i += 1)
        {
          var prop = list[i];

          this.checkPatternExport(exports, prop);
        } }
    else if (type === "ArrayPattern")
      { for (var i$1 = 0, list$1 = pat.elements; i$1 < list$1.length; i$1 += 1) {
        var elt = list$1[i$1];

          if (elt) { this.checkPatternExport(exports, elt); }
      } }
    else if (type === "Property")
      { this.checkPatternExport(exports, pat.value); }
    else if (type === "AssignmentPattern")
      { this.checkPatternExport(exports, pat.left); }
    else if (type === "RestElement")
      { this.checkPatternExport(exports, pat.argument); }
    else if (type === "ParenthesizedExpression")
      { this.checkPatternExport(exports, pat.expression); }
  };

  pp$8.checkVariableExport = function(exports, decls) {
    if (!exports) { return }
    for (var i = 0, list = decls; i < list.length; i += 1)
      {
      var decl = list[i];

      this.checkPatternExport(exports, decl.id);
    }
  };

  pp$8.shouldParseExportStatement = function() {
    return this.type.keyword === "var" ||
      this.type.keyword === "const" ||
      this.type.keyword === "class" ||
      this.type.keyword === "function" ||
      this.isLet() ||
      this.isAsyncFunction()
  };

  // Parses a comma-separated list of module exports.

  pp$8.parseExportSpecifiers = function(exports) {
    var nodes = [], first = true;
    // export { x, y as z } [from '...']
    this.expect(types$1.braceL);
    while (!this.eat(types$1.braceR)) {
      if (!first) {
        this.expect(types$1.comma);
        if (this.afterTrailingComma(types$1.braceR)) { break }
      } else { first = false; }

      var node = this.startNode();
      node.local = this.parseModuleExportName();
      node.exported = this.eatContextual("as") ? this.parseModuleExportName() : node.local;
      this.checkExport(
        exports,
        node.exported,
        node.exported.start
      );
      nodes.push(this.finishNode(node, "ExportSpecifier"));
    }
    return nodes
  };

  // Parses import declaration.

  pp$8.parseImport = function(node) {
    this.next();
    // import '...'
    if (this.type === types$1.string) {
      node.specifiers = empty$1;
      node.source = this.parseExprAtom();
    } else {
      node.specifiers = this.parseImportSpecifiers();
      this.expectContextual("from");
      node.source = this.type === types$1.string ? this.parseExprAtom() : this.unexpected();
    }
    this.semicolon();
    return this.finishNode(node, "ImportDeclaration")
  };

  // Parses a comma-separated list of module imports.

  pp$8.parseImportSpecifiers = function() {
    var nodes = [], first = true;
    if (this.type === types$1.name) {
      // import defaultObj, { x, y as z } from '...'
      var node = this.startNode();
      node.local = this.parseIdent();
      this.checkLValSimple(node.local, BIND_LEXICAL);
      nodes.push(this.finishNode(node, "ImportDefaultSpecifier"));
      if (!this.eat(types$1.comma)) { return nodes }
    }
    if (this.type === types$1.star) {
      var node$1 = this.startNode();
      this.next();
      this.expectContextual("as");
      node$1.local = this.parseIdent();
      this.checkLValSimple(node$1.local, BIND_LEXICAL);
      nodes.push(this.finishNode(node$1, "ImportNamespaceSpecifier"));
      return nodes
    }
    this.expect(types$1.braceL);
    while (!this.eat(types$1.braceR)) {
      if (!first) {
        this.expect(types$1.comma);
        if (this.afterTrailingComma(types$1.braceR)) { break }
      } else { first = false; }

      var node$2 = this.startNode();
      node$2.imported = this.parseModuleExportName();
      if (this.eatContextual("as")) {
        node$2.local = this.parseIdent();
      } else {
        this.checkUnreserved(node$2.imported);
        node$2.local = node$2.imported;
      }
      this.checkLValSimple(node$2.local, BIND_LEXICAL);
      nodes.push(this.finishNode(node$2, "ImportSpecifier"));
    }
    return nodes
  };

  pp$8.parseModuleExportName = function() {
    if (this.options.ecmaVersion >= 13 && this.type === types$1.string) {
      var stringLiteral = this.parseLiteral(this.value);
      if (loneSurrogate.test(stringLiteral.value)) {
        this.raise(stringLiteral.start, "An export name cannot include a lone surrogate.");
      }
      return stringLiteral
    }
    return this.parseIdent(true)
  };

  // Set `ExpressionStatement#directive` property for directive prologues.
  pp$8.adaptDirectivePrologue = function(statements) {
    for (var i = 0; i < statements.length && this.isDirectiveCandidate(statements[i]); ++i) {
      statements[i].directive = statements[i].expression.raw.slice(1, -1);
    }
  };
  pp$8.isDirectiveCandidate = function(statement) {
    return (
      this.options.ecmaVersion >= 5 &&
      statement.type === "ExpressionStatement" &&
      statement.expression.type === "Literal" &&
      typeof statement.expression.value === "string" &&
      // Reject parenthesized strings.
      (this.input[statement.start] === "\"" || this.input[statement.start] === "'")
    )
  };

  var pp$7 = Parser.prototype;

  // Convert existing expression atom to assignable pattern
  // if possible.

  pp$7.toAssignable = function(node, isBinding, refDestructuringErrors) {
    if (this.options.ecmaVersion >= 6 && node) {
      switch (node.type) {
      case "Identifier":
        if (this.inAsync && node.name === "await")
          { this.raise(node.start, "Cannot use 'await' as identifier inside an async function"); }
        break

      case "ObjectPattern":
      case "ArrayPattern":
      case "AssignmentPattern":
      case "RestElement":
        break

      case "ObjectExpression":
        node.type = "ObjectPattern";
        if (refDestructuringErrors) { this.checkPatternErrors(refDestructuringErrors, true); }
        for (var i = 0, list = node.properties; i < list.length; i += 1) {
          var prop = list[i];

        this.toAssignable(prop, isBinding);
          // Early error:
          //   AssignmentRestProperty[Yield, Await] :
          //     `...` DestructuringAssignmentTarget[Yield, Await]
          //
          //   It is a Syntax Error if |DestructuringAssignmentTarget| is an |ArrayLiteral| or an |ObjectLiteral|.
          if (
            prop.type === "RestElement" &&
            (prop.argument.type === "ArrayPattern" || prop.argument.type === "ObjectPattern")
          ) {
            this.raise(prop.argument.start, "Unexpected token");
          }
        }
        break

      case "Property":
        // AssignmentProperty has type === "Property"
        if (node.kind !== "init") { this.raise(node.key.start, "Object pattern can't contain getter or setter"); }
        this.toAssignable(node.value, isBinding);
        break

      case "ArrayExpression":
        node.type = "ArrayPattern";
        if (refDestructuringErrors) { this.checkPatternErrors(refDestructuringErrors, true); }
        this.toAssignableList(node.elements, isBinding);
        break

      case "SpreadElement":
        node.type = "RestElement";
        this.toAssignable(node.argument, isBinding);
        if (node.argument.type === "AssignmentPattern")
          { this.raise(node.argument.start, "Rest elements cannot have a default value"); }
        break

      case "AssignmentExpression":
        if (node.operator !== "=") { this.raise(node.left.end, "Only '=' operator can be used for specifying default value."); }
        node.type = "AssignmentPattern";
        delete node.operator;
        this.toAssignable(node.left, isBinding);
        break

      case "ParenthesizedExpression":
        this.toAssignable(node.expression, isBinding, refDestructuringErrors);
        break

      case "ChainExpression":
        this.raiseRecoverable(node.start, "Optional chaining cannot appear in left-hand side");
        break

      case "MemberExpression":
        if (!isBinding) { break }

      default:
        this.raise(node.start, "Assigning to rvalue");
      }
    } else if (refDestructuringErrors) { this.checkPatternErrors(refDestructuringErrors, true); }
    return node
  };

  // Convert list of expression atoms to binding list.

  pp$7.toAssignableList = function(exprList, isBinding) {
    var end = exprList.length;
    for (var i = 0; i < end; i++) {
      var elt = exprList[i];
      if (elt) { this.toAssignable(elt, isBinding); }
    }
    if (end) {
      var last = exprList[end - 1];
      if (this.options.ecmaVersion === 6 && isBinding && last && last.type === "RestElement" && last.argument.type !== "Identifier")
        { this.unexpected(last.argument.start); }
    }
    return exprList
  };

  // Parses spread element.

  pp$7.parseSpread = function(refDestructuringErrors) {
    var node = this.startNode();
    this.next();
    node.argument = this.parseMaybeAssign(false, refDestructuringErrors);
    return this.finishNode(node, "SpreadElement")
  };

  pp$7.parseRestBinding = function() {
    var node = this.startNode();
    this.next();

    // RestElement inside of a function parameter must be an identifier
    if (this.options.ecmaVersion === 6 && this.type !== types$1.name)
      { this.unexpected(); }

    node.argument = this.parseBindingAtom();

    return this.finishNode(node, "RestElement")
  };

  // Parses lvalue (assignable) atom.

  pp$7.parseBindingAtom = function() {
    if (this.options.ecmaVersion >= 6) {
      switch (this.type) {
      case types$1.bracketL:
        var node = this.startNode();
        this.next();
        node.elements = this.parseBindingList(types$1.bracketR, true, true);
        return this.finishNode(node, "ArrayPattern")

      case types$1.braceL:
        return this.parseObj(true)
      }
    }
    return this.parseIdent()
  };

  pp$7.parseBindingList = function(close, allowEmpty, allowTrailingComma) {
    var elts = [], first = true;
    while (!this.eat(close)) {
      if (first) { first = false; }
      else { this.expect(types$1.comma); }
      if (allowEmpty && this.type === types$1.comma) {
        elts.push(null);
      } else if (allowTrailingComma && this.afterTrailingComma(close)) {
        break
      } else if (this.type === types$1.ellipsis) {
        var rest = this.parseRestBinding();
        this.parseBindingListItem(rest);
        elts.push(rest);
        if (this.type === types$1.comma) { this.raise(this.start, "Comma is not permitted after the rest element"); }
        this.expect(close);
        break
      } else {
        var elem = this.parseMaybeDefault(this.start, this.startLoc);
        this.parseBindingListItem(elem);
        elts.push(elem);
      }
    }
    return elts
  };

  pp$7.parseBindingListItem = function(param) {
    return param
  };

  // Parses assignment pattern around given atom if possible.

  pp$7.parseMaybeDefault = function(startPos, startLoc, left) {
    left = left || this.parseBindingAtom();
    if (this.options.ecmaVersion < 6 || !this.eat(types$1.eq)) { return left }
    var node = this.startNodeAt(startPos, startLoc);
    node.left = left;
    node.right = this.parseMaybeAssign();
    return this.finishNode(node, "AssignmentPattern")
  };

  // The following three functions all verify that a node is an lvalue —
  // something that can be bound, or assigned to. In order to do so, they perform
  // a variety of checks:
  //
  // - Check that none of the bound/assigned-to identifiers are reserved words.
  // - Record name declarations for bindings in the appropriate scope.
  // - Check duplicate argument names, if checkClashes is set.
  //
  // If a complex binding pattern is encountered (e.g., object and array
  // destructuring), the entire pattern is recursively checked.
  //
  // There are three versions of checkLVal*() appropriate for different
  // circumstances:
  //
  // - checkLValSimple() shall be used if the syntactic construct supports
  //   nothing other than identifiers and member expressions. Parenthesized
  //   expressions are also correctly handled. This is generally appropriate for
  //   constructs for which the spec says
  //
  //   > It is a Syntax Error if AssignmentTargetType of [the production] is not
  //   > simple.
  //
  //   It is also appropriate for checking if an identifier is valid and not
  //   defined elsewhere, like import declarations or function/class identifiers.
  //
  //   Examples where this is used include:
  //     a += …;
  //     import a from '…';
  //   where a is the node to be checked.
  //
  // - checkLValPattern() shall be used if the syntactic construct supports
  //   anything checkLValSimple() supports, as well as object and array
  //   destructuring patterns. This is generally appropriate for constructs for
  //   which the spec says
  //
  //   > It is a Syntax Error if [the production] is neither an ObjectLiteral nor
  //   > an ArrayLiteral and AssignmentTargetType of [the production] is not
  //   > simple.
  //
  //   Examples where this is used include:
  //     (a = …);
  //     const a = …;
  //     try { … } catch (a) { … }
  //   where a is the node to be checked.
  //
  // - checkLValInnerPattern() shall be used if the syntactic construct supports
  //   anything checkLValPattern() supports, as well as default assignment
  //   patterns, rest elements, and other constructs that may appear within an
  //   object or array destructuring pattern.
  //
  //   As a special case, function parameters also use checkLValInnerPattern(),
  //   as they also support defaults and rest constructs.
  //
  // These functions deliberately support both assignment and binding constructs,
  // as the logic for both is exceedingly similar. If the node is the target of
  // an assignment, then bindingType should be set to BIND_NONE. Otherwise, it
  // should be set to the appropriate BIND_* constant, like BIND_VAR or
  // BIND_LEXICAL.
  //
  // If the function is called with a non-BIND_NONE bindingType, then
  // additionally a checkClashes object may be specified to allow checking for
  // duplicate argument names. checkClashes is ignored if the provided construct
  // is an assignment (i.e., bindingType is BIND_NONE).

  pp$7.checkLValSimple = function(expr, bindingType, checkClashes) {
    if ( bindingType === void 0 ) bindingType = BIND_NONE;

    var isBind = bindingType !== BIND_NONE;

    switch (expr.type) {
    case "Identifier":
      if (this.strict && this.reservedWordsStrictBind.test(expr.name))
        { this.raiseRecoverable(expr.start, (isBind ? "Binding " : "Assigning to ") + expr.name + " in strict mode"); }
      if (isBind) {
        if (bindingType === BIND_LEXICAL && expr.name === "let")
          { this.raiseRecoverable(expr.start, "let is disallowed as a lexically bound name"); }
        if (checkClashes) {
          if (hasOwn(checkClashes, expr.name))
            { this.raiseRecoverable(expr.start, "Argument name clash"); }
          checkClashes[expr.name] = true;
        }
        if (bindingType !== BIND_OUTSIDE) { this.declareName(expr.name, bindingType, expr.start); }
      }
      break

    case "ChainExpression":
      this.raiseRecoverable(expr.start, "Optional chaining cannot appear in left-hand side");
      break

    case "MemberExpression":
      if (isBind) { this.raiseRecoverable(expr.start, "Binding member expression"); }
      break

    case "ParenthesizedExpression":
      if (isBind) { this.raiseRecoverable(expr.start, "Binding parenthesized expression"); }
      return this.checkLValSimple(expr.expression, bindingType, checkClashes)

    default:
      this.raise(expr.start, (isBind ? "Binding" : "Assigning to") + " rvalue");
    }
  };

  pp$7.checkLValPattern = function(expr, bindingType, checkClashes) {
    if ( bindingType === void 0 ) bindingType = BIND_NONE;

    switch (expr.type) {
    case "ObjectPattern":
      for (var i = 0, list = expr.properties; i < list.length; i += 1) {
        var prop = list[i];

      this.checkLValInnerPattern(prop, bindingType, checkClashes);
      }
      break

    case "ArrayPattern":
      for (var i$1 = 0, list$1 = expr.elements; i$1 < list$1.length; i$1 += 1) {
        var elem = list$1[i$1];

      if (elem) { this.checkLValInnerPattern(elem, bindingType, checkClashes); }
      }
      break

    default:
      this.checkLValSimple(expr, bindingType, checkClashes);
    }
  };

  pp$7.checkLValInnerPattern = function(expr, bindingType, checkClashes) {
    if ( bindingType === void 0 ) bindingType = BIND_NONE;

    switch (expr.type) {
    case "Property":
      // AssignmentProperty has type === "Property"
      this.checkLValInnerPattern(expr.value, bindingType, checkClashes);
      break

    case "AssignmentPattern":
      this.checkLValPattern(expr.left, bindingType, checkClashes);
      break

    case "RestElement":
      this.checkLValPattern(expr.argument, bindingType, checkClashes);
      break

    default:
      this.checkLValPattern(expr, bindingType, checkClashes);
    }
  };

  // The algorithm used to determine whether a regexp can appear at a

  var TokContext = function TokContext(token, isExpr, preserveSpace, override, generator) {
    this.token = token;
    this.isExpr = !!isExpr;
    this.preserveSpace = !!preserveSpace;
    this.override = override;
    this.generator = !!generator;
  };

  var types = {
    b_stat: new TokContext("{", false),
    b_expr: new TokContext("{", true),
    b_tmpl: new TokContext("${", false),
    p_stat: new TokContext("(", false),
    p_expr: new TokContext("(", true),
    q_tmpl: new TokContext("`", true, true, function (p) { return p.tryReadTemplateToken(); }),
    f_stat: new TokContext("function", false),
    f_expr: new TokContext("function", true),
    f_expr_gen: new TokContext("function", true, false, null, true),
    f_gen: new TokContext("function", false, false, null, true)
  };

  var pp$6 = Parser.prototype;

  pp$6.initialContext = function() {
    return [types.b_stat]
  };

  pp$6.curContext = function() {
    return this.context[this.context.length - 1]
  };

  pp$6.braceIsBlock = function(prevType) {
    var parent = this.curContext();
    if (parent === types.f_expr || parent === types.f_stat)
      { return true }
    if (prevType === types$1.colon && (parent === types.b_stat || parent === types.b_expr))
      { return !parent.isExpr }

    // The check for `tt.name && exprAllowed` detects whether we are
    // after a `yield` or `of` construct. See the `updateContext` for
    // `tt.name`.
    if (prevType === types$1._return || prevType === types$1.name && this.exprAllowed)
      { return lineBreak.test(this.input.slice(this.lastTokEnd, this.start)) }
    if (prevType === types$1._else || prevType === types$1.semi || prevType === types$1.eof || prevType === types$1.parenR || prevType === types$1.arrow)
      { return true }
    if (prevType === types$1.braceL)
      { return parent === types.b_stat }
    if (prevType === types$1._var || prevType === types$1._const || prevType === types$1.name)
      { return false }
    return !this.exprAllowed
  };

  pp$6.inGeneratorContext = function() {
    for (var i = this.context.length - 1; i >= 1; i--) {
      var context = this.context[i];
      if (context.token === "function")
        { return context.generator }
    }
    return false
  };

  pp$6.updateContext = function(prevType) {
    var update, type = this.type;
    if (type.keyword && prevType === types$1.dot)
      { this.exprAllowed = false; }
    else if (update = type.updateContext)
      { update.call(this, prevType); }
    else
      { this.exprAllowed = type.beforeExpr; }
  };

  // Used to handle egde cases when token context could not be inferred correctly during tokenization phase

  pp$6.overrideContext = function(tokenCtx) {
    if (this.curContext() !== tokenCtx) {
      this.context[this.context.length - 1] = tokenCtx;
    }
  };

  // Token-specific context update code

  types$1.parenR.updateContext = types$1.braceR.updateContext = function() {
    if (this.context.length === 1) {
      this.exprAllowed = true;
      return
    }
    var out = this.context.pop();
    if (out === types.b_stat && this.curContext().token === "function") {
      out = this.context.pop();
    }
    this.exprAllowed = !out.isExpr;
  };

  types$1.braceL.updateContext = function(prevType) {
    this.context.push(this.braceIsBlock(prevType) ? types.b_stat : types.b_expr);
    this.exprAllowed = true;
  };

  types$1.dollarBraceL.updateContext = function() {
    this.context.push(types.b_tmpl);
    this.exprAllowed = true;
  };

  types$1.parenL.updateContext = function(prevType) {
    var statementParens = prevType === types$1._if || prevType === types$1._for || prevType === types$1._with || prevType === types$1._while;
    this.context.push(statementParens ? types.p_stat : types.p_expr);
    this.exprAllowed = true;
  };

  types$1.incDec.updateContext = function() {
    // tokExprAllowed stays unchanged
  };

  types$1._function.updateContext = types$1._class.updateContext = function(prevType) {
    if (prevType.beforeExpr && prevType !== types$1._else &&
        !(prevType === types$1.semi && this.curContext() !== types.p_stat) &&
        !(prevType === types$1._return && lineBreak.test(this.input.slice(this.lastTokEnd, this.start))) &&
        !((prevType === types$1.colon || prevType === types$1.braceL) && this.curContext() === types.b_stat))
      { this.context.push(types.f_expr); }
    else
      { this.context.push(types.f_stat); }
    this.exprAllowed = false;
  };

  types$1.backQuote.updateContext = function() {
    if (this.curContext() === types.q_tmpl)
      { this.context.pop(); }
    else
      { this.context.push(types.q_tmpl); }
    this.exprAllowed = false;
  };

  types$1.star.updateContext = function(prevType) {
    if (prevType === types$1._function) {
      var index = this.context.length - 1;
      if (this.context[index] === types.f_expr)
        { this.context[index] = types.f_expr_gen; }
      else
        { this.context[index] = types.f_gen; }
    }
    this.exprAllowed = true;
  };

  types$1.name.updateContext = function(prevType) {
    var allowed = false;
    if (this.options.ecmaVersion >= 6 && prevType !== types$1.dot) {
      if (this.value === "of" && !this.exprAllowed ||
          this.value === "yield" && this.inGeneratorContext())
        { allowed = true; }
    }
    this.exprAllowed = allowed;
  };

  // A recursive descent parser operates by defining functions for all

  var pp$5 = Parser.prototype;

  // Check if property name clashes with already added.
  // Object/class getters and setters are not allowed to clash —
  // either with each other or with an init property — and in
  // strict mode, init properties are also not allowed to be repeated.

  pp$5.checkPropClash = function(prop, propHash, refDestructuringErrors) {
    if (this.options.ecmaVersion >= 9 && prop.type === "SpreadElement")
      { return }
    if (this.options.ecmaVersion >= 6 && (prop.computed || prop.method || prop.shorthand))
      { return }
    var key = prop.key;
    var name;
    switch (key.type) {
    case "Identifier": name = key.name; break
    case "Literal": name = String(key.value); break
    default: return
    }
    var kind = prop.kind;
    if (this.options.ecmaVersion >= 6) {
      if (name === "__proto__" && kind === "init") {
        if (propHash.proto) {
          if (refDestructuringErrors) {
            if (refDestructuringErrors.doubleProto < 0) {
              refDestructuringErrors.doubleProto = key.start;
            }
          } else {
            this.raiseRecoverable(key.start, "Redefinition of __proto__ property");
          }
        }
        propHash.proto = true;
      }
      return
    }
    name = "$" + name;
    var other = propHash[name];
    if (other) {
      var redefinition;
      if (kind === "init") {
        redefinition = this.strict && other.init || other.get || other.set;
      } else {
        redefinition = other.init || other[kind];
      }
      if (redefinition)
        { this.raiseRecoverable(key.start, "Redefinition of property"); }
    } else {
      other = propHash[name] = {
        init: false,
        get: false,
        set: false
      };
    }
    other[kind] = true;
  };

  // ### Expression parsing

  // These nest, from the most general expression type at the top to
  // 'atomic', nondivisible expression types at the bottom. Most of
  // the functions will simply let the function(s) below them parse,
  // and, *if* the syntactic construct they handle is present, wrap
  // the AST node that the inner parser gave them in another node.

  // Parse a full expression. The optional arguments are used to
  // forbid the `in` operator (in for loops initalization expressions)
  // and provide reference for storing '=' operator inside shorthand
  // property assignment in contexts where both object expression
  // and object pattern might appear (so it's possible to raise
  // delayed syntax error at correct position).

  pp$5.parseExpression = function(forInit, refDestructuringErrors) {
    var startPos = this.start, startLoc = this.startLoc;
    var expr = this.parseMaybeAssign(forInit, refDestructuringErrors);
    if (this.type === types$1.comma) {
      var node = this.startNodeAt(startPos, startLoc);
      node.expressions = [expr];
      while (this.eat(types$1.comma)) { node.expressions.push(this.parseMaybeAssign(forInit, refDestructuringErrors)); }
      return this.finishNode(node, "SequenceExpression")
    }
    return expr
  };

  // Parse an assignment expression. This includes applications of
  // operators like `+=`.

  pp$5.parseMaybeAssign = function(forInit, refDestructuringErrors, afterLeftParse) {
    if (this.isContextual("yield")) {
      if (this.inGenerator) { return this.parseYield(forInit) }
      // The tokenizer will assume an expression is allowed after
      // `yield`, but this isn't that kind of yield
      else { this.exprAllowed = false; }
    }

    var ownDestructuringErrors = false, oldParenAssign = -1, oldTrailingComma = -1, oldDoubleProto = -1;
    if (refDestructuringErrors) {
      oldParenAssign = refDestructuringErrors.parenthesizedAssign;
      oldTrailingComma = refDestructuringErrors.trailingComma;
      oldDoubleProto = refDestructuringErrors.doubleProto;
      refDestructuringErrors.parenthesizedAssign = refDestructuringErrors.trailingComma = -1;
    } else {
      refDestructuringErrors = new DestructuringErrors;
      ownDestructuringErrors = true;
    }

    var startPos = this.start, startLoc = this.startLoc;
    if (this.type === types$1.parenL || this.type === types$1.name) {
      this.potentialArrowAt = this.start;
      this.potentialArrowInForAwait = forInit === "await";
    }
    var left = this.parseMaybeConditional(forInit, refDestructuringErrors);
    if (afterLeftParse) { left = afterLeftParse.call(this, left, startPos, startLoc); }
    if (this.type.isAssign) {
      var node = this.startNodeAt(startPos, startLoc);
      node.operator = this.value;
      if (this.type === types$1.eq)
        { left = this.toAssignable(left, false, refDestructuringErrors); }
      if (!ownDestructuringErrors) {
        refDestructuringErrors.parenthesizedAssign = refDestructuringErrors.trailingComma = refDestructuringErrors.doubleProto = -1;
      }
      if (refDestructuringErrors.shorthandAssign >= left.start)
        { refDestructuringErrors.shorthandAssign = -1; } // reset because shorthand default was used correctly
      if (this.type === types$1.eq)
        { this.checkLValPattern(left); }
      else
        { this.checkLValSimple(left); }
      node.left = left;
      this.next();
      node.right = this.parseMaybeAssign(forInit);
      if (oldDoubleProto > -1) { refDestructuringErrors.doubleProto = oldDoubleProto; }
      return this.finishNode(node, "AssignmentExpression")
    } else {
      if (ownDestructuringErrors) { this.checkExpressionErrors(refDestructuringErrors, true); }
    }
    if (oldParenAssign > -1) { refDestructuringErrors.parenthesizedAssign = oldParenAssign; }
    if (oldTrailingComma > -1) { refDestructuringErrors.trailingComma = oldTrailingComma; }
    return left
  };

  // Parse a ternary conditional (`?:`) operator.

  pp$5.parseMaybeConditional = function(forInit, refDestructuringErrors) {
    var startPos = this.start, startLoc = this.startLoc;
    var expr = this.parseExprOps(forInit, refDestructuringErrors);
    if (this.checkExpressionErrors(refDestructuringErrors)) { return expr }
    if (this.eat(types$1.question)) {
      var node = this.startNodeAt(startPos, startLoc);
      node.test = expr;
      node.consequent = this.parseMaybeAssign();
      this.expect(types$1.colon);
      node.alternate = this.parseMaybeAssign(forInit);
      return this.finishNode(node, "ConditionalExpression")
    }
    return expr
  };

  // Start the precedence parser.

  pp$5.parseExprOps = function(forInit, refDestructuringErrors) {
    var startPos = this.start, startLoc = this.startLoc;
    var expr = this.parseMaybeUnary(refDestructuringErrors, false, false, forInit);
    if (this.checkExpressionErrors(refDestructuringErrors)) { return expr }
    return expr.start === startPos && expr.type === "ArrowFunctionExpression" ? expr : this.parseExprOp(expr, startPos, startLoc, -1, forInit)
  };

  // Parse binary operators with the operator precedence parsing
  // algorithm. `left` is the left-hand side of the operator.
  // `minPrec` provides context that allows the function to stop and
  // defer further parser to one of its callers when it encounters an
  // operator that has a lower precedence than the set it is parsing.

  pp$5.parseExprOp = function(left, leftStartPos, leftStartLoc, minPrec, forInit) {
    var prec = this.type.binop;
    if (prec != null && (!forInit || this.type !== types$1._in)) {
      if (prec > minPrec) {
        var logical = this.type === types$1.logicalOR || this.type === types$1.logicalAND;
        var coalesce = this.type === types$1.coalesce;
        if (coalesce) {
          // Handle the precedence of `tt.coalesce` as equal to the range of logical expressions.
          // In other words, `node.right` shouldn't contain logical expressions in order to check the mixed error.
          prec = types$1.logicalAND.binop;
        }
        var op = this.value;
        this.next();
        var startPos = this.start, startLoc = this.startLoc;
        var right = this.parseExprOp(this.parseMaybeUnary(null, false, false, forInit), startPos, startLoc, prec, forInit);
        var node = this.buildBinary(leftStartPos, leftStartLoc, left, right, op, logical || coalesce);
        if ((logical && this.type === types$1.coalesce) || (coalesce && (this.type === types$1.logicalOR || this.type === types$1.logicalAND))) {
          this.raiseRecoverable(this.start, "Logical expressions and coalesce expressions cannot be mixed. Wrap either by parentheses");
        }
        return this.parseExprOp(node, leftStartPos, leftStartLoc, minPrec, forInit)
      }
    }
    return left
  };

  pp$5.buildBinary = function(startPos, startLoc, left, right, op, logical) {
    if (right.type === "PrivateIdentifier") { this.raise(right.start, "Private identifier can only be left side of binary expression"); }
    var node = this.startNodeAt(startPos, startLoc);
    node.left = left;
    node.operator = op;
    node.right = right;
    return this.finishNode(node, logical ? "LogicalExpression" : "BinaryExpression")
  };

  // Parse unary operators, both prefix and postfix.

  pp$5.parseMaybeUnary = function(refDestructuringErrors, sawUnary, incDec, forInit) {
    var startPos = this.start, startLoc = this.startLoc, expr;
    if (this.isContextual("await") && this.canAwait) {
      expr = this.parseAwait(forInit);
      sawUnary = true;
    } else if (this.type.prefix) {
      var node = this.startNode(), update = this.type === types$1.incDec;
      node.operator = this.value;
      node.prefix = true;
      this.next();
      node.argument = this.parseMaybeUnary(null, true, update, forInit);
      this.checkExpressionErrors(refDestructuringErrors, true);
      if (update) { this.checkLValSimple(node.argument); }
      else if (this.strict && node.operator === "delete" &&
               node.argument.type === "Identifier")
        { this.raiseRecoverable(node.start, "Deleting local variable in strict mode"); }
      else if (node.operator === "delete" && isPrivateFieldAccess(node.argument))
        { this.raiseRecoverable(node.start, "Private fields can not be deleted"); }
      else { sawUnary = true; }
      expr = this.finishNode(node, update ? "UpdateExpression" : "UnaryExpression");
    } else if (!sawUnary && this.type === types$1.privateId) {
      if (forInit || this.privateNameStack.length === 0) { this.unexpected(); }
      expr = this.parsePrivateIdent();
      // only could be private fields in 'in', such as #x in obj
      if (this.type !== types$1._in) { this.unexpected(); }
    } else {
      expr = this.parseExprSubscripts(refDestructuringErrors, forInit);
      if (this.checkExpressionErrors(refDestructuringErrors)) { return expr }
      while (this.type.postfix && !this.canInsertSemicolon()) {
        var node$1 = this.startNodeAt(startPos, startLoc);
        node$1.operator = this.value;
        node$1.prefix = false;
        node$1.argument = expr;
        this.checkLValSimple(expr);
        this.next();
        expr = this.finishNode(node$1, "UpdateExpression");
      }
    }

    if (!incDec && this.eat(types$1.starstar)) {
      if (sawUnary)
        { this.unexpected(this.lastTokStart); }
      else
        { return this.buildBinary(startPos, startLoc, expr, this.parseMaybeUnary(null, false, false, forInit), "**", false) }
    } else {
      return expr
    }
  };

  function isPrivateFieldAccess(node) {
    return (
      node.type === "MemberExpression" && node.property.type === "PrivateIdentifier" ||
      node.type === "ChainExpression" && isPrivateFieldAccess(node.expression)
    )
  }

  // Parse call, dot, and `[]`-subscript expressions.

  pp$5.parseExprSubscripts = function(refDestructuringErrors, forInit) {
    var startPos = this.start, startLoc = this.startLoc;
    var expr = this.parseExprAtom(refDestructuringErrors, forInit);
    if (expr.type === "ArrowFunctionExpression" && this.input.slice(this.lastTokStart, this.lastTokEnd) !== ")")
      { return expr }
    var result = this.parseSubscripts(expr, startPos, startLoc, false, forInit);
    if (refDestructuringErrors && result.type === "MemberExpression") {
      if (refDestructuringErrors.parenthesizedAssign >= result.start) { refDestructuringErrors.parenthesizedAssign = -1; }
      if (refDestructuringErrors.parenthesizedBind >= result.start) { refDestructuringErrors.parenthesizedBind = -1; }
      if (refDestructuringErrors.trailingComma >= result.start) { refDestructuringErrors.trailingComma = -1; }
    }
    return result
  };

  pp$5.parseSubscripts = function(base, startPos, startLoc, noCalls, forInit) {
    var maybeAsyncArrow = this.options.ecmaVersion >= 8 && base.type === "Identifier" && base.name === "async" &&
        this.lastTokEnd === base.end && !this.canInsertSemicolon() && base.end - base.start === 5 &&
        this.potentialArrowAt === base.start;
    var optionalChained = false;

    while (true) {
      var element = this.parseSubscript(base, startPos, startLoc, noCalls, maybeAsyncArrow, optionalChained, forInit);

      if (element.optional) { optionalChained = true; }
      if (element === base || element.type === "ArrowFunctionExpression") {
        if (optionalChained) {
          var chainNode = this.startNodeAt(startPos, startLoc);
          chainNode.expression = element;
          element = this.finishNode(chainNode, "ChainExpression");
        }
        return element
      }

      base = element;
    }
  };

  pp$5.parseSubscript = function(base, startPos, startLoc, noCalls, maybeAsyncArrow, optionalChained, forInit) {
    var optionalSupported = this.options.ecmaVersion >= 11;
    var optional = optionalSupported && this.eat(types$1.questionDot);
    if (noCalls && optional) { this.raise(this.lastTokStart, "Optional chaining cannot appear in the callee of new expressions"); }

    var computed = this.eat(types$1.bracketL);
    if (computed || (optional && this.type !== types$1.parenL && this.type !== types$1.backQuote) || this.eat(types$1.dot)) {
      var node = this.startNodeAt(startPos, startLoc);
      node.object = base;
      if (computed) {
        node.property = this.parseExpression();
        this.expect(types$1.bracketR);
      } else if (this.type === types$1.privateId && base.type !== "Super") {
        node.property = this.parsePrivateIdent();
      } else {
        node.property = this.parseIdent(this.options.allowReserved !== "never");
      }
      node.computed = !!computed;
      if (optionalSupported) {
        node.optional = optional;
      }
      base = this.finishNode(node, "MemberExpression");
    } else if (!noCalls && this.eat(types$1.parenL)) {
      var refDestructuringErrors = new DestructuringErrors, oldYieldPos = this.yieldPos, oldAwaitPos = this.awaitPos, oldAwaitIdentPos = this.awaitIdentPos;
      this.yieldPos = 0;
      this.awaitPos = 0;
      this.awaitIdentPos = 0;
      var exprList = this.parseExprList(types$1.parenR, this.options.ecmaVersion >= 8, false, refDestructuringErrors);
      if (maybeAsyncArrow && !optional && !this.canInsertSemicolon() && this.eat(types$1.arrow)) {
        this.checkPatternErrors(refDestructuringErrors, false);
        this.checkYieldAwaitInDefaultParams();
        if (this.awaitIdentPos > 0)
          { this.raise(this.awaitIdentPos, "Cannot use 'await' as identifier inside an async function"); }
        this.yieldPos = oldYieldPos;
        this.awaitPos = oldAwaitPos;
        this.awaitIdentPos = oldAwaitIdentPos;
        return this.parseArrowExpression(this.startNodeAt(startPos, startLoc), exprList, true, forInit)
      }
      this.checkExpressionErrors(refDestructuringErrors, true);
      this.yieldPos = oldYieldPos || this.yieldPos;
      this.awaitPos = oldAwaitPos || this.awaitPos;
      this.awaitIdentPos = oldAwaitIdentPos || this.awaitIdentPos;
      var node$1 = this.startNodeAt(startPos, startLoc);
      node$1.callee = base;
      node$1.arguments = exprList;
      if (optionalSupported) {
        node$1.optional = optional;
      }
      base = this.finishNode(node$1, "CallExpression");
    } else if (this.type === types$1.backQuote) {
      if (optional || optionalChained) {
        this.raise(this.start, "Optional chaining cannot appear in the tag of tagged template expressions");
      }
      var node$2 = this.startNodeAt(startPos, startLoc);
      node$2.tag = base;
      node$2.quasi = this.parseTemplate({isTagged: true});
      base = this.finishNode(node$2, "TaggedTemplateExpression");
    }
    return base
  };

  // Parse an atomic expression — either a single token that is an
  // expression, an expression started by a keyword like `function` or
  // `new`, or an expression wrapped in punctuation like `()`, `[]`,
  // or `{}`.

  pp$5.parseExprAtom = function(refDestructuringErrors, forInit) {
    // If a division operator appears in an expression position, the
    // tokenizer got confused, and we force it to read a regexp instead.
    if (this.type === types$1.slash) { this.readRegexp(); }

    var node, canBeArrow = this.potentialArrowAt === this.start;
    switch (this.type) {
    case types$1._super:
      if (!this.allowSuper)
        { this.raise(this.start, "'super' keyword outside a method"); }
      node = this.startNode();
      this.next();
      if (this.type === types$1.parenL && !this.allowDirectSuper)
        { this.raise(node.start, "super() call outside constructor of a subclass"); }
      // The `super` keyword can appear at below:
      // SuperProperty:
      //     super [ Expression ]
      //     super . IdentifierName
      // SuperCall:
      //     super ( Arguments )
      if (this.type !== types$1.dot && this.type !== types$1.bracketL && this.type !== types$1.parenL)
        { this.unexpected(); }
      return this.finishNode(node, "Super")

    case types$1._this:
      node = this.startNode();
      this.next();
      return this.finishNode(node, "ThisExpression")

    case types$1.name:
      var startPos = this.start, startLoc = this.startLoc, containsEsc = this.containsEsc;
      var id = this.parseIdent(false);
      if (this.options.ecmaVersion >= 8 && !containsEsc && id.name === "async" && !this.canInsertSemicolon() && this.eat(types$1._function)) {
        this.overrideContext(types.f_expr);
        return this.parseFunction(this.startNodeAt(startPos, startLoc), 0, false, true, forInit)
      }
      if (canBeArrow && !this.canInsertSemicolon()) {
        if (this.eat(types$1.arrow))
          { return this.parseArrowExpression(this.startNodeAt(startPos, startLoc), [id], false, forInit) }
        if (this.options.ecmaVersion >= 8 && id.name === "async" && this.type === types$1.name && !containsEsc &&
            (!this.potentialArrowInForAwait || this.value !== "of" || this.containsEsc)) {
          id = this.parseIdent(false);
          if (this.canInsertSemicolon() || !this.eat(types$1.arrow))
            { this.unexpected(); }
          return this.parseArrowExpression(this.startNodeAt(startPos, startLoc), [id], true, forInit)
        }
      }
      return id

    case types$1.regexp:
      var value = this.value;
      node = this.parseLiteral(value.value);
      node.regex = {pattern: value.pattern, flags: value.flags};
      return node

    case types$1.num: case types$1.string:
      return this.parseLiteral(this.value)

    case types$1._null: case types$1._true: case types$1._false:
      node = this.startNode();
      node.value = this.type === types$1._null ? null : this.type === types$1._true;
      node.raw = this.type.keyword;
      this.next();
      return this.finishNode(node, "Literal")

    case types$1.parenL:
      var start = this.start, expr = this.parseParenAndDistinguishExpression(canBeArrow, forInit);
      if (refDestructuringErrors) {
        if (refDestructuringErrors.parenthesizedAssign < 0 && !this.isSimpleAssignTarget(expr))
          { refDestructuringErrors.parenthesizedAssign = start; }
        if (refDestructuringErrors.parenthesizedBind < 0)
          { refDestructuringErrors.parenthesizedBind = start; }
      }
      return expr

    case types$1.bracketL:
      node = this.startNode();
      this.next();
      node.elements = this.parseExprList(types$1.bracketR, true, true, refDestructuringErrors);
      return this.finishNode(node, "ArrayExpression")

    case types$1.braceL:
      this.overrideContext(types.b_expr);
      return this.parseObj(false, refDestructuringErrors)

    case types$1._function:
      node = this.startNode();
      this.next();
      return this.parseFunction(node, 0)

    case types$1._class:
      return this.parseClass(this.startNode(), false)

    case types$1._new:
      return this.parseNew()

    case types$1.backQuote:
      return this.parseTemplate()

    case types$1._import:
      if (this.options.ecmaVersion >= 11) {
        return this.parseExprImport()
      } else {
        return this.unexpected()
      }

    default:
      this.unexpected();
    }
  };

  pp$5.parseExprImport = function() {
    var node = this.startNode();

    // Consume `import` as an identifier for `import.meta`.
    // Because `this.parseIdent(true)` doesn't check escape sequences, it needs the check of `this.containsEsc`.
    if (this.containsEsc) { this.raiseRecoverable(this.start, "Escape sequence in keyword import"); }
    var meta = this.parseIdent(true);

    switch (this.type) {
    case types$1.parenL:
      return this.parseDynamicImport(node)
    case types$1.dot:
      node.meta = meta;
      return this.parseImportMeta(node)
    default:
      this.unexpected();
    }
  };

  pp$5.parseDynamicImport = function(node) {
    this.next(); // skip `(`

    // Parse node.source.
    node.source = this.parseMaybeAssign();

    // Verify ending.
    if (!this.eat(types$1.parenR)) {
      var errorPos = this.start;
      if (this.eat(types$1.comma) && this.eat(types$1.parenR)) {
        this.raiseRecoverable(errorPos, "Trailing comma is not allowed in import()");
      } else {
        this.unexpected(errorPos);
      }
    }

    return this.finishNode(node, "ImportExpression")
  };

  pp$5.parseImportMeta = function(node) {
    this.next(); // skip `.`

    var containsEsc = this.containsEsc;
    node.property = this.parseIdent(true);

    if (node.property.name !== "meta")
      { this.raiseRecoverable(node.property.start, "The only valid meta property for import is 'import.meta'"); }
    if (containsEsc)
      { this.raiseRecoverable(node.start, "'import.meta' must not contain escaped characters"); }
    if (this.options.sourceType !== "module" && !this.options.allowImportExportEverywhere)
      { this.raiseRecoverable(node.start, "Cannot use 'import.meta' outside a module"); }

    return this.finishNode(node, "MetaProperty")
  };

  pp$5.parseLiteral = function(value) {
    var node = this.startNode();
    node.value = value;
    node.raw = this.input.slice(this.start, this.end);
    if (node.raw.charCodeAt(node.raw.length - 1) === 110) { node.bigint = node.raw.slice(0, -1).replace(/_/g, ""); }
    this.next();
    return this.finishNode(node, "Literal")
  };

  pp$5.parseParenExpression = function() {
    this.expect(types$1.parenL);
    var val = this.parseExpression();
    this.expect(types$1.parenR);
    return val
  };

  pp$5.parseParenAndDistinguishExpression = function(canBeArrow, forInit) {
    var startPos = this.start, startLoc = this.startLoc, val, allowTrailingComma = this.options.ecmaVersion >= 8;
    if (this.options.ecmaVersion >= 6) {
      this.next();

      var innerStartPos = this.start, innerStartLoc = this.startLoc;
      var exprList = [], first = true, lastIsComma = false;
      var refDestructuringErrors = new DestructuringErrors, oldYieldPos = this.yieldPos, oldAwaitPos = this.awaitPos, spreadStart;
      this.yieldPos = 0;
      this.awaitPos = 0;
      // Do not save awaitIdentPos to allow checking awaits nested in parameters
      while (this.type !== types$1.parenR) {
        first ? first = false : this.expect(types$1.comma);
        if (allowTrailingComma && this.afterTrailingComma(types$1.parenR, true)) {
          lastIsComma = true;
          break
        } else if (this.type === types$1.ellipsis) {
          spreadStart = this.start;
          exprList.push(this.parseParenItem(this.parseRestBinding()));
          if (this.type === types$1.comma) { this.raise(this.start, "Comma is not permitted after the rest element"); }
          break
        } else {
          exprList.push(this.parseMaybeAssign(false, refDestructuringErrors, this.parseParenItem));
        }
      }
      var innerEndPos = this.lastTokEnd, innerEndLoc = this.lastTokEndLoc;
      this.expect(types$1.parenR);

      if (canBeArrow && !this.canInsertSemicolon() && this.eat(types$1.arrow)) {
        this.checkPatternErrors(refDestructuringErrors, false);
        this.checkYieldAwaitInDefaultParams();
        this.yieldPos = oldYieldPos;
        this.awaitPos = oldAwaitPos;
        return this.parseParenArrowList(startPos, startLoc, exprList, forInit)
      }

      if (!exprList.length || lastIsComma) { this.unexpected(this.lastTokStart); }
      if (spreadStart) { this.unexpected(spreadStart); }
      this.checkExpressionErrors(refDestructuringErrors, true);
      this.yieldPos = oldYieldPos || this.yieldPos;
      this.awaitPos = oldAwaitPos || this.awaitPos;

      if (exprList.length > 1) {
        val = this.startNodeAt(innerStartPos, innerStartLoc);
        val.expressions = exprList;
        this.finishNodeAt(val, "SequenceExpression", innerEndPos, innerEndLoc);
      } else {
        val = exprList[0];
      }
    } else {
      val = this.parseParenExpression();
    }

    if (this.options.preserveParens) {
      var par = this.startNodeAt(startPos, startLoc);
      par.expression = val;
      return this.finishNode(par, "ParenthesizedExpression")
    } else {
      return val
    }
  };

  pp$5.parseParenItem = function(item) {
    return item
  };

  pp$5.parseParenArrowList = function(startPos, startLoc, exprList, forInit) {
    return this.parseArrowExpression(this.startNodeAt(startPos, startLoc), exprList, false, forInit)
  };

  // New's precedence is slightly tricky. It must allow its argument to
  // be a `[]` or dot subscript expression, but not a call — at least,
  // not without wrapping it in parentheses. Thus, it uses the noCalls
  // argument to parseSubscripts to prevent it from consuming the
  // argument list.

  var empty = [];

  pp$5.parseNew = function() {
    if (this.containsEsc) { this.raiseRecoverable(this.start, "Escape sequence in keyword new"); }
    var node = this.startNode();
    var meta = this.parseIdent(true);
    if (this.options.ecmaVersion >= 6 && this.eat(types$1.dot)) {
      node.meta = meta;
      var containsEsc = this.containsEsc;
      node.property = this.parseIdent(true);
      if (node.property.name !== "target")
        { this.raiseRecoverable(node.property.start, "The only valid meta property for new is 'new.target'"); }
      if (containsEsc)
        { this.raiseRecoverable(node.start, "'new.target' must not contain escaped characters"); }
      if (!this.allowNewDotTarget)
        { this.raiseRecoverable(node.start, "'new.target' can only be used in functions and class static block"); }
      return this.finishNode(node, "MetaProperty")
    }
    var startPos = this.start, startLoc = this.startLoc, isImport = this.type === types$1._import;
    node.callee = this.parseSubscripts(this.parseExprAtom(), startPos, startLoc, true, false);
    if (isImport && node.callee.type === "ImportExpression") {
      this.raise(startPos, "Cannot use new with import()");
    }
    if (this.eat(types$1.parenL)) { node.arguments = this.parseExprList(types$1.parenR, this.options.ecmaVersion >= 8, false); }
    else { node.arguments = empty; }
    return this.finishNode(node, "NewExpression")
  };

  // Parse template expression.

  pp$5.parseTemplateElement = function(ref) {
    var isTagged = ref.isTagged;

    var elem = this.startNode();
    if (this.type === types$1.invalidTemplate) {
      if (!isTagged) {
        this.raiseRecoverable(this.start, "Bad escape sequence in untagged template literal");
      }
      elem.value = {
        raw: this.value,
        cooked: null
      };
    } else {
      elem.value = {
        raw: this.input.slice(this.start, this.end).replace(/\r\n?/g, "\n"),
        cooked: this.value
      };
    }
    this.next();
    elem.tail = this.type === types$1.backQuote;
    return this.finishNode(elem, "TemplateElement")
  };

  pp$5.parseTemplate = function(ref) {
    if ( ref === void 0 ) ref = {};
    var isTagged = ref.isTagged; if ( isTagged === void 0 ) isTagged = false;

    var node = this.startNode();
    this.next();
    node.expressions = [];
    var curElt = this.parseTemplateElement({isTagged: isTagged});
    node.quasis = [curElt];
    while (!curElt.tail) {
      if (this.type === types$1.eof) { this.raise(this.pos, "Unterminated template literal"); }
      this.expect(types$1.dollarBraceL);
      node.expressions.push(this.parseExpression());
      this.expect(types$1.braceR);
      node.quasis.push(curElt = this.parseTemplateElement({isTagged: isTagged}));
    }
    this.next();
    return this.finishNode(node, "TemplateLiteral")
  };

  pp$5.isAsyncProp = function(prop) {
    return !prop.computed && prop.key.type === "Identifier" && prop.key.name === "async" &&
      (this.type === types$1.name || this.type === types$1.num || this.type === types$1.string || this.type === types$1.bracketL || this.type.keyword || (this.options.ecmaVersion >= 9 && this.type === types$1.star)) &&
      !lineBreak.test(this.input.slice(this.lastTokEnd, this.start))
  };

  // Parse an object literal or binding pattern.

  pp$5.parseObj = function(isPattern, refDestructuringErrors) {
    var node = this.startNode(), first = true, propHash = {};
    node.properties = [];
    this.next();
    while (!this.eat(types$1.braceR)) {
      if (!first) {
        this.expect(types$1.comma);
        if (this.options.ecmaVersion >= 5 && this.afterTrailingComma(types$1.braceR)) { break }
      } else { first = false; }

      var prop = this.parseProperty(isPattern, refDestructuringErrors);
      if (!isPattern) { this.checkPropClash(prop, propHash, refDestructuringErrors); }
      node.properties.push(prop);
    }
    return this.finishNode(node, isPattern ? "ObjectPattern" : "ObjectExpression")
  };

  pp$5.parseProperty = function(isPattern, refDestructuringErrors) {
    var prop = this.startNode(), isGenerator, isAsync, startPos, startLoc;
    if (this.options.ecmaVersion >= 9 && this.eat(types$1.ellipsis)) {
      if (isPattern) {
        prop.argument = this.parseIdent(false);
        if (this.type === types$1.comma) {
          this.raise(this.start, "Comma is not permitted after the rest element");
        }
        return this.finishNode(prop, "RestElement")
      }
      // Parse argument.
      prop.argument = this.parseMaybeAssign(false, refDestructuringErrors);
      // To disallow trailing comma via `this.toAssignable()`.
      if (this.type === types$1.comma && refDestructuringErrors && refDestructuringErrors.trailingComma < 0) {
        refDestructuringErrors.trailingComma = this.start;
      }
      // Finish
      return this.finishNode(prop, "SpreadElement")
    }
    if (this.options.ecmaVersion >= 6) {
      prop.method = false;
      prop.shorthand = false;
      if (isPattern || refDestructuringErrors) {
        startPos = this.start;
        startLoc = this.startLoc;
      }
      if (!isPattern)
        { isGenerator = this.eat(types$1.star); }
    }
    var containsEsc = this.containsEsc;
    this.parsePropertyName(prop);
    if (!isPattern && !containsEsc && this.options.ecmaVersion >= 8 && !isGenerator && this.isAsyncProp(prop)) {
      isAsync = true;
      isGenerator = this.options.ecmaVersion >= 9 && this.eat(types$1.star);
      this.parsePropertyName(prop);
    } else {
      isAsync = false;
    }
    this.parsePropertyValue(prop, isPattern, isGenerator, isAsync, startPos, startLoc, refDestructuringErrors, containsEsc);
    return this.finishNode(prop, "Property")
  };

  pp$5.parsePropertyValue = function(prop, isPattern, isGenerator, isAsync, startPos, startLoc, refDestructuringErrors, containsEsc) {
    if ((isGenerator || isAsync) && this.type === types$1.colon)
      { this.unexpected(); }

    if (this.eat(types$1.colon)) {
      prop.value = isPattern ? this.parseMaybeDefault(this.start, this.startLoc) : this.parseMaybeAssign(false, refDestructuringErrors);
      prop.kind = "init";
    } else if (this.options.ecmaVersion >= 6 && this.type === types$1.parenL) {
      if (isPattern) { this.unexpected(); }
      prop.kind = "init";
      prop.method = true;
      prop.value = this.parseMethod(isGenerator, isAsync);
    } else if (!isPattern && !containsEsc &&
               this.options.ecmaVersion >= 5 && !prop.computed && prop.key.type === "Identifier" &&
               (prop.key.name === "get" || prop.key.name === "set") &&
               (this.type !== types$1.comma && this.type !== types$1.braceR && this.type !== types$1.eq)) {
      if (isGenerator || isAsync) { this.unexpected(); }
      prop.kind = prop.key.name;
      this.parsePropertyName(prop);
      prop.value = this.parseMethod(false);
      var paramCount = prop.kind === "get" ? 0 : 1;
      if (prop.value.params.length !== paramCount) {
        var start = prop.value.start;
        if (prop.kind === "get")
          { this.raiseRecoverable(start, "getter should have no params"); }
        else
          { this.raiseRecoverable(start, "setter should have exactly one param"); }
      } else {
        if (prop.kind === "set" && prop.value.params[0].type === "RestElement")
          { this.raiseRecoverable(prop.value.params[0].start, "Setter cannot use rest params"); }
      }
    } else if (this.options.ecmaVersion >= 6 && !prop.computed && prop.key.type === "Identifier") {
      if (isGenerator || isAsync) { this.unexpected(); }
      this.checkUnreserved(prop.key);
      if (prop.key.name === "await" && !this.awaitIdentPos)
        { this.awaitIdentPos = startPos; }
      prop.kind = "init";
      if (isPattern) {
        prop.value = this.parseMaybeDefault(startPos, startLoc, this.copyNode(prop.key));
      } else if (this.type === types$1.eq && refDestructuringErrors) {
        if (refDestructuringErrors.shorthandAssign < 0)
          { refDestructuringErrors.shorthandAssign = this.start; }
        prop.value = this.parseMaybeDefault(startPos, startLoc, this.copyNode(prop.key));
      } else {
        prop.value = this.copyNode(prop.key);
      }
      prop.shorthand = true;
    } else { this.unexpected(); }
  };

  pp$5.parsePropertyName = function(prop) {
    if (this.options.ecmaVersion >= 6) {
      if (this.eat(types$1.bracketL)) {
        prop.computed = true;
        prop.key = this.parseMaybeAssign();
        this.expect(types$1.bracketR);
        return prop.key
      } else {
        prop.computed = false;
      }
    }
    return prop.key = this.type === types$1.num || this.type === types$1.string ? this.parseExprAtom() : this.parseIdent(this.options.allowReserved !== "never")
  };

  // Initialize empty function node.

  pp$5.initFunction = function(node) {
    node.id = null;
    if (this.options.ecmaVersion >= 6) { node.generator = node.expression = false; }
    if (this.options.ecmaVersion >= 8) { node.async = false; }
  };

  // Parse object or class method.

  pp$5.parseMethod = function(isGenerator, isAsync, allowDirectSuper) {
    var node = this.startNode(), oldYieldPos = this.yieldPos, oldAwaitPos = this.awaitPos, oldAwaitIdentPos = this.awaitIdentPos;

    this.initFunction(node);
    if (this.options.ecmaVersion >= 6)
      { node.generator = isGenerator; }
    if (this.options.ecmaVersion >= 8)
      { node.async = !!isAsync; }

    this.yieldPos = 0;
    this.awaitPos = 0;
    this.awaitIdentPos = 0;
    this.enterScope(functionFlags(isAsync, node.generator) | SCOPE_SUPER | (allowDirectSuper ? SCOPE_DIRECT_SUPER : 0));

    this.expect(types$1.parenL);
    node.params = this.parseBindingList(types$1.parenR, false, this.options.ecmaVersion >= 8);
    this.checkYieldAwaitInDefaultParams();
    this.parseFunctionBody(node, false, true, false);

    this.yieldPos = oldYieldPos;
    this.awaitPos = oldAwaitPos;
    this.awaitIdentPos = oldAwaitIdentPos;
    return this.finishNode(node, "FunctionExpression")
  };

  // Parse arrow function expression with given parameters.

  pp$5.parseArrowExpression = function(node, params, isAsync, forInit) {
    var oldYieldPos = this.yieldPos, oldAwaitPos = this.awaitPos, oldAwaitIdentPos = this.awaitIdentPos;

    this.enterScope(functionFlags(isAsync, false) | SCOPE_ARROW);
    this.initFunction(node);
    if (this.options.ecmaVersion >= 8) { node.async = !!isAsync; }

    this.yieldPos = 0;
    this.awaitPos = 0;
    this.awaitIdentPos = 0;

    node.params = this.toAssignableList(params, true);
    this.parseFunctionBody(node, true, false, forInit);

    this.yieldPos = oldYieldPos;
    this.awaitPos = oldAwaitPos;
    this.awaitIdentPos = oldAwaitIdentPos;
    return this.finishNode(node, "ArrowFunctionExpression")
  };

  // Parse function body and check parameters.

  pp$5.parseFunctionBody = function(node, isArrowFunction, isMethod, forInit) {
    var isExpression = isArrowFunction && this.type !== types$1.braceL;
    var oldStrict = this.strict, useStrict = false;

    if (isExpression) {
      node.body = this.parseMaybeAssign(forInit);
      node.expression = true;
      this.checkParams(node, false);
    } else {
      var nonSimple = this.options.ecmaVersion >= 7 && !this.isSimpleParamList(node.params);
      if (!oldStrict || nonSimple) {
        useStrict = this.strictDirective(this.end);
        // If this is a strict mode function, verify that argument names
        // are not repeated, and it does not try to bind the words `eval`
        // or `arguments`.
        if (useStrict && nonSimple)
          { this.raiseRecoverable(node.start, "Illegal 'use strict' directive in function with non-simple parameter list"); }
      }
      // Start a new scope with regard to labels and the `inFunction`
      // flag (restore them to their old value afterwards).
      var oldLabels = this.labels;
      this.labels = [];
      if (useStrict) { this.strict = true; }

      // Add the params to varDeclaredNames to ensure that an error is thrown
      // if a let/const declaration in the function clashes with one of the params.
      this.checkParams(node, !oldStrict && !useStrict && !isArrowFunction && !isMethod && this.isSimpleParamList(node.params));
      // Ensure the function name isn't a forbidden identifier in strict mode, e.g. 'eval'
      if (this.strict && node.id) { this.checkLValSimple(node.id, BIND_OUTSIDE); }
      node.body = this.parseBlock(false, undefined, useStrict && !oldStrict);
      node.expression = false;
      this.adaptDirectivePrologue(node.body.body);
      this.labels = oldLabels;
    }
    this.exitScope();
  };

  pp$5.isSimpleParamList = function(params) {
    for (var i = 0, list = params; i < list.length; i += 1)
      {
      var param = list[i];

      if (param.type !== "Identifier") { return false
    } }
    return true
  };

  // Checks function params for various disallowed patterns such as using "eval"
  // or "arguments" and duplicate parameters.

  pp$5.checkParams = function(node, allowDuplicates) {
    var nameHash = Object.create(null);
    for (var i = 0, list = node.params; i < list.length; i += 1)
      {
      var param = list[i];

      this.checkLValInnerPattern(param, BIND_VAR, allowDuplicates ? null : nameHash);
    }
  };

  // Parses a comma-separated list of expressions, and returns them as
  // an array. `close` is the token type that ends the list, and
  // `allowEmpty` can be turned on to allow subsequent commas with
  // nothing in between them to be parsed as `null` (which is needed
  // for array literals).

  pp$5.parseExprList = function(close, allowTrailingComma, allowEmpty, refDestructuringErrors) {
    var elts = [], first = true;
    while (!this.eat(close)) {
      if (!first) {
        this.expect(types$1.comma);
        if (allowTrailingComma && this.afterTrailingComma(close)) { break }
      } else { first = false; }

      var elt = (void 0);
      if (allowEmpty && this.type === types$1.comma)
        { elt = null; }
      else if (this.type === types$1.ellipsis) {
        elt = this.parseSpread(refDestructuringErrors);
        if (refDestructuringErrors && this.type === types$1.comma && refDestructuringErrors.trailingComma < 0)
          { refDestructuringErrors.trailingComma = this.start; }
      } else {
        elt = this.parseMaybeAssign(false, refDestructuringErrors);
      }
      elts.push(elt);
    }
    return elts
  };

  pp$5.checkUnreserved = function(ref) {
    var start = ref.start;
    var end = ref.end;
    var name = ref.name;

    if (this.inGenerator && name === "yield")
      { this.raiseRecoverable(start, "Cannot use 'yield' as identifier inside a generator"); }
    if (this.inAsync && name === "await")
      { this.raiseRecoverable(start, "Cannot use 'await' as identifier inside an async function"); }
    if (this.currentThisScope().inClassFieldInit && name === "arguments")
      { this.raiseRecoverable(start, "Cannot use 'arguments' in class field initializer"); }
    if (this.inClassStaticBlock && (name === "arguments" || name === "await"))
      { this.raise(start, ("Cannot use " + name + " in class static initialization block")); }
    if (this.keywords.test(name))
      { this.raise(start, ("Unexpected keyword '" + name + "'")); }
    if (this.options.ecmaVersion < 6 &&
      this.input.slice(start, end).indexOf("\\") !== -1) { return }
    var re = this.strict ? this.reservedWordsStrict : this.reservedWords;
    if (re.test(name)) {
      if (!this.inAsync && name === "await")
        { this.raiseRecoverable(start, "Cannot use keyword 'await' outside an async function"); }
      this.raiseRecoverable(start, ("The keyword '" + name + "' is reserved"));
    }
  };

  // Parse the next token as an identifier. If `liberal` is true (used
  // when parsing properties), it will also convert keywords into
  // identifiers.

  pp$5.parseIdent = function(liberal) {
    var node = this.startNode();
    if (this.type === types$1.name) {
      node.name = this.value;
    } else if (this.type.keyword) {
      node.name = this.type.keyword;

      // To fix https://github.com/acornjs/acorn/issues/575
      // `class` and `function` keywords push new context into this.context.
      // But there is no chance to pop the context if the keyword is consumed as an identifier such as a property name.
      // If the previous token is a dot, this does not apply because the context-managing code already ignored the keyword
      if ((node.name === "class" || node.name === "function") &&
          (this.lastTokEnd !== this.lastTokStart + 1 || this.input.charCodeAt(this.lastTokStart) !== 46)) {
        this.context.pop();
      }
    } else {
      this.unexpected();
    }
    this.next(!!liberal);
    this.finishNode(node, "Identifier");
    if (!liberal) {
      this.checkUnreserved(node);
      if (node.name === "await" && !this.awaitIdentPos)
        { this.awaitIdentPos = node.start; }
    }
    return node
  };

  pp$5.parsePrivateIdent = function() {
    var node = this.startNode();
    if (this.type === types$1.privateId) {
      node.name = this.value;
    } else {
      this.unexpected();
    }
    this.next();
    this.finishNode(node, "PrivateIdentifier");

    // For validating existence
    if (this.privateNameStack.length === 0) {
      this.raise(node.start, ("Private field '#" + (node.name) + "' must be declared in an enclosing class"));
    } else {
      this.privateNameStack[this.privateNameStack.length - 1].used.push(node);
    }

    return node
  };

  // Parses yield expression inside generator.

  pp$5.parseYield = function(forInit) {
    if (!this.yieldPos) { this.yieldPos = this.start; }

    var node = this.startNode();
    this.next();
    if (this.type === types$1.semi || this.canInsertSemicolon() || (this.type !== types$1.star && !this.type.startsExpr)) {
      node.delegate = false;
      node.argument = null;
    } else {
      node.delegate = this.eat(types$1.star);
      node.argument = this.parseMaybeAssign(forInit);
    }
    return this.finishNode(node, "YieldExpression")
  };

  pp$5.parseAwait = function(forInit) {
    if (!this.awaitPos) { this.awaitPos = this.start; }

    var node = this.startNode();
    this.next();
    node.argument = this.parseMaybeUnary(null, true, false, forInit);
    return this.finishNode(node, "AwaitExpression")
  };

  var pp$4 = Parser.prototype;

  // This function is used to raise exceptions on parse errors. It
  // takes an offset integer (into the current `input`) to indicate
  // the location of the error, attaches the position to the end
  // of the error message, and then raises a `SyntaxError` with that
  // message.

  pp$4.raise = function(pos, message) {
    var loc = getLineInfo(this.input, pos);
    message += " (" + loc.line + ":" + loc.column + ")";
    var err = new SyntaxError(message);
    err.pos = pos; err.loc = loc; err.raisedAt = this.pos;
    throw err
  };

  pp$4.raiseRecoverable = pp$4.raise;

  pp$4.curPosition = function() {
    if (this.options.locations) {
      return new Position(this.curLine, this.pos - this.lineStart)
    }
  };

  var pp$3 = Parser.prototype;

  var Scope = function Scope(flags) {
    this.flags = flags;
    // A list of var-declared names in the current lexical scope
    this.var = [];
    // A list of lexically-declared names in the current lexical scope
    this.lexical = [];
    // A list of lexically-declared FunctionDeclaration names in the current lexical scope
    this.functions = [];
    // A switch to disallow the identifier reference 'arguments'
    this.inClassFieldInit = false;
  };

  // The functions in this module keep track of declared variables in the current scope in order to detect duplicate variable names.

  pp$3.enterScope = function(flags) {
    this.scopeStack.push(new Scope(flags));
  };

  pp$3.exitScope = function() {
    this.scopeStack.pop();
  };

  // The spec says:
  // > At the top level of a function, or script, function declarations are
  // > treated like var declarations rather than like lexical declarations.
  pp$3.treatFunctionsAsVarInScope = function(scope) {
    return (scope.flags & SCOPE_FUNCTION) || !this.inModule && (scope.flags & SCOPE_TOP)
  };

  pp$3.declareName = function(name, bindingType, pos) {
    var redeclared = false;
    if (bindingType === BIND_LEXICAL) {
      var scope = this.currentScope();
      redeclared = scope.lexical.indexOf(name) > -1 || scope.functions.indexOf(name) > -1 || scope.var.indexOf(name) > -1;
      scope.lexical.push(name);
      if (this.inModule && (scope.flags & SCOPE_TOP))
        { delete this.undefinedExports[name]; }
    } else if (bindingType === BIND_SIMPLE_CATCH) {
      var scope$1 = this.currentScope();
      scope$1.lexical.push(name);
    } else if (bindingType === BIND_FUNCTION) {
      var scope$2 = this.currentScope();
      if (this.treatFunctionsAsVar)
        { redeclared = scope$2.lexical.indexOf(name) > -1; }
      else
        { redeclared = scope$2.lexical.indexOf(name) > -1 || scope$2.var.indexOf(name) > -1; }
      scope$2.functions.push(name);
    } else {
      for (var i = this.scopeStack.length - 1; i >= 0; --i) {
        var scope$3 = this.scopeStack[i];
        if (scope$3.lexical.indexOf(name) > -1 && !((scope$3.flags & SCOPE_SIMPLE_CATCH) && scope$3.lexical[0] === name) ||
            !this.treatFunctionsAsVarInScope(scope$3) && scope$3.functions.indexOf(name) > -1) {
          redeclared = true;
          break
        }
        scope$3.var.push(name);
        if (this.inModule && (scope$3.flags & SCOPE_TOP))
          { delete this.undefinedExports[name]; }
        if (scope$3.flags & SCOPE_VAR) { break }
      }
    }
    if (redeclared) { this.raiseRecoverable(pos, ("Identifier '" + name + "' has already been declared")); }
  };

  pp$3.checkLocalExport = function(id) {
    // scope.functions must be empty as Module code is always strict.
    if (this.scopeStack[0].lexical.indexOf(id.name) === -1 &&
        this.scopeStack[0].var.indexOf(id.name) === -1) {
      this.undefinedExports[id.name] = id;
    }
  };

  pp$3.currentScope = function() {
    return this.scopeStack[this.scopeStack.length - 1]
  };

  pp$3.currentVarScope = function() {
    for (var i = this.scopeStack.length - 1;; i--) {
      var scope = this.scopeStack[i];
      if (scope.flags & SCOPE_VAR) { return scope }
    }
  };

  // Could be useful for `this`, `new.target`, `super()`, `super.property`, and `super[property]`.
  pp$3.currentThisScope = function() {
    for (var i = this.scopeStack.length - 1;; i--) {
      var scope = this.scopeStack[i];
      if (scope.flags & SCOPE_VAR && !(scope.flags & SCOPE_ARROW)) { return scope }
    }
  };

  var Node = function Node(parser, pos, loc) {
    this.type = "";
    this.start = pos;
    this.end = 0;
    if (parser.options.locations)
      { this.loc = new SourceLocation$1(parser, loc); }
    if (parser.options.directSourceFile)
      { this.sourceFile = parser.options.directSourceFile; }
    if (parser.options.ranges)
      { this.range = [pos, 0]; }
  };

  // Start an AST node, attaching a start offset.

  var pp$2 = Parser.prototype;

  pp$2.startNode = function() {
    return new Node(this, this.start, this.startLoc)
  };

  pp$2.startNodeAt = function(pos, loc) {
    return new Node(this, pos, loc)
  };

  // Finish an AST node, adding `type` and `end` properties.

  function finishNodeAt(node, type, pos, loc) {
    node.type = type;
    node.end = pos;
    if (this.options.locations)
      { node.loc.end = loc; }
    if (this.options.ranges)
      { node.range[1] = pos; }
    return node
  }

  pp$2.finishNode = function(node, type) {
    return finishNodeAt.call(this, node, type, this.lastTokEnd, this.lastTokEndLoc)
  };

  // Finish node at given position

  pp$2.finishNodeAt = function(node, type, pos, loc) {
    return finishNodeAt.call(this, node, type, pos, loc)
  };

  pp$2.copyNode = function(node) {
    var newNode = new Node(this, node.start, this.startLoc);
    for (var prop in node) { newNode[prop] = node[prop]; }
    return newNode
  };

  // This file contains Unicode properties extracted from the ECMAScript specification.
  // The lists are extracted like so:
  // $$('#table-binary-unicode-properties > figure > table > tbody > tr > td:nth-child(1) code').map(el => el.innerText)

  // #table-binary-unicode-properties
  var ecma9BinaryProperties = "ASCII ASCII_Hex_Digit AHex Alphabetic Alpha Any Assigned Bidi_Control Bidi_C Bidi_Mirrored Bidi_M Case_Ignorable CI Cased Changes_When_Casefolded CWCF Changes_When_Casemapped CWCM Changes_When_Lowercased CWL Changes_When_NFKC_Casefolded CWKCF Changes_When_Titlecased CWT Changes_When_Uppercased CWU Dash Default_Ignorable_Code_Point DI Deprecated Dep Diacritic Dia Emoji Emoji_Component Emoji_Modifier Emoji_Modifier_Base Emoji_Presentation Extender Ext Grapheme_Base Gr_Base Grapheme_Extend Gr_Ext Hex_Digit Hex IDS_Binary_Operator IDSB IDS_Trinary_Operator IDST ID_Continue IDC ID_Start IDS Ideographic Ideo Join_Control Join_C Logical_Order_Exception LOE Lowercase Lower Math Noncharacter_Code_Point NChar Pattern_Syntax Pat_Syn Pattern_White_Space Pat_WS Quotation_Mark QMark Radical Regional_Indicator RI Sentence_Terminal STerm Soft_Dotted SD Terminal_Punctuation Term Unified_Ideograph UIdeo Uppercase Upper Variation_Selector VS White_Space space XID_Continue XIDC XID_Start XIDS";
  var ecma10BinaryProperties = ecma9BinaryProperties + " Extended_Pictographic";
  var ecma11BinaryProperties = ecma10BinaryProperties;
  var ecma12BinaryProperties = ecma11BinaryProperties + " EBase EComp EMod EPres ExtPict";
  var ecma13BinaryProperties = ecma12BinaryProperties;
  var ecma14BinaryProperties = ecma13BinaryProperties;

  var unicodeBinaryProperties = {
    9: ecma9BinaryProperties,
    10: ecma10BinaryProperties,
    11: ecma11BinaryProperties,
    12: ecma12BinaryProperties,
    13: ecma13BinaryProperties,
    14: ecma14BinaryProperties
  };

  // #table-unicode-general-category-values
  var unicodeGeneralCategoryValues = "Cased_Letter LC Close_Punctuation Pe Connector_Punctuation Pc Control Cc cntrl Currency_Symbol Sc Dash_Punctuation Pd Decimal_Number Nd digit Enclosing_Mark Me Final_Punctuation Pf Format Cf Initial_Punctuation Pi Letter L Letter_Number Nl Line_Separator Zl Lowercase_Letter Ll Mark M Combining_Mark Math_Symbol Sm Modifier_Letter Lm Modifier_Symbol Sk Nonspacing_Mark Mn Number N Open_Punctuation Ps Other C Other_Letter Lo Other_Number No Other_Punctuation Po Other_Symbol So Paragraph_Separator Zp Private_Use Co Punctuation P punct Separator Z Space_Separator Zs Spacing_Mark Mc Surrogate Cs Symbol S Titlecase_Letter Lt Unassigned Cn Uppercase_Letter Lu";

  // #table-unicode-script-values
  var ecma9ScriptValues = "Adlam Adlm Ahom Anatolian_Hieroglyphs Hluw Arabic Arab Armenian Armn Avestan Avst Balinese Bali Bamum Bamu Bassa_Vah Bass Batak Batk Bengali Beng Bhaiksuki Bhks Bopomofo Bopo Brahmi Brah Braille Brai Buginese Bugi Buhid Buhd Canadian_Aboriginal Cans Carian Cari Caucasian_Albanian Aghb Chakma Cakm Cham Cham Cherokee Cher Common Zyyy Coptic Copt Qaac Cuneiform Xsux Cypriot Cprt Cyrillic Cyrl Deseret Dsrt Devanagari Deva Duployan Dupl Egyptian_Hieroglyphs Egyp Elbasan Elba Ethiopic Ethi Georgian Geor Glagolitic Glag Gothic Goth Grantha Gran Greek Grek Gujarati Gujr Gurmukhi Guru Han Hani Hangul Hang Hanunoo Hano Hatran Hatr Hebrew Hebr Hiragana Hira Imperial_Aramaic Armi Inherited Zinh Qaai Inscriptional_Pahlavi Phli Inscriptional_Parthian Prti Javanese Java Kaithi Kthi Kannada Knda Katakana Kana Kayah_Li Kali Kharoshthi Khar Khmer Khmr Khojki Khoj Khudawadi Sind Lao Laoo Latin Latn Lepcha Lepc Limbu Limb Linear_A Lina Linear_B Linb Lisu Lisu Lycian Lyci Lydian Lydi Mahajani Mahj Malayalam Mlym Mandaic Mand Manichaean Mani Marchen Marc Masaram_Gondi Gonm Meetei_Mayek Mtei Mende_Kikakui Mend Meroitic_Cursive Merc Meroitic_Hieroglyphs Mero Miao Plrd Modi Mongolian Mong Mro Mroo Multani Mult Myanmar Mymr Nabataean Nbat New_Tai_Lue Talu Newa Newa Nko Nkoo Nushu Nshu Ogham Ogam Ol_Chiki Olck Old_Hungarian Hung Old_Italic Ital Old_North_Arabian Narb Old_Permic Perm Old_Persian Xpeo Old_South_Arabian Sarb Old_Turkic Orkh Oriya Orya Osage Osge Osmanya Osma Pahawh_Hmong Hmng Palmyrene Palm Pau_Cin_Hau Pauc Phags_Pa Phag Phoenician Phnx Psalter_Pahlavi Phlp Rejang Rjng Runic Runr Samaritan Samr Saurashtra Saur Sharada Shrd Shavian Shaw Siddham Sidd SignWriting Sgnw Sinhala Sinh Sora_Sompeng Sora Soyombo Soyo Sundanese Sund Syloti_Nagri Sylo Syriac Syrc Tagalog Tglg Tagbanwa Tagb Tai_Le Tale Tai_Tham Lana Tai_Viet Tavt Takri Takr Tamil Taml Tangut Tang Telugu Telu Thaana Thaa Thai Thai Tibetan Tibt Tifinagh Tfng Tirhuta Tirh Ugaritic Ugar Vai Vaii Warang_Citi Wara Yi Yiii Zanabazar_Square Zanb";
  var ecma10ScriptValues = ecma9ScriptValues + " Dogra Dogr Gunjala_Gondi Gong Hanifi_Rohingya Rohg Makasar Maka Medefaidrin Medf Old_Sogdian Sogo Sogdian Sogd";
  var ecma11ScriptValues = ecma10ScriptValues + " Elymaic Elym Nandinagari Nand Nyiakeng_Puachue_Hmong Hmnp Wancho Wcho";
  var ecma12ScriptValues = ecma11ScriptValues + " Chorasmian Chrs Diak Dives_Akuru Khitan_Small_Script Kits Yezi Yezidi";
  var ecma13ScriptValues = ecma12ScriptValues + " Cypro_Minoan Cpmn Old_Uyghur Ougr Tangsa Tnsa Toto Vithkuqi Vith";
  var ecma14ScriptValues = ecma13ScriptValues + " Kawi Nag_Mundari Nagm";

  var unicodeScriptValues = {
    9: ecma9ScriptValues,
    10: ecma10ScriptValues,
    11: ecma11ScriptValues,
    12: ecma12ScriptValues,
    13: ecma13ScriptValues,
    14: ecma14ScriptValues
  };

  var data = {};
  function buildUnicodeData(ecmaVersion) {
    var d = data[ecmaVersion] = {
      binary: wordsRegexp(unicodeBinaryProperties[ecmaVersion] + " " + unicodeGeneralCategoryValues),
      nonBinary: {
        General_Category: wordsRegexp(unicodeGeneralCategoryValues),
        Script: wordsRegexp(unicodeScriptValues[ecmaVersion])
      }
    };
    d.nonBinary.Script_Extensions = d.nonBinary.Script;

    d.nonBinary.gc = d.nonBinary.General_Category;
    d.nonBinary.sc = d.nonBinary.Script;
    d.nonBinary.scx = d.nonBinary.Script_Extensions;
  }

  for (var i = 0, list = [9, 10, 11, 12, 13, 14]; i < list.length; i += 1) {
    var ecmaVersion = list[i];

    buildUnicodeData(ecmaVersion);
  }

  var pp$1 = Parser.prototype;

  var RegExpValidationState = function RegExpValidationState(parser) {
    this.parser = parser;
    this.validFlags = "gim" + (parser.options.ecmaVersion >= 6 ? "uy" : "") + (parser.options.ecmaVersion >= 9 ? "s" : "") + (parser.options.ecmaVersion >= 13 ? "d" : "");
    this.unicodeProperties = data[parser.options.ecmaVersion >= 14 ? 14 : parser.options.ecmaVersion];
    this.source = "";
    this.flags = "";
    this.start = 0;
    this.switchU = false;
    this.switchN = false;
    this.pos = 0;
    this.lastIntValue = 0;
    this.lastStringValue = "";
    this.lastAssertionIsQuantifiable = false;
    this.numCapturingParens = 0;
    this.maxBackReference = 0;
    this.groupNames = [];
    this.backReferenceNames = [];
  };

  RegExpValidationState.prototype.reset = function reset (start, pattern, flags) {
    var unicode = flags.indexOf("u") !== -1;
    this.start = start | 0;
    this.source = pattern + "";
    this.flags = flags;
    this.switchU = unicode && this.parser.options.ecmaVersion >= 6;
    this.switchN = unicode && this.parser.options.ecmaVersion >= 9;
  };

  RegExpValidationState.prototype.raise = function raise (message) {
    this.parser.raiseRecoverable(this.start, ("Invalid regular expression: /" + (this.source) + "/: " + message));
  };

  // If u flag is given, this returns the code point at the index (it combines a surrogate pair).
  // Otherwise, this returns the code unit of the index (can be a part of a surrogate pair).
  RegExpValidationState.prototype.at = function at (i, forceU) {
      if ( forceU === void 0 ) forceU = false;

    var s = this.source;
    var l = s.length;
    if (i >= l) {
      return -1
    }
    var c = s.charCodeAt(i);
    if (!(forceU || this.switchU) || c <= 0xD7FF || c >= 0xE000 || i + 1 >= l) {
      return c
    }
    var next = s.charCodeAt(i + 1);
    return next >= 0xDC00 && next <= 0xDFFF ? (c << 10) + next - 0x35FDC00 : c
  };

  RegExpValidationState.prototype.nextIndex = function nextIndex (i, forceU) {
      if ( forceU === void 0 ) forceU = false;

    var s = this.source;
    var l = s.length;
    if (i >= l) {
      return l
    }
    var c = s.charCodeAt(i), next;
    if (!(forceU || this.switchU) || c <= 0xD7FF || c >= 0xE000 || i + 1 >= l ||
        (next = s.charCodeAt(i + 1)) < 0xDC00 || next > 0xDFFF) {
      return i + 1
    }
    return i + 2
  };

  RegExpValidationState.prototype.current = function current (forceU) {
      if ( forceU === void 0 ) forceU = false;

    return this.at(this.pos, forceU)
  };

  RegExpValidationState.prototype.lookahead = function lookahead (forceU) {
      if ( forceU === void 0 ) forceU = false;

    return this.at(this.nextIndex(this.pos, forceU), forceU)
  };

  RegExpValidationState.prototype.advance = function advance (forceU) {
      if ( forceU === void 0 ) forceU = false;

    this.pos = this.nextIndex(this.pos, forceU);
  };

  RegExpValidationState.prototype.eat = function eat (ch, forceU) {
      if ( forceU === void 0 ) forceU = false;

    if (this.current(forceU) === ch) {
      this.advance(forceU);
      return true
    }
    return false
  };

  /**
   * Validate the flags part of a given RegExpLiteral.
   *
   * @param {RegExpValidationState} state The state to validate RegExp.
   * @returns {void}
   */
  pp$1.validateRegExpFlags = function(state) {
    var validFlags = state.validFlags;
    var flags = state.flags;

    for (var i = 0; i < flags.length; i++) {
      var flag = flags.charAt(i);
      if (validFlags.indexOf(flag) === -1) {
        this.raise(state.start, "Invalid regular expression flag");
      }
      if (flags.indexOf(flag, i + 1) > -1) {
        this.raise(state.start, "Duplicate regular expression flag");
      }
    }
  };

  /**
   * Validate the pattern part of a given RegExpLiteral.
   *
   * @param {RegExpValidationState} state The state to validate RegExp.
   * @returns {void}
   */
  pp$1.validateRegExpPattern = function(state) {
    this.regexp_pattern(state);

    // The goal symbol for the parse is |Pattern[~U, ~N]|. If the result of
    // parsing contains a |GroupName|, reparse with the goal symbol
    // |Pattern[~U, +N]| and use this result instead. Throw a *SyntaxError*
    // exception if _P_ did not conform to the grammar, if any elements of _P_
    // were not matched by the parse, or if any Early Error conditions exist.
    if (!state.switchN && this.options.ecmaVersion >= 9 && state.groupNames.length > 0) {
      state.switchN = true;
      this.regexp_pattern(state);
    }
  };

  // https://www.ecma-international.org/ecma-262/8.0/#prod-Pattern
  pp$1.regexp_pattern = function(state) {
    state.pos = 0;
    state.lastIntValue = 0;
    state.lastStringValue = "";
    state.lastAssertionIsQuantifiable = false;
    state.numCapturingParens = 0;
    state.maxBackReference = 0;
    state.groupNames.length = 0;
    state.backReferenceNames.length = 0;

    this.regexp_disjunction(state);

    if (state.pos !== state.source.length) {
      // Make the same messages as V8.
      if (state.eat(0x29 /* ) */)) {
        state.raise("Unmatched ')'");
      }
      if (state.eat(0x5D /* ] */) || state.eat(0x7D /* } */)) {
        state.raise("Lone quantifier brackets");
      }
    }
    if (state.maxBackReference > state.numCapturingParens) {
      state.raise("Invalid escape");
    }
    for (var i = 0, list = state.backReferenceNames; i < list.length; i += 1) {
      var name = list[i];

      if (state.groupNames.indexOf(name) === -1) {
        state.raise("Invalid named capture referenced");
      }
    }
  };

  // https://www.ecma-international.org/ecma-262/8.0/#prod-Disjunction
  pp$1.regexp_disjunction = function(state) {
    this.regexp_alternative(state);
    while (state.eat(0x7C /* | */)) {
      this.regexp_alternative(state);
    }

    // Make the same message as V8.
    if (this.regexp_eatQuantifier(state, true)) {
      state.raise("Nothing to repeat");
    }
    if (state.eat(0x7B /* { */)) {
      state.raise("Lone quantifier brackets");
    }
  };

  // https://www.ecma-international.org/ecma-262/8.0/#prod-Alternative
  pp$1.regexp_alternative = function(state) {
    while (state.pos < state.source.length && this.regexp_eatTerm(state))
      { }
  };

  // https://www.ecma-international.org/ecma-262/8.0/#prod-annexB-Term
  pp$1.regexp_eatTerm = function(state) {
    if (this.regexp_eatAssertion(state)) {
      // Handle `QuantifiableAssertion Quantifier` alternative.
      // `state.lastAssertionIsQuantifiable` is true if the last eaten Assertion
      // is a QuantifiableAssertion.
      if (state.lastAssertionIsQuantifiable && this.regexp_eatQuantifier(state)) {
        // Make the same message as V8.
        if (state.switchU) {
          state.raise("Invalid quantifier");
        }
      }
      return true
    }

    if (state.switchU ? this.regexp_eatAtom(state) : this.regexp_eatExtendedAtom(state)) {
      this.regexp_eatQuantifier(state);
      return true
    }

    return false
  };

  // https://www.ecma-international.org/ecma-262/8.0/#prod-annexB-Assertion
  pp$1.regexp_eatAssertion = function(state) {
    var start = state.pos;
    state.lastAssertionIsQuantifiable = false;

    // ^, $
    if (state.eat(0x5E /* ^ */) || state.eat(0x24 /* $ */)) {
      return true
    }

    // \b \B
    if (state.eat(0x5C /* \ */)) {
      if (state.eat(0x42 /* B */) || state.eat(0x62 /* b */)) {
        return true
      }
      state.pos = start;
    }

    // Lookahead / Lookbehind
    if (state.eat(0x28 /* ( */) && state.eat(0x3F /* ? */)) {
      var lookbehind = false;
      if (this.options.ecmaVersion >= 9) {
        lookbehind = state.eat(0x3C /* < */);
      }
      if (state.eat(0x3D /* = */) || state.eat(0x21 /* ! */)) {
        this.regexp_disjunction(state);
        if (!state.eat(0x29 /* ) */)) {
          state.raise("Unterminated group");
        }
        state.lastAssertionIsQuantifiable = !lookbehind;
        return true
      }
    }

    state.pos = start;
    return false
  };

  // https://www.ecma-international.org/ecma-262/8.0/#prod-Quantifier
  pp$1.regexp_eatQuantifier = function(state, noError) {
    if ( noError === void 0 ) noError = false;

    if (this.regexp_eatQuantifierPrefix(state, noError)) {
      state.eat(0x3F /* ? */);
      return true
    }
    return false
  };

  // https://www.ecma-international.org/ecma-262/8.0/#prod-QuantifierPrefix
  pp$1.regexp_eatQuantifierPrefix = function(state, noError) {
    return (
      state.eat(0x2A /* * */) ||
      state.eat(0x2B /* + */) ||
      state.eat(0x3F /* ? */) ||
      this.regexp_eatBracedQuantifier(state, noError)
    )
  };
  pp$1.regexp_eatBracedQuantifier = function(state, noError) {
    var start = state.pos;
    if (state.eat(0x7B /* { */)) {
      var min = 0, max = -1;
      if (this.regexp_eatDecimalDigits(state)) {
        min = state.lastIntValue;
        if (state.eat(0x2C /* , */) && this.regexp_eatDecimalDigits(state)) {
          max = state.lastIntValue;
        }
        if (state.eat(0x7D /* } */)) {
          // SyntaxError in https://www.ecma-international.org/ecma-262/8.0/#sec-term
          if (max !== -1 && max < min && !noError) {
            state.raise("numbers out of order in {} quantifier");
          }
          return true
        }
      }
      if (state.switchU && !noError) {
        state.raise("Incomplete quantifier");
      }
      state.pos = start;
    }
    return false
  };

  // https://www.ecma-international.org/ecma-262/8.0/#prod-Atom
  pp$1.regexp_eatAtom = function(state) {
    return (
      this.regexp_eatPatternCharacters(state) ||
      state.eat(0x2E /* . */) ||
      this.regexp_eatReverseSolidusAtomEscape(state) ||
      this.regexp_eatCharacterClass(state) ||
      this.regexp_eatUncapturingGroup(state) ||
      this.regexp_eatCapturingGroup(state)
    )
  };
  pp$1.regexp_eatReverseSolidusAtomEscape = function(state) {
    var start = state.pos;
    if (state.eat(0x5C /* \ */)) {
      if (this.regexp_eatAtomEscape(state)) {
        return true
      }
      state.pos = start;
    }
    return false
  };
  pp$1.regexp_eatUncapturingGroup = function(state) {
    var start = state.pos;
    if (state.eat(0x28 /* ( */)) {
      if (state.eat(0x3F /* ? */) && state.eat(0x3A /* : */)) {
        this.regexp_disjunction(state);
        if (state.eat(0x29 /* ) */)) {
          return true
        }
        state.raise("Unterminated group");
      }
      state.pos = start;
    }
    return false
  };
  pp$1.regexp_eatCapturingGroup = function(state) {
    if (state.eat(0x28 /* ( */)) {
      if (this.options.ecmaVersion >= 9) {
        this.regexp_groupSpecifier(state);
      } else if (state.current() === 0x3F /* ? */) {
        state.raise("Invalid group");
      }
      this.regexp_disjunction(state);
      if (state.eat(0x29 /* ) */)) {
        state.numCapturingParens += 1;
        return true
      }
      state.raise("Unterminated group");
    }
    return false
  };

  // https://www.ecma-international.org/ecma-262/8.0/#prod-annexB-ExtendedAtom
  pp$1.regexp_eatExtendedAtom = function(state) {
    return (
      state.eat(0x2E /* . */) ||
      this.regexp_eatReverseSolidusAtomEscape(state) ||
      this.regexp_eatCharacterClass(state) ||
      this.regexp_eatUncapturingGroup(state) ||
      this.regexp_eatCapturingGroup(state) ||
      this.regexp_eatInvalidBracedQuantifier(state) ||
      this.regexp_eatExtendedPatternCharacter(state)
    )
  };

  // https://www.ecma-international.org/ecma-262/8.0/#prod-annexB-InvalidBracedQuantifier
  pp$1.regexp_eatInvalidBracedQuantifier = function(state) {
    if (this.regexp_eatBracedQuantifier(state, true)) {
      state.raise("Nothing to repeat");
    }
    return false
  };

  // https://www.ecma-international.org/ecma-262/8.0/#prod-SyntaxCharacter
  pp$1.regexp_eatSyntaxCharacter = function(state) {
    var ch = state.current();
    if (isSyntaxCharacter(ch)) {
      state.lastIntValue = ch;
      state.advance();
      return true
    }
    return false
  };
  function isSyntaxCharacter(ch) {
    return (
      ch === 0x24 /* $ */ ||
      ch >= 0x28 /* ( */ && ch <= 0x2B /* + */ ||
      ch === 0x2E /* . */ ||
      ch === 0x3F /* ? */ ||
      ch >= 0x5B /* [ */ && ch <= 0x5E /* ^ */ ||
      ch >= 0x7B /* { */ && ch <= 0x7D /* } */
    )
  }

  // https://www.ecma-international.org/ecma-262/8.0/#prod-PatternCharacter
  // But eat eager.
  pp$1.regexp_eatPatternCharacters = function(state) {
    var start = state.pos;
    var ch = 0;
    while ((ch = state.current()) !== -1 && !isSyntaxCharacter(ch)) {
      state.advance();
    }
    return state.pos !== start
  };

  // https://www.ecma-international.org/ecma-262/8.0/#prod-annexB-ExtendedPatternCharacter
  pp$1.regexp_eatExtendedPatternCharacter = function(state) {
    var ch = state.current();
    if (
      ch !== -1 &&
      ch !== 0x24 /* $ */ &&
      !(ch >= 0x28 /* ( */ && ch <= 0x2B /* + */) &&
      ch !== 0x2E /* . */ &&
      ch !== 0x3F /* ? */ &&
      ch !== 0x5B /* [ */ &&
      ch !== 0x5E /* ^ */ &&
      ch !== 0x7C /* | */
    ) {
      state.advance();
      return true
    }
    return false
  };

  // GroupSpecifier ::
  //   [empty]
  //   `?` GroupName
  pp$1.regexp_groupSpecifier = function(state) {
    if (state.eat(0x3F /* ? */)) {
      if (this.regexp_eatGroupName(state)) {
        if (state.groupNames.indexOf(state.lastStringValue) !== -1) {
          state.raise("Duplicate capture group name");
        }
        state.groupNames.push(state.lastStringValue);
        return
      }
      state.raise("Invalid group");
    }
  };

  // GroupName ::
  //   `<` RegExpIdentifierName `>`
  // Note: this updates `state.lastStringValue` property with the eaten name.
  pp$1.regexp_eatGroupName = function(state) {
    state.lastStringValue = "";
    if (state.eat(0x3C /* < */)) {
      if (this.regexp_eatRegExpIdentifierName(state) && state.eat(0x3E /* > */)) {
        return true
      }
      state.raise("Invalid capture group name");
    }
    return false
  };

  // RegExpIdentifierName ::
  //   RegExpIdentifierStart
  //   RegExpIdentifierName RegExpIdentifierPart
  // Note: this updates `state.lastStringValue` property with the eaten name.
  pp$1.regexp_eatRegExpIdentifierName = function(state) {
    state.lastStringValue = "";
    if (this.regexp_eatRegExpIdentifierStart(state)) {
      state.lastStringValue += codePointToString(state.lastIntValue);
      while (this.regexp_eatRegExpIdentifierPart(state)) {
        state.lastStringValue += codePointToString(state.lastIntValue);
      }
      return true
    }
    return false
  };

  // RegExpIdentifierStart ::
  //   UnicodeIDStart
  //   `$`
  //   `_`
  //   `\` RegExpUnicodeEscapeSequence[+U]
  pp$1.regexp_eatRegExpIdentifierStart = function(state) {
    var start = state.pos;
    var forceU = this.options.ecmaVersion >= 11;
    var ch = state.current(forceU);
    state.advance(forceU);

    if (ch === 0x5C /* \ */ && this.regexp_eatRegExpUnicodeEscapeSequence(state, forceU)) {
      ch = state.lastIntValue;
    }
    if (isRegExpIdentifierStart(ch)) {
      state.lastIntValue = ch;
      return true
    }

    state.pos = start;
    return false
  };
  function isRegExpIdentifierStart(ch) {
    return isIdentifierStart(ch, true) || ch === 0x24 /* $ */ || ch === 0x5F /* _ */
  }

  // RegExpIdentifierPart ::
  //   UnicodeIDContinue
  //   `$`
  //   `_`
  //   `\` RegExpUnicodeEscapeSequence[+U]
  //   <ZWNJ>
  //   <ZWJ>
  pp$1.regexp_eatRegExpIdentifierPart = function(state) {
    var start = state.pos;
    var forceU = this.options.ecmaVersion >= 11;
    var ch = state.current(forceU);
    state.advance(forceU);

    if (ch === 0x5C /* \ */ && this.regexp_eatRegExpUnicodeEscapeSequence(state, forceU)) {
      ch = state.lastIntValue;
    }
    if (isRegExpIdentifierPart(ch)) {
      state.lastIntValue = ch;
      return true
    }

    state.pos = start;
    return false
  };
  function isRegExpIdentifierPart(ch) {
    return isIdentifierChar(ch, true) || ch === 0x24 /* $ */ || ch === 0x5F /* _ */ || ch === 0x200C /* <ZWNJ> */ || ch === 0x200D /* <ZWJ> */
  }

  // https://www.ecma-international.org/ecma-262/8.0/#prod-annexB-AtomEscape
  pp$1.regexp_eatAtomEscape = function(state) {
    if (
      this.regexp_eatBackReference(state) ||
      this.regexp_eatCharacterClassEscape(state) ||
      this.regexp_eatCharacterEscape(state) ||
      (state.switchN && this.regexp_eatKGroupName(state))
    ) {
      return true
    }
    if (state.switchU) {
      // Make the same message as V8.
      if (state.current() === 0x63 /* c */) {
        state.raise("Invalid unicode escape");
      }
      state.raise("Invalid escape");
    }
    return false
  };
  pp$1.regexp_eatBackReference = function(state) {
    var start = state.pos;
    if (this.regexp_eatDecimalEscape(state)) {
      var n = state.lastIntValue;
      if (state.switchU) {
        // For SyntaxError in https://www.ecma-international.org/ecma-262/8.0/#sec-atomescape
        if (n > state.maxBackReference) {
          state.maxBackReference = n;
        }
        return true
      }
      if (n <= state.numCapturingParens) {
        return true
      }
      state.pos = start;
    }
    return false
  };
  pp$1.regexp_eatKGroupName = function(state) {
    if (state.eat(0x6B /* k */)) {
      if (this.regexp_eatGroupName(state)) {
        state.backReferenceNames.push(state.lastStringValue);
        return true
      }
      state.raise("Invalid named reference");
    }
    return false
  };

  // https://www.ecma-international.org/ecma-262/8.0/#prod-annexB-CharacterEscape
  pp$1.regexp_eatCharacterEscape = function(state) {
    return (
      this.regexp_eatControlEscape(state) ||
      this.regexp_eatCControlLetter(state) ||
      this.regexp_eatZero(state) ||
      this.regexp_eatHexEscapeSequence(state) ||
      this.regexp_eatRegExpUnicodeEscapeSequence(state, false) ||
      (!state.switchU && this.regexp_eatLegacyOctalEscapeSequence(state)) ||
      this.regexp_eatIdentityEscape(state)
    )
  };
  pp$1.regexp_eatCControlLetter = function(state) {
    var start = state.pos;
    if (state.eat(0x63 /* c */)) {
      if (this.regexp_eatControlLetter(state)) {
        return true
      }
      state.pos = start;
    }
    return false
  };
  pp$1.regexp_eatZero = function(state) {
    if (state.current() === 0x30 /* 0 */ && !isDecimalDigit(state.lookahead())) {
      state.lastIntValue = 0;
      state.advance();
      return true
    }
    return false
  };

  // https://www.ecma-international.org/ecma-262/8.0/#prod-ControlEscape
  pp$1.regexp_eatControlEscape = function(state) {
    var ch = state.current();
    if (ch === 0x74 /* t */) {
      state.lastIntValue = 0x09; /* \t */
      state.advance();
      return true
    }
    if (ch === 0x6E /* n */) {
      state.lastIntValue = 0x0A; /* \n */
      state.advance();
      return true
    }
    if (ch === 0x76 /* v */) {
      state.lastIntValue = 0x0B; /* \v */
      state.advance();
      return true
    }
    if (ch === 0x66 /* f */) {
      state.lastIntValue = 0x0C; /* \f */
      state.advance();
      return true
    }
    if (ch === 0x72 /* r */) {
      state.lastIntValue = 0x0D; /* \r */
      state.advance();
      return true
    }
    return false
  };

  // https://www.ecma-international.org/ecma-262/8.0/#prod-ControlLetter
  pp$1.regexp_eatControlLetter = function(state) {
    var ch = state.current();
    if (isControlLetter(ch)) {
      state.lastIntValue = ch % 0x20;
      state.advance();
      return true
    }
    return false
  };
  function isControlLetter(ch) {
    return (
      (ch >= 0x41 /* A */ && ch <= 0x5A /* Z */) ||
      (ch >= 0x61 /* a */ && ch <= 0x7A /* z */)
    )
  }

  // https://www.ecma-international.org/ecma-262/8.0/#prod-RegExpUnicodeEscapeSequence
  pp$1.regexp_eatRegExpUnicodeEscapeSequence = function(state, forceU) {
    if ( forceU === void 0 ) forceU = false;

    var start = state.pos;
    var switchU = forceU || state.switchU;

    if (state.eat(0x75 /* u */)) {
      if (this.regexp_eatFixedHexDigits(state, 4)) {
        var lead = state.lastIntValue;
        if (switchU && lead >= 0xD800 && lead <= 0xDBFF) {
          var leadSurrogateEnd = state.pos;
          if (state.eat(0x5C /* \ */) && state.eat(0x75 /* u */) && this.regexp_eatFixedHexDigits(state, 4)) {
            var trail = state.lastIntValue;
            if (trail >= 0xDC00 && trail <= 0xDFFF) {
              state.lastIntValue = (lead - 0xD800) * 0x400 + (trail - 0xDC00) + 0x10000;
              return true
            }
          }
          state.pos = leadSurrogateEnd;
          state.lastIntValue = lead;
        }
        return true
      }
      if (
        switchU &&
        state.eat(0x7B /* { */) &&
        this.regexp_eatHexDigits(state) &&
        state.eat(0x7D /* } */) &&
        isValidUnicode(state.lastIntValue)
      ) {
        return true
      }
      if (switchU) {
        state.raise("Invalid unicode escape");
      }
      state.pos = start;
    }

    return false
  };
  function isValidUnicode(ch) {
    return ch >= 0 && ch <= 0x10FFFF
  }

  // https://www.ecma-international.org/ecma-262/8.0/#prod-annexB-IdentityEscape
  pp$1.regexp_eatIdentityEscape = function(state) {
    if (state.switchU) {
      if (this.regexp_eatSyntaxCharacter(state)) {
        return true
      }
      if (state.eat(0x2F /* / */)) {
        state.lastIntValue = 0x2F; /* / */
        return true
      }
      return false
    }

    var ch = state.current();
    if (ch !== 0x63 /* c */ && (!state.switchN || ch !== 0x6B /* k */)) {
      state.lastIntValue = ch;
      state.advance();
      return true
    }

    return false
  };

  // https://www.ecma-international.org/ecma-262/8.0/#prod-DecimalEscape
  pp$1.regexp_eatDecimalEscape = function(state) {
    state.lastIntValue = 0;
    var ch = state.current();
    if (ch >= 0x31 /* 1 */ && ch <= 0x39 /* 9 */) {
      do {
        state.lastIntValue = 10 * state.lastIntValue + (ch - 0x30 /* 0 */);
        state.advance();
      } while ((ch = state.current()) >= 0x30 /* 0 */ && ch <= 0x39 /* 9 */)
      return true
    }
    return false
  };

  // https://www.ecma-international.org/ecma-262/8.0/#prod-CharacterClassEscape
  pp$1.regexp_eatCharacterClassEscape = function(state) {
    var ch = state.current();

    if (isCharacterClassEscape(ch)) {
      state.lastIntValue = -1;
      state.advance();
      return true
    }

    if (
      state.switchU &&
      this.options.ecmaVersion >= 9 &&
      (ch === 0x50 /* P */ || ch === 0x70 /* p */)
    ) {
      state.lastIntValue = -1;
      state.advance();
      if (
        state.eat(0x7B /* { */) &&
        this.regexp_eatUnicodePropertyValueExpression(state) &&
        state.eat(0x7D /* } */)
      ) {
        return true
      }
      state.raise("Invalid property name");
    }

    return false
  };
  function isCharacterClassEscape(ch) {
    return (
      ch === 0x64 /* d */ ||
      ch === 0x44 /* D */ ||
      ch === 0x73 /* s */ ||
      ch === 0x53 /* S */ ||
      ch === 0x77 /* w */ ||
      ch === 0x57 /* W */
    )
  }

  // UnicodePropertyValueExpression ::
  //   UnicodePropertyName `=` UnicodePropertyValue
  //   LoneUnicodePropertyNameOrValue
  pp$1.regexp_eatUnicodePropertyValueExpression = function(state) {
    var start = state.pos;

    // UnicodePropertyName `=` UnicodePropertyValue
    if (this.regexp_eatUnicodePropertyName(state) && state.eat(0x3D /* = */)) {
      var name = state.lastStringValue;
      if (this.regexp_eatUnicodePropertyValue(state)) {
        var value = state.lastStringValue;
        this.regexp_validateUnicodePropertyNameAndValue(state, name, value);
        return true
      }
    }
    state.pos = start;

    // LoneUnicodePropertyNameOrValue
    if (this.regexp_eatLoneUnicodePropertyNameOrValue(state)) {
      var nameOrValue = state.lastStringValue;
      this.regexp_validateUnicodePropertyNameOrValue(state, nameOrValue);
      return true
    }
    return false
  };
  pp$1.regexp_validateUnicodePropertyNameAndValue = function(state, name, value) {
    if (!hasOwn(state.unicodeProperties.nonBinary, name))
      { state.raise("Invalid property name"); }
    if (!state.unicodeProperties.nonBinary[name].test(value))
      { state.raise("Invalid property value"); }
  };
  pp$1.regexp_validateUnicodePropertyNameOrValue = function(state, nameOrValue) {
    if (!state.unicodeProperties.binary.test(nameOrValue))
      { state.raise("Invalid property name"); }
  };

  // UnicodePropertyName ::
  //   UnicodePropertyNameCharacters
  pp$1.regexp_eatUnicodePropertyName = function(state) {
    var ch = 0;
    state.lastStringValue = "";
    while (isUnicodePropertyNameCharacter(ch = state.current())) {
      state.lastStringValue += codePointToString(ch);
      state.advance();
    }
    return state.lastStringValue !== ""
  };
  function isUnicodePropertyNameCharacter(ch) {
    return isControlLetter(ch) || ch === 0x5F /* _ */
  }

  // UnicodePropertyValue ::
  //   UnicodePropertyValueCharacters
  pp$1.regexp_eatUnicodePropertyValue = function(state) {
    var ch = 0;
    state.lastStringValue = "";
    while (isUnicodePropertyValueCharacter(ch = state.current())) {
      state.lastStringValue += codePointToString(ch);
      state.advance();
    }
    return state.lastStringValue !== ""
  };
  function isUnicodePropertyValueCharacter(ch) {
    return isUnicodePropertyNameCharacter(ch) || isDecimalDigit(ch)
  }

  // LoneUnicodePropertyNameOrValue ::
  //   UnicodePropertyValueCharacters
  pp$1.regexp_eatLoneUnicodePropertyNameOrValue = function(state) {
    return this.regexp_eatUnicodePropertyValue(state)
  };

  // https://www.ecma-international.org/ecma-262/8.0/#prod-CharacterClass
  pp$1.regexp_eatCharacterClass = function(state) {
    if (state.eat(0x5B /* [ */)) {
      state.eat(0x5E /* ^ */);
      this.regexp_classRanges(state);
      if (state.eat(0x5D /* ] */)) {
        return true
      }
      // Unreachable since it threw "unterminated regular expression" error before.
      state.raise("Unterminated character class");
    }
    return false
  };

  // https://www.ecma-international.org/ecma-262/8.0/#prod-ClassRanges
  // https://www.ecma-international.org/ecma-262/8.0/#prod-NonemptyClassRanges
  // https://www.ecma-international.org/ecma-262/8.0/#prod-NonemptyClassRangesNoDash
  pp$1.regexp_classRanges = function(state) {
    while (this.regexp_eatClassAtom(state)) {
      var left = state.lastIntValue;
      if (state.eat(0x2D /* - */) && this.regexp_eatClassAtom(state)) {
        var right = state.lastIntValue;
        if (state.switchU && (left === -1 || right === -1)) {
          state.raise("Invalid character class");
        }
        if (left !== -1 && right !== -1 && left > right) {
          state.raise("Range out of order in character class");
        }
      }
    }
  };

  // https://www.ecma-international.org/ecma-262/8.0/#prod-ClassAtom
  // https://www.ecma-international.org/ecma-262/8.0/#prod-ClassAtomNoDash
  pp$1.regexp_eatClassAtom = function(state) {
    var start = state.pos;

    if (state.eat(0x5C /* \ */)) {
      if (this.regexp_eatClassEscape(state)) {
        return true
      }
      if (state.switchU) {
        // Make the same message as V8.
        var ch$1 = state.current();
        if (ch$1 === 0x63 /* c */ || isOctalDigit(ch$1)) {
          state.raise("Invalid class escape");
        }
        state.raise("Invalid escape");
      }
      state.pos = start;
    }

    var ch = state.current();
    if (ch !== 0x5D /* ] */) {
      state.lastIntValue = ch;
      state.advance();
      return true
    }

    return false
  };

  // https://www.ecma-international.org/ecma-262/8.0/#prod-annexB-ClassEscape
  pp$1.regexp_eatClassEscape = function(state) {
    var start = state.pos;

    if (state.eat(0x62 /* b */)) {
      state.lastIntValue = 0x08; /* <BS> */
      return true
    }

    if (state.switchU && state.eat(0x2D /* - */)) {
      state.lastIntValue = 0x2D; /* - */
      return true
    }

    if (!state.switchU && state.eat(0x63 /* c */)) {
      if (this.regexp_eatClassControlLetter(state)) {
        return true
      }
      state.pos = start;
    }

    return (
      this.regexp_eatCharacterClassEscape(state) ||
      this.regexp_eatCharacterEscape(state)
    )
  };

  // https://www.ecma-international.org/ecma-262/8.0/#prod-annexB-ClassControlLetter
  pp$1.regexp_eatClassControlLetter = function(state) {
    var ch = state.current();
    if (isDecimalDigit(ch) || ch === 0x5F /* _ */) {
      state.lastIntValue = ch % 0x20;
      state.advance();
      return true
    }
    return false
  };

  // https://www.ecma-international.org/ecma-262/8.0/#prod-HexEscapeSequence
  pp$1.regexp_eatHexEscapeSequence = function(state) {
    var start = state.pos;
    if (state.eat(0x78 /* x */)) {
      if (this.regexp_eatFixedHexDigits(state, 2)) {
        return true
      }
      if (state.switchU) {
        state.raise("Invalid escape");
      }
      state.pos = start;
    }
    return false
  };

  // https://www.ecma-international.org/ecma-262/8.0/#prod-DecimalDigits
  pp$1.regexp_eatDecimalDigits = function(state) {
    var start = state.pos;
    var ch = 0;
    state.lastIntValue = 0;
    while (isDecimalDigit(ch = state.current())) {
      state.lastIntValue = 10 * state.lastIntValue + (ch - 0x30 /* 0 */);
      state.advance();
    }
    return state.pos !== start
  };
  function isDecimalDigit(ch) {
    return ch >= 0x30 /* 0 */ && ch <= 0x39 /* 9 */
  }

  // https://www.ecma-international.org/ecma-262/8.0/#prod-HexDigits
  pp$1.regexp_eatHexDigits = function(state) {
    var start = state.pos;
    var ch = 0;
    state.lastIntValue = 0;
    while (isHexDigit(ch = state.current())) {
      state.lastIntValue = 16 * state.lastIntValue + hexToInt(ch);
      state.advance();
    }
    return state.pos !== start
  };
  function isHexDigit(ch) {
    return (
      (ch >= 0x30 /* 0 */ && ch <= 0x39 /* 9 */) ||
      (ch >= 0x41 /* A */ && ch <= 0x46 /* F */) ||
      (ch >= 0x61 /* a */ && ch <= 0x66 /* f */)
    )
  }
  function hexToInt(ch) {
    if (ch >= 0x41 /* A */ && ch <= 0x46 /* F */) {
      return 10 + (ch - 0x41 /* A */)
    }
    if (ch >= 0x61 /* a */ && ch <= 0x66 /* f */) {
      return 10 + (ch - 0x61 /* a */)
    }
    return ch - 0x30 /* 0 */
  }

  // https://www.ecma-international.org/ecma-262/8.0/#prod-annexB-LegacyOctalEscapeSequence
  // Allows only 0-377(octal) i.e. 0-255(decimal).
  pp$1.regexp_eatLegacyOctalEscapeSequence = function(state) {
    if (this.regexp_eatOctalDigit(state)) {
      var n1 = state.lastIntValue;
      if (this.regexp_eatOctalDigit(state)) {
        var n2 = state.lastIntValue;
        if (n1 <= 3 && this.regexp_eatOctalDigit(state)) {
          state.lastIntValue = n1 * 64 + n2 * 8 + state.lastIntValue;
        } else {
          state.lastIntValue = n1 * 8 + n2;
        }
      } else {
        state.lastIntValue = n1;
      }
      return true
    }
    return false
  };

  // https://www.ecma-international.org/ecma-262/8.0/#prod-OctalDigit
  pp$1.regexp_eatOctalDigit = function(state) {
    var ch = state.current();
    if (isOctalDigit(ch)) {
      state.lastIntValue = ch - 0x30; /* 0 */
      state.advance();
      return true
    }
    state.lastIntValue = 0;
    return false
  };
  function isOctalDigit(ch) {
    return ch >= 0x30 /* 0 */ && ch <= 0x37 /* 7 */
  }

  // https://www.ecma-international.org/ecma-262/8.0/#prod-Hex4Digits
  // https://www.ecma-international.org/ecma-262/8.0/#prod-HexDigit
  // And HexDigit HexDigit in https://www.ecma-international.org/ecma-262/8.0/#prod-HexEscapeSequence
  pp$1.regexp_eatFixedHexDigits = function(state, length) {
    var start = state.pos;
    state.lastIntValue = 0;
    for (var i = 0; i < length; ++i) {
      var ch = state.current();
      if (!isHexDigit(ch)) {
        state.pos = start;
        return false
      }
      state.lastIntValue = 16 * state.lastIntValue + hexToInt(ch);
      state.advance();
    }
    return true
  };

  // Object type used to represent tokens. Note that normally, tokens
  // simply exist as properties on the parser object. This is only
  // used for the onToken callback and the external tokenizer.

  var Token = function Token(p) {
    this.type = p.type;
    this.value = p.value;
    this.start = p.start;
    this.end = p.end;
    if (p.options.locations)
      { this.loc = new SourceLocation$1(p, p.startLoc, p.endLoc); }
    if (p.options.ranges)
      { this.range = [p.start, p.end]; }
  };

  // ## Tokenizer

  var pp = Parser.prototype;

  // Move to the next token

  pp.next = function(ignoreEscapeSequenceInKeyword) {
    if (!ignoreEscapeSequenceInKeyword && this.type.keyword && this.containsEsc)
      { this.raiseRecoverable(this.start, "Escape sequence in keyword " + this.type.keyword); }
    if (this.options.onToken)
      { this.options.onToken(new Token(this)); }

    this.lastTokEnd = this.end;
    this.lastTokStart = this.start;
    this.lastTokEndLoc = this.endLoc;
    this.lastTokStartLoc = this.startLoc;
    this.nextToken();
  };

  pp.getToken = function() {
    this.next();
    return new Token(this)
  };

  // If we're in an ES6 environment, make parsers iterable
  if (typeof Symbol !== "undefined")
    { pp[Symbol.iterator] = function() {
      var this$1$1 = this;

      return {
        next: function () {
          var token = this$1$1.getToken();
          return {
            done: token.type === types$1.eof,
            value: token
          }
        }
      }
    }; }

  // Toggle strict mode. Re-reads the next number or string to please
  // pedantic tests (`"use strict"; 010;` should fail).

  // Read a single token, updating the parser object's token-related
  // properties.

  pp.nextToken = function() {
    var curContext = this.curContext();
    if (!curContext || !curContext.preserveSpace) { this.skipSpace(); }

    this.start = this.pos;
    if (this.options.locations) { this.startLoc = this.curPosition(); }
    if (this.pos >= this.input.length) { return this.finishToken(types$1.eof) }

    if (curContext.override) { return curContext.override(this) }
    else { this.readToken(this.fullCharCodeAtPos()); }
  };

  pp.readToken = function(code) {
    // Identifier or keyword. '\uXXXX' sequences are allowed in
    // identifiers, so '\' also dispatches to that.
    if (isIdentifierStart(code, this.options.ecmaVersion >= 6) || code === 92 /* '\' */)
      { return this.readWord() }

    return this.getTokenFromCode(code)
  };

  pp.fullCharCodeAtPos = function() {
    var code = this.input.charCodeAt(this.pos);
    if (code <= 0xd7ff || code >= 0xdc00) { return code }
    var next = this.input.charCodeAt(this.pos + 1);
    return next <= 0xdbff || next >= 0xe000 ? code : (code << 10) + next - 0x35fdc00
  };

  pp.skipBlockComment = function() {
    var startLoc = this.options.onComment && this.curPosition();
    var start = this.pos, end = this.input.indexOf("*/", this.pos += 2);
    if (end === -1) { this.raise(this.pos - 2, "Unterminated comment"); }
    this.pos = end + 2;
    if (this.options.locations) {
      for (var nextBreak = (void 0), pos = start; (nextBreak = nextLineBreak(this.input, pos, this.pos)) > -1;) {
        ++this.curLine;
        pos = this.lineStart = nextBreak;
      }
    }
    if (this.options.onComment)
      { this.options.onComment(true, this.input.slice(start + 2, end), start, this.pos,
                             startLoc, this.curPosition()); }
  };

  pp.skipLineComment = function(startSkip) {
    var start = this.pos;
    var startLoc = this.options.onComment && this.curPosition();
    var ch = this.input.charCodeAt(this.pos += startSkip);
    while (this.pos < this.input.length && !isNewLine(ch)) {
      ch = this.input.charCodeAt(++this.pos);
    }
    if (this.options.onComment)
      { this.options.onComment(false, this.input.slice(start + startSkip, this.pos), start, this.pos,
                             startLoc, this.curPosition()); }
  };

  // Called at the start of the parse and after every token. Skips
  // whitespace and comments, and.

  pp.skipSpace = function() {
    loop: while (this.pos < this.input.length) {
      var ch = this.input.charCodeAt(this.pos);
      switch (ch) {
      case 32: case 160: // ' '
        ++this.pos;
        break
      case 13:
        if (this.input.charCodeAt(this.pos + 1) === 10) {
          ++this.pos;
        }
      case 10: case 8232: case 8233:
        ++this.pos;
        if (this.options.locations) {
          ++this.curLine;
          this.lineStart = this.pos;
        }
        break
      case 47: // '/'
        switch (this.input.charCodeAt(this.pos + 1)) {
        case 42: // '*'
          this.skipBlockComment();
          break
        case 47:
          this.skipLineComment(2);
          break
        default:
          break loop
        }
        break
      default:
        if (ch > 8 && ch < 14 || ch >= 5760 && nonASCIIwhitespace.test(String.fromCharCode(ch))) {
          ++this.pos;
        } else {
          break loop
        }
      }
    }
  };

  // Called at the end of every token. Sets `end`, `val`, and
  // maintains `context` and `exprAllowed`, and skips the space after
  // the token, so that the next one's `start` will point at the
  // right position.

  pp.finishToken = function(type, val) {
    this.end = this.pos;
    if (this.options.locations) { this.endLoc = this.curPosition(); }
    var prevType = this.type;
    this.type = type;
    this.value = val;

    this.updateContext(prevType);
  };

  // ### Token reading

  // This is the function that is called to fetch the next token. It
  // is somewhat obscure, because it works in character codes rather
  // than characters, and because operator parsing has been inlined
  // into it.
  //
  // All in the name of speed.
  //
  pp.readToken_dot = function() {
    var next = this.input.charCodeAt(this.pos + 1);
    if (next >= 48 && next <= 57) { return this.readNumber(true) }
    var next2 = this.input.charCodeAt(this.pos + 2);
    if (this.options.ecmaVersion >= 6 && next === 46 && next2 === 46) { // 46 = dot '.'
      this.pos += 3;
      return this.finishToken(types$1.ellipsis)
    } else {
      ++this.pos;
      return this.finishToken(types$1.dot)
    }
  };

  pp.readToken_slash = function() { // '/'
    var next = this.input.charCodeAt(this.pos + 1);
    if (this.exprAllowed) { ++this.pos; return this.readRegexp() }
    if (next === 61) { return this.finishOp(types$1.assign, 2) }
    return this.finishOp(types$1.slash, 1)
  };

  pp.readToken_mult_modulo_exp = function(code) { // '%*'
    var next = this.input.charCodeAt(this.pos + 1);
    var size = 1;
    var tokentype = code === 42 ? types$1.star : types$1.modulo;

    // exponentiation operator ** and **=
    if (this.options.ecmaVersion >= 7 && code === 42 && next === 42) {
      ++size;
      tokentype = types$1.starstar;
      next = this.input.charCodeAt(this.pos + 2);
    }

    if (next === 61) { return this.finishOp(types$1.assign, size + 1) }
    return this.finishOp(tokentype, size)
  };

  pp.readToken_pipe_amp = function(code) { // '|&'
    var next = this.input.charCodeAt(this.pos + 1);
    if (next === code) {
      if (this.options.ecmaVersion >= 12) {
        var next2 = this.input.charCodeAt(this.pos + 2);
        if (next2 === 61) { return this.finishOp(types$1.assign, 3) }
      }
      return this.finishOp(code === 124 ? types$1.logicalOR : types$1.logicalAND, 2)
    }
    if (next === 61) { return this.finishOp(types$1.assign, 2) }
    return this.finishOp(code === 124 ? types$1.bitwiseOR : types$1.bitwiseAND, 1)
  };

  pp.readToken_caret = function() { // '^'
    var next = this.input.charCodeAt(this.pos + 1);
    if (next === 61) { return this.finishOp(types$1.assign, 2) }
    return this.finishOp(types$1.bitwiseXOR, 1)
  };

  pp.readToken_plus_min = function(code) { // '+-'
    var next = this.input.charCodeAt(this.pos + 1);
    if (next === code) {
      if (next === 45 && !this.inModule && this.input.charCodeAt(this.pos + 2) === 62 &&
          (this.lastTokEnd === 0 || lineBreak.test(this.input.slice(this.lastTokEnd, this.pos)))) {
        // A `-->` line comment
        this.skipLineComment(3);
        this.skipSpace();
        return this.nextToken()
      }
      return this.finishOp(types$1.incDec, 2)
    }
    if (next === 61) { return this.finishOp(types$1.assign, 2) }
    return this.finishOp(types$1.plusMin, 1)
  };

  pp.readToken_lt_gt = function(code) { // '<>'
    var next = this.input.charCodeAt(this.pos + 1);
    var size = 1;
    if (next === code) {
      size = code === 62 && this.input.charCodeAt(this.pos + 2) === 62 ? 3 : 2;
      if (this.input.charCodeAt(this.pos + size) === 61) { return this.finishOp(types$1.assign, size + 1) }
      return this.finishOp(types$1.bitShift, size)
    }
    if (next === 33 && code === 60 && !this.inModule && this.input.charCodeAt(this.pos + 2) === 45 &&
        this.input.charCodeAt(this.pos + 3) === 45) {
      // `<!--`, an XML-style comment that should be interpreted as a line comment
      this.skipLineComment(4);
      this.skipSpace();
      return this.nextToken()
    }
    if (next === 61) { size = 2; }
    return this.finishOp(types$1.relational, size)
  };

  pp.readToken_eq_excl = function(code) { // '=!'
    var next = this.input.charCodeAt(this.pos + 1);
    if (next === 61) { return this.finishOp(types$1.equality, this.input.charCodeAt(this.pos + 2) === 61 ? 3 : 2) }
    if (code === 61 && next === 62 && this.options.ecmaVersion >= 6) { // '=>'
      this.pos += 2;
      return this.finishToken(types$1.arrow)
    }
    return this.finishOp(code === 61 ? types$1.eq : types$1.prefix, 1)
  };

  pp.readToken_question = function() { // '?'
    var ecmaVersion = this.options.ecmaVersion;
    if (ecmaVersion >= 11) {
      var next = this.input.charCodeAt(this.pos + 1);
      if (next === 46) {
        var next2 = this.input.charCodeAt(this.pos + 2);
        if (next2 < 48 || next2 > 57) { return this.finishOp(types$1.questionDot, 2) }
      }
      if (next === 63) {
        if (ecmaVersion >= 12) {
          var next2$1 = this.input.charCodeAt(this.pos + 2);
          if (next2$1 === 61) { return this.finishOp(types$1.assign, 3) }
        }
        return this.finishOp(types$1.coalesce, 2)
      }
    }
    return this.finishOp(types$1.question, 1)
  };

  pp.readToken_numberSign = function() { // '#'
    var ecmaVersion = this.options.ecmaVersion;
    var code = 35; // '#'
    if (ecmaVersion >= 13) {
      ++this.pos;
      code = this.fullCharCodeAtPos();
      if (isIdentifierStart(code, true) || code === 92 /* '\' */) {
        return this.finishToken(types$1.privateId, this.readWord1())
      }
    }

    this.raise(this.pos, "Unexpected character '" + codePointToString(code) + "'");
  };

  pp.getTokenFromCode = function(code) {
    switch (code) {
    // The interpretation of a dot depends on whether it is followed
    // by a digit or another two dots.
    case 46: // '.'
      return this.readToken_dot()

    // Punctuation tokens.
    case 40: ++this.pos; return this.finishToken(types$1.parenL)
    case 41: ++this.pos; return this.finishToken(types$1.parenR)
    case 59: ++this.pos; return this.finishToken(types$1.semi)
    case 44: ++this.pos; return this.finishToken(types$1.comma)
    case 91: ++this.pos; return this.finishToken(types$1.bracketL)
    case 93: ++this.pos; return this.finishToken(types$1.bracketR)
    case 123: ++this.pos; return this.finishToken(types$1.braceL)
    case 125: ++this.pos; return this.finishToken(types$1.braceR)
    case 58: ++this.pos; return this.finishToken(types$1.colon)

    case 96: // '`'
      if (this.options.ecmaVersion < 6) { break }
      ++this.pos;
      return this.finishToken(types$1.backQuote)

    case 48: // '0'
      var next = this.input.charCodeAt(this.pos + 1);
      if (next === 120 || next === 88) { return this.readRadixNumber(16) } // '0x', '0X' - hex number
      if (this.options.ecmaVersion >= 6) {
        if (next === 111 || next === 79) { return this.readRadixNumber(8) } // '0o', '0O' - octal number
        if (next === 98 || next === 66) { return this.readRadixNumber(2) } // '0b', '0B' - binary number
      }

    // Anything else beginning with a digit is an integer, octal
    // number, or float.
    case 49: case 50: case 51: case 52: case 53: case 54: case 55: case 56: case 57: // 1-9
      return this.readNumber(false)

    // Quotes produce strings.
    case 34: case 39: // '"', "'"
      return this.readString(code)

    // Operators are parsed inline in tiny state machines. '=' (61) is
    // often referred to. `finishOp` simply skips the amount of
    // characters it is given as second argument, and returns a token
    // of the type given by its first argument.
    case 47: // '/'
      return this.readToken_slash()

    case 37: case 42: // '%*'
      return this.readToken_mult_modulo_exp(code)

    case 124: case 38: // '|&'
      return this.readToken_pipe_amp(code)

    case 94: // '^'
      return this.readToken_caret()

    case 43: case 45: // '+-'
      return this.readToken_plus_min(code)

    case 60: case 62: // '<>'
      return this.readToken_lt_gt(code)

    case 61: case 33: // '=!'
      return this.readToken_eq_excl(code)

    case 63: // '?'
      return this.readToken_question()

    case 126: // '~'
      return this.finishOp(types$1.prefix, 1)

    case 35: // '#'
      return this.readToken_numberSign()
    }

    this.raise(this.pos, "Unexpected character '" + codePointToString(code) + "'");
  };

  pp.finishOp = function(type, size) {
    var str = this.input.slice(this.pos, this.pos + size);
    this.pos += size;
    return this.finishToken(type, str)
  };

  pp.readRegexp = function() {
    var escaped, inClass, start = this.pos;
    for (;;) {
      if (this.pos >= this.input.length) { this.raise(start, "Unterminated regular expression"); }
      var ch = this.input.charAt(this.pos);
      if (lineBreak.test(ch)) { this.raise(start, "Unterminated regular expression"); }
      if (!escaped) {
        if (ch === "[") { inClass = true; }
        else if (ch === "]" && inClass) { inClass = false; }
        else if (ch === "/" && !inClass) { break }
        escaped = ch === "\\";
      } else { escaped = false; }
      ++this.pos;
    }
    var pattern = this.input.slice(start, this.pos);
    ++this.pos;
    var flagsStart = this.pos;
    var flags = this.readWord1();
    if (this.containsEsc) { this.unexpected(flagsStart); }

    // Validate pattern
    var state = this.regexpState || (this.regexpState = new RegExpValidationState(this));
    state.reset(start, pattern, flags);
    this.validateRegExpFlags(state);
    this.validateRegExpPattern(state);

    // Create Literal#value property value.
    var value = null;
    try {
      value = new RegExp(pattern, flags);
    } catch (e) {
      // ESTree requires null if it failed to instantiate RegExp object.
      // https://github.com/estree/estree/blob/a27003adf4fd7bfad44de9cef372a2eacd527b1c/es5.md#regexpliteral
    }

    return this.finishToken(types$1.regexp, {pattern: pattern, flags: flags, value: value})
  };

  // Read an integer in the given radix. Return null if zero digits
  // were read, the integer value otherwise. When `len` is given, this
  // will return `null` unless the integer has exactly `len` digits.

  pp.readInt = function(radix, len, maybeLegacyOctalNumericLiteral) {
    // `len` is used for character escape sequences. In that case, disallow separators.
    var allowSeparators = this.options.ecmaVersion >= 12 && len === undefined;

    // `maybeLegacyOctalNumericLiteral` is true if it doesn't have prefix (0x,0o,0b)
    // and isn't fraction part nor exponent part. In that case, if the first digit
    // is zero then disallow separators.
    var isLegacyOctalNumericLiteral = maybeLegacyOctalNumericLiteral && this.input.charCodeAt(this.pos) === 48;

    var start = this.pos, total = 0, lastCode = 0;
    for (var i = 0, e = len == null ? Infinity : len; i < e; ++i, ++this.pos) {
      var code = this.input.charCodeAt(this.pos), val = (void 0);

      if (allowSeparators && code === 95) {
        if (isLegacyOctalNumericLiteral) { this.raiseRecoverable(this.pos, "Numeric separator is not allowed in legacy octal numeric literals"); }
        if (lastCode === 95) { this.raiseRecoverable(this.pos, "Numeric separator must be exactly one underscore"); }
        if (i === 0) { this.raiseRecoverable(this.pos, "Numeric separator is not allowed at the first of digits"); }
        lastCode = code;
        continue
      }

      if (code >= 97) { val = code - 97 + 10; } // a
      else if (code >= 65) { val = code - 65 + 10; } // A
      else if (code >= 48 && code <= 57) { val = code - 48; } // 0-9
      else { val = Infinity; }
      if (val >= radix) { break }
      lastCode = code;
      total = total * radix + val;
    }

    if (allowSeparators && lastCode === 95) { this.raiseRecoverable(this.pos - 1, "Numeric separator is not allowed at the last of digits"); }
    if (this.pos === start || len != null && this.pos - start !== len) { return null }

    return total
  };

  function stringToNumber(str, isLegacyOctalNumericLiteral) {
    if (isLegacyOctalNumericLiteral) {
      return parseInt(str, 8)
    }

    // `parseFloat(value)` stops parsing at the first numeric separator then returns a wrong value.
    return parseFloat(str.replace(/_/g, ""))
  }

  function stringToBigInt(str) {
    if (typeof BigInt !== "function") {
      return null
    }

    // `BigInt(value)` throws syntax error if the string contains numeric separators.
    return BigInt(str.replace(/_/g, ""))
  }

  pp.readRadixNumber = function(radix) {
    var start = this.pos;
    this.pos += 2; // 0x
    var val = this.readInt(radix);
    if (val == null) { this.raise(this.start + 2, "Expected number in radix " + radix); }
    if (this.options.ecmaVersion >= 11 && this.input.charCodeAt(this.pos) === 110) {
      val = stringToBigInt(this.input.slice(start, this.pos));
      ++this.pos;
    } else if (isIdentifierStart(this.fullCharCodeAtPos())) { this.raise(this.pos, "Identifier directly after number"); }
    return this.finishToken(types$1.num, val)
  };

  // Read an integer, octal integer, or floating-point number.

  pp.readNumber = function(startsWithDot) {
    var start = this.pos;
    if (!startsWithDot && this.readInt(10, undefined, true) === null) { this.raise(start, "Invalid number"); }
    var octal = this.pos - start >= 2 && this.input.charCodeAt(start) === 48;
    if (octal && this.strict) { this.raise(start, "Invalid number"); }
    var next = this.input.charCodeAt(this.pos);
    if (!octal && !startsWithDot && this.options.ecmaVersion >= 11 && next === 110) {
      var val$1 = stringToBigInt(this.input.slice(start, this.pos));
      ++this.pos;
      if (isIdentifierStart(this.fullCharCodeAtPos())) { this.raise(this.pos, "Identifier directly after number"); }
      return this.finishToken(types$1.num, val$1)
    }
    if (octal && /[89]/.test(this.input.slice(start, this.pos))) { octal = false; }
    if (next === 46 && !octal) { // '.'
      ++this.pos;
      this.readInt(10);
      next = this.input.charCodeAt(this.pos);
    }
    if ((next === 69 || next === 101) && !octal) { // 'eE'
      next = this.input.charCodeAt(++this.pos);
      if (next === 43 || next === 45) { ++this.pos; } // '+-'
      if (this.readInt(10) === null) { this.raise(start, "Invalid number"); }
    }
    if (isIdentifierStart(this.fullCharCodeAtPos())) { this.raise(this.pos, "Identifier directly after number"); }

    var val = stringToNumber(this.input.slice(start, this.pos), octal);
    return this.finishToken(types$1.num, val)
  };

  // Read a string value, interpreting backslash-escapes.

  pp.readCodePoint = function() {
    var ch = this.input.charCodeAt(this.pos), code;

    if (ch === 123) { // '{'
      if (this.options.ecmaVersion < 6) { this.unexpected(); }
      var codePos = ++this.pos;
      code = this.readHexChar(this.input.indexOf("}", this.pos) - this.pos);
      ++this.pos;
      if (code > 0x10FFFF) { this.invalidStringToken(codePos, "Code point out of bounds"); }
    } else {
      code = this.readHexChar(4);
    }
    return code
  };

  pp.readString = function(quote) {
    var out = "", chunkStart = ++this.pos;
    for (;;) {
      if (this.pos >= this.input.length) { this.raise(this.start, "Unterminated string constant"); }
      var ch = this.input.charCodeAt(this.pos);
      if (ch === quote) { break }
      if (ch === 92) { // '\'
        out += this.input.slice(chunkStart, this.pos);
        out += this.readEscapedChar(false);
        chunkStart = this.pos;
      } else if (ch === 0x2028 || ch === 0x2029) {
        if (this.options.ecmaVersion < 10) { this.raise(this.start, "Unterminated string constant"); }
        ++this.pos;
        if (this.options.locations) {
          this.curLine++;
          this.lineStart = this.pos;
        }
      } else {
        if (isNewLine(ch)) { this.raise(this.start, "Unterminated string constant"); }
        ++this.pos;
      }
    }
    out += this.input.slice(chunkStart, this.pos++);
    return this.finishToken(types$1.string, out)
  };

  // Reads template string tokens.

  var INVALID_TEMPLATE_ESCAPE_ERROR = {};

  pp.tryReadTemplateToken = function() {
    this.inTemplateElement = true;
    try {
      this.readTmplToken();
    } catch (err) {
      if (err === INVALID_TEMPLATE_ESCAPE_ERROR) {
        this.readInvalidTemplateToken();
      } else {
        throw err
      }
    }

    this.inTemplateElement = false;
  };

  pp.invalidStringToken = function(position, message) {
    if (this.inTemplateElement && this.options.ecmaVersion >= 9) {
      throw INVALID_TEMPLATE_ESCAPE_ERROR
    } else {
      this.raise(position, message);
    }
  };

  pp.readTmplToken = function() {
    var out = "", chunkStart = this.pos;
    for (;;) {
      if (this.pos >= this.input.length) { this.raise(this.start, "Unterminated template"); }
      var ch = this.input.charCodeAt(this.pos);
      if (ch === 96 || ch === 36 && this.input.charCodeAt(this.pos + 1) === 123) { // '`', '${'
        if (this.pos === this.start && (this.type === types$1.template || this.type === types$1.invalidTemplate)) {
          if (ch === 36) {
            this.pos += 2;
            return this.finishToken(types$1.dollarBraceL)
          } else {
            ++this.pos;
            return this.finishToken(types$1.backQuote)
          }
        }
        out += this.input.slice(chunkStart, this.pos);
        return this.finishToken(types$1.template, out)
      }
      if (ch === 92) { // '\'
        out += this.input.slice(chunkStart, this.pos);
        out += this.readEscapedChar(true);
        chunkStart = this.pos;
      } else if (isNewLine(ch)) {
        out += this.input.slice(chunkStart, this.pos);
        ++this.pos;
        switch (ch) {
        case 13:
          if (this.input.charCodeAt(this.pos) === 10) { ++this.pos; }
        case 10:
          out += "\n";
          break
        default:
          out += String.fromCharCode(ch);
          break
        }
        if (this.options.locations) {
          ++this.curLine;
          this.lineStart = this.pos;
        }
        chunkStart = this.pos;
      } else {
        ++this.pos;
      }
    }
  };

  // Reads a template token to search for the end, without validating any escape sequences
  pp.readInvalidTemplateToken = function() {
    for (; this.pos < this.input.length; this.pos++) {
      switch (this.input[this.pos]) {
      case "\\":
        ++this.pos;
        break

      case "$":
        if (this.input[this.pos + 1] !== "{") {
          break
        }

      // falls through
      case "`":
        return this.finishToken(types$1.invalidTemplate, this.input.slice(this.start, this.pos))

      // no default
      }
    }
    this.raise(this.start, "Unterminated template");
  };

  // Used to read escaped characters

  pp.readEscapedChar = function(inTemplate) {
    var ch = this.input.charCodeAt(++this.pos);
    ++this.pos;
    switch (ch) {
    case 110: return "\n" // 'n' -> '\n'
    case 114: return "\r" // 'r' -> '\r'
    case 120: return String.fromCharCode(this.readHexChar(2)) // 'x'
    case 117: return codePointToString(this.readCodePoint()) // 'u'
    case 116: return "\t" // 't' -> '\t'
    case 98: return "\b" // 'b' -> '\b'
    case 118: return "\u000b" // 'v' -> '\u000b'
    case 102: return "\f" // 'f' -> '\f'
    case 13: if (this.input.charCodeAt(this.pos) === 10) { ++this.pos; } // '\r\n'
    case 10: // ' \n'
      if (this.options.locations) { this.lineStart = this.pos; ++this.curLine; }
      return ""
    case 56:
    case 57:
      if (this.strict) {
        this.invalidStringToken(
          this.pos - 1,
          "Invalid escape sequence"
        );
      }
      if (inTemplate) {
        var codePos = this.pos - 1;

        this.invalidStringToken(
          codePos,
          "Invalid escape sequence in template string"
        );
      }
    default:
      if (ch >= 48 && ch <= 55) {
        var octalStr = this.input.substr(this.pos - 1, 3).match(/^[0-7]+/)[0];
        var octal = parseInt(octalStr, 8);
        if (octal > 255) {
          octalStr = octalStr.slice(0, -1);
          octal = parseInt(octalStr, 8);
        }
        this.pos += octalStr.length - 1;
        ch = this.input.charCodeAt(this.pos);
        if ((octalStr !== "0" || ch === 56 || ch === 57) && (this.strict || inTemplate)) {
          this.invalidStringToken(
            this.pos - 1 - octalStr.length,
            inTemplate
              ? "Octal literal in template string"
              : "Octal literal in strict mode"
          );
        }
        return String.fromCharCode(octal)
      }
      if (isNewLine(ch)) {
        // Unicode new line characters after \ get removed from output in both
        // template literals and strings
        return ""
      }
      return String.fromCharCode(ch)
    }
  };

  // Used to read character escape sequences ('\x', '\u', '\U').

  pp.readHexChar = function(len) {
    var codePos = this.pos;
    var n = this.readInt(16, len);
    if (n === null) { this.invalidStringToken(codePos, "Bad character escape sequence"); }
    return n
  };

  // Read an identifier, and return it as a string. Sets `this.containsEsc`
  // to whether the word contained a '\u' escape.
  //
  // Incrementally adds only escaped chars, adding other chunks as-is
  // as a micro-optimization.

  pp.readWord1 = function() {
    this.containsEsc = false;
    var word = "", first = true, chunkStart = this.pos;
    var astral = this.options.ecmaVersion >= 6;
    while (this.pos < this.input.length) {
      var ch = this.fullCharCodeAtPos();
      if (isIdentifierChar(ch, astral)) {
        this.pos += ch <= 0xffff ? 1 : 2;
      } else if (ch === 92) { // "\"
        this.containsEsc = true;
        word += this.input.slice(chunkStart, this.pos);
        var escStart = this.pos;
        if (this.input.charCodeAt(++this.pos) !== 117) // "u"
          { this.invalidStringToken(this.pos, "Expecting Unicode escape sequence \\uXXXX"); }
        ++this.pos;
        var esc = this.readCodePoint();
        if (!(first ? isIdentifierStart : isIdentifierChar)(esc, astral))
          { this.invalidStringToken(escStart, "Invalid Unicode escape"); }
        word += codePointToString(esc);
        chunkStart = this.pos;
      } else {
        break
      }
      first = false;
    }
    return word + this.input.slice(chunkStart, this.pos)
  };

  // Read an identifier or keyword token. Will check for reserved
  // words when necessary.

  pp.readWord = function() {
    var word = this.readWord1();
    var type = types$1.name;
    if (this.keywords.test(word)) {
      type = keywords[word];
    }
    return this.finishToken(type, word)
  };

  // Acorn is a tiny, fast JavaScript parser written in JavaScript.

  var version = "8.8.2";

  Parser.acorn = {
    Parser: Parser,
    version: version,
    defaultOptions: defaultOptions,
    Position: Position,
    SourceLocation: SourceLocation$1,
    getLineInfo: getLineInfo,
    Node: Node,
    TokenType: TokenType,
    tokTypes: types$1,
    keywordTypes: keywords,
    TokContext: TokContext,
    tokContexts: types,
    isIdentifierChar: isIdentifierChar,
    isIdentifierStart: isIdentifierStart,
    Token: Token,
    isNewLine: isNewLine,
    lineBreak: lineBreak,
    lineBreakG: lineBreakG,
    nonASCIIwhitespace: nonASCIIwhitespace
  };

  // The main exported interface (under `self.acorn` when in the
  // browser) is a `parse` function that takes a code string and
  // returns an abstract syntax tree as specified by [Mozilla parser
  // API][api].
  //
  // [api]: https://developer.mozilla.org/en-US/docs/SpiderMonkey/Parser_API

  function parse(input, options) {
    return Parser.parse(input, options)
  }

  // Acorn is organized as a tokenizer and a recursive-descent parser.
  // The `tokenizer` export provides an interface to the tokenizer.

  function tokenizer(input, options) {
    return Parser.tokenizer(input, options)
  }

  const rx_escape_offside_ops =  /[?|+*@:.\/\\\(\)\{\}\[\]\=\>]/g ;
  const re_space_prefix =  /(?:^|[ \t]+)/.source ; // spaces or start of line
  const re_space_suffix =  /(?=$|[ \t]+)/.source ; // spaces or end of line

  function regexp_from_jsy_op(jsy_op, with_spacing) {
    if ('string' === typeof jsy_op) {
      // escape Offside operator chars to RegExp
      jsy_op = jsy_op.replace(rx_escape_offside_ops, '\\$&');
      // surrounded by newlines or spacees
      if (with_spacing) {
        jsy_op = re_space_prefix + jsy_op + re_space_suffix;}
      return `(?:${jsy_op})` }// using a non-matching group

    if (jsy_op instanceof RegExp) {
      return jsy_op.source} }


  function sourcemap_comment(srcmap_json, newline='\n') {
    if ('string' !== typeof srcmap_json) {
      srcmap_json = JSON.stringify(srcmap_json);}

    let b64 = 'undefined' !== typeof Buffer
      ? Buffer.from(srcmap_json).toString('base64')
      : globalThis.btoa(unescape(encodeURIComponent(srcmap_json) ));

    // break up the source mapping url trigger string to prevent false positives on the following line
    return `${newline}//# ${'sourceMapping'}URL=data:application/json;charset=utf-8;base64,${b64}${newline}`}

  // @::   @::>   @::>*   @::*
  const lambda_block_tbl = {
    '': a =>({pre: `((${a}) => {`, post: '})'})
  , '>': a =>({pre: `(async (${a}) => {`, post: '})'})
  , '>*': a =>({pre: `((async function * (${a}) {`, post: '}).bind(this))'})
  , '*': a =>({pre: `((function * (${a}) {`, post: '}).bind(this))'}) };

  // @=>   @=>>
  const lambda_arrow_tbl = {
    __proto__: lambda_block_tbl
  , '': a =>({pre: `((${a}) =>`, post: ')'})
  , '>': a =>({pre: `(async (${a}) =>`, post: ')'}) };


  // @!::   @!::>   @!::>*   @!::*
  const iife_expr_tbl = {
    '': a =>({pre: `(((${a}) => {`, post: '})())'})
  , '>': a =>({pre: `((async (${a}) => {`, post: '})())'})
  , '>*': a =>({pre: `((async function * (${a}) {`, post: '}).call(this))'})
  , '*': a =>({pre: `((function * (${a}) {`, post: '}).call(this))'}) };


  // @!=>   @!=>>
  const iife_arrow_tbl = {
    __proto__: iife_expr_tbl
  , '': a =>({pre: `(((${a}) =>`, post: ')())'})
  , '>': a =>({pre: `((async (${a}) =>`, post: ')())'}) };


  const bindLambdaOpZero = table =>
    function opResolveLambdaZero(p) {
      let [_, suffix] = p.content.match(this.jsy_op);
      let entry = table[suffix || ''];
      if (undefined === entry) {
        throw new SyntaxError(`JSY lambda expression unrecognized specifier ("${suffix}")`) }
      return entry('')};


  const fmt_arg_kw = args => `{${args}}`;
  const fmt_arg_vec = args => `[${args}]`;
  const bindLambdaOpResolve = (table, as_args=(v=>v)) =>
    function opResolveLambda(p) {
      let [_, args, suffix] = p.content.match(this.jsy_op);
      let entry = table[suffix || ''];
      if (undefined === entry) {
        throw new SyntaxError(`JSY lambda with args expression unrecognized specifier ("${suffix}")`) }
      return entry(as_args(args) || '')};



  const at_lambda_offside = [
    // object unpack all args
    {jsy_op0: '@\\:=>', jsy_op: /@\\:(.*?)=>(>?\*?)/,
        pre: '(()=>', post: ')'
      , opResolve: bindLambdaOpResolve(lambda_arrow_tbl, fmt_arg_kw) }
  , {jsy_op0: '@\\:::', jsy_op: /@\\:(.*?)::(>?\*?)/,
        pre: '(()=>{', post: '})',
        opResolve: bindLambdaOpResolve(lambda_block_tbl, fmt_arg_kw) }

  , // array unpack all args
    {jsy_op0: '@\\#=>', jsy_op: /@\\#(.*?)=>(>?\*?)/,
        pre: '(()=>', post: ')'
      , opResolve: bindLambdaOpResolve(lambda_arrow_tbl, fmt_arg_vec) }
  , {jsy_op0: '@\\#::', jsy_op: /@\\#(.*?)::(>?\*?)/,
        pre: '(()=>{', post: '})',
        opResolve: bindLambdaOpResolve(lambda_block_tbl, fmt_arg_vec) }

  , // normal args
    {jsy_op0: '@\\=>', jsy_op: /@\\(.*?)=>(>?\*?)/,
        pre: '(()=>', post: ')'
      , opResolve: bindLambdaOpResolve(lambda_arrow_tbl) }
  , {jsy_op0: '@\\::', jsy_op: /@\\(.*?)::(>?\*?)/,
        pre: '(()=>{', post: '})',
        opResolve: bindLambdaOpResolve(lambda_block_tbl) }

  , // zero args
    {jsy_op0: '@=>', jsy_op: /@=>(>?\*?)/,
        pre: '(()=>', post: ')',
        opResolve: bindLambdaOpZero(lambda_arrow_tbl) }
  , {jsy_op0: '@::', jsy_op: /@::(>?\*?)/,
        pre: '(()=>{', post: '})',
        opResolve: bindLambdaOpZero(lambda_block_tbl) } ];


  const at_lambda_iife_offside = [
    {jsy_op: '::!', pre: '{(()=>{', post: '})()}', is_kw_close: true}
  , {jsy_op: '::!>', pre: '{(async ()=>{', post: '})()}', is_kw_close: true}

  , {jsy_op0: '@!*>', jsy_op: /@!\*>/, pre: '((async function *(){', post: '}).call(this))'}
  , {jsy_op0: '@!*[]', jsy_op: /@!\*\[\]/, pre: '[... (function *(){', post: '}).call(this)]'}
  , {jsy_op0: '@!*#', jsy_op: /@!\*#/, pre: '([... (function *(){', post: '}).call(this)])'}
  , {jsy_op0: '@!*', jsy_op: /@!\*/, pre: '((function *(){', post: '}).call(this))'}

  , {jsy_op0: '@!=>', jsy_op: /@!=>(>?\*?)/,
        pre: '((()=>', post: ')())',
        opResolve: bindLambdaOpZero(iife_arrow_tbl) }

  , {jsy_op0: '@!::', jsy_op: /@!::(>?\*?)/,
        pre: '((()=>{', post: '})())',
        opResolve: bindLambdaOpZero(iife_expr_tbl) }

  , {jsy_op0: '@!', jsy_op: /@!(>?\*?)(?!=>)/,
        pre: '((()=>{', post: '})())',
        opResolve: bindLambdaOpZero(iife_expr_tbl) } ];

  // Like lambdas without closing over `this`
  // @~::   @~::>   @~::>*   @~::*
  const func_block_tbl = {
    '': a =>({pre: `(function (${a}) {`, post: '})'})
  , '>': a =>({pre: `(async function(${a}) {`, post: '})'})
  , '>*': a =>({pre: `(async function * (${a}) {`, post: '})'})
  , '*': a =>({pre: `(function * (${a}) {`, post: '})'}) };


  const at_func_offside = [
    {jsy_op0: '@~::', jsy_op: /@~(.*?)::(>?\*?)/,
        pre: '(function () {', post: '})',
        opResolve(p) {
          let [_, args, suffix] = p.content.match(this.jsy_op);
          let entry = func_block_tbl[suffix];
          if (undefined === entry) {
            throw new SyntaxError(`JSY function expression unrecognized specifier ("${suffix}")`) }
          return entry(args || '')} } ];

  const as_op_prefix = (rx, sep=rx.source, inject_sep=sep) =>({
    prefix: sep, rx_prefix: rx
  , opPrefixResolve(p, at_op) {
      let at_res = at_op.opResolve ? at_op.opResolve(p) : at_op;
      let pre = inject_sep + (at_res.pre || '');
      return {... at_res, pre} } });


  const jsy_prefix_operators = [
    as_op_prefix(/;/)
  , as_op_prefix(/,/)
  , as_op_prefix(/\?(\.?)/, '?', '?.')];


  function * at_op_for_prefix(at_op, jsy_prefix_operators) {
    let {jsy_op0, jsy_op} = at_op;
    if (! /^[@?]/.test(jsy_op0 || jsy_op) ) {
      return}

    if (undefined === jsy_op0) {
      jsy_op0 = jsy_op;
      jsy_op = new RegExp(regexp_from_jsy_op(jsy_op, false)); }

    else if ('string' === typeof jsy_op) {
      jsy_op = new RegExp(regexp_from_jsy_op(jsy_op, false)); }

    else if ('function' !== typeof jsy_op.exec) {
      throw new Error('Unexpected jsy_op type') }

    for (let jsy_prefix_op of jsy_prefix_operators) {
      yield {...at_op,
        jsy_op0: jsy_prefix_op.prefix + jsy_op0
      , jsy_op: new RegExp(`${jsy_prefix_op.rx_prefix.source}${jsy_op.source}`, jsy_op.flags)
      , foldTop: true
      , opResolve: p => jsy_prefix_op.opPrefixResolve(p, at_op) }; } }


  function apply_prefix_operators(at_inner_operators, jsy_prefix_operators) {
    let res = [];
    for (let at_op of at_inner_operators) {
      res.push(... at_op_for_prefix(at_op, jsy_prefix_operators)); }
    res.push(... at_inner_operators);
    return res}

  // Order matters here -- list more specific matchers higher (first) in the order
  const at_outer_offside = [
    {jsy_op: '::()', pre: '(', post: ')', nestBreak: true}
  , {jsy_op: '::{}', pre: '{', post: '}', nestBreak: true}
  , {jsy_op: '::[]', pre: '[', post: ']', nestBreak: true}
  , {jsy_op: '::', pre: ' {', post: '}', nestBreak: true, is_kw_close: true} ];

  const at_inner_offside_basic = [
    {jsy_op: '@:', pre: '({', post: '})', implicitSep: ',', isFoldable: true}
  , {jsy_op: '@#', pre: '([', post: '])', implicitSep: ',', isFoldable: true}
  , {jsy_op: '@()', pre: '(', post: ')', implicitSep: ',', isFoldable: true}
  , {jsy_op: '@{}', pre: '{', post: '}', implicitSep: ',', isFoldable: true}
  , {jsy_op: '@[]', pre: '[', post: ']', implicitSep: ',', isFoldable: true}
  , {jsy_op: '@', pre: '(', post: ')', implicitSep: ',', isFoldable: true} ];


  const at_inner_offside_core = /* #__PURE__ */ [].concat(
    at_func_offside
  , at_lambda_offside
  , at_lambda_iife_offside
  , at_inner_offside_basic);


  const at_experimental = [
    /* experimental ideas; may be removed at any time */];


  const at_unknown_ops = [
    {jsy_op0: '?@', jsy_op: /\?@[^\w\s]+/,}
  , {jsy_op0: ';@', jsy_op: /;@[^\w\s]+/,}
  , {jsy_op0: ',@', jsy_op: /,@[^\w\s]+/,}
  , {jsy_op0: '::', jsy_op: /::[^\w\s]+/,}
  , {jsy_op0: '@', jsy_op: /@[^\w\s]+/,} ];


  const at_inner_offside = /* #__PURE__ */
    apply_prefix_operators(
      at_inner_offside_core.flat()
    , jsy_prefix_operators);


  const op_template_str ={nestBreak: true};

  const at_offside = /* #__PURE__ */ [].concat(
    at_outer_offside
  , at_inner_offside
  , at_experimental);


  const at_offside_map = /* #__PURE__ */ at_offside.reduce(
    (m, ea) => {
      if (ea.jsy_op0) {
        m[ea.jsy_op0] = ea;}

      if ('string' === typeof ea.jsy_op) {
        m[ea.jsy_op] = ea;}
      return m}
  , {});


  function kwExpandOp(p) {
    return {__proto__: this, pre: p.kw + this.pre} }

  const extra_jsy_ops = {
    kw_normal:{jsy_op: 'kw', pre: ' (', post: ')', kwExpandOp, in_nested_block: true}
  , kw_explicit:{jsy_op: 'kw', pre: '', post: '', kwExpandOp, in_nested_block: true}
  , tmpl_param:{jsy_op: 'tmpl_param', pre: '', post: '', in_nested_block: true}
  , jsx_param:{jsy_op: 'jsx_param', pre: '', post: '', in_nested_block: true} };

  const keywords_with_args = ['if', 'while', 'for await', 'for', 'switch'];
  const keywords_zero_args = ['catch'];

  const keywords_locator_parts = /* #__PURE__ */ [].concat(
    keywords_with_args.map(e => `else ${e}`)
  , keywords_with_args
  , keywords_zero_args);

  const regexp_keyword = sz => {
    sz = sz.replace(/[ ]+/g, '[ ]+'); // allow one or more spaces
    return `(?:${sz})` };// using a non-matching group

  const re_keyword_space_prefix =  /^(?:[ \t]*)/.source ; // start of line and indent
  const re_keyword_trailer =  /(?:[ \t]*(?=[^\w,:;=]|$))/.source ;

  const rx_keyword_ops = /* #__PURE__ */ new RegExp(
    re_keyword_space_prefix
      + `(?:${keywords_locator_parts.map(regexp_keyword).join('|')})`
      + re_keyword_trailer
    , 'g' );// global regexp for lastIndex support

  const regexp_from_offside_op = offside_op =>
    regexp_from_jsy_op(offside_op.jsy_op, true);

  const rx_offside_ops = /* #__PURE__ */ new RegExp(
    at_offside
      .map(regexp_from_offside_op)
      .filter(Boolean)
      .join('|')
  , 'g' );// global regexp

  const rx_unknown_ops = /* #__PURE__ */ new RegExp(
    at_unknown_ops
      .map(regexp_from_offside_op)
      .filter(Boolean)
      .join('|')
  , 'g' );// global regexp

  function inject_dedent(offside_lines, trailing_types) {
    if ('function' !== typeof trailing_types) {
      const s_trailing_types = new Set(
        trailing_types || ['comment_eol']);
      trailing_types = k => s_trailing_types.has(k);}

    for (const ln of offside_lines) {
      if (ln.is_blank) {continue}

      const {len_dedent, len_indent, len_inner} = ln;

      const offside_dedent ={
        type: 'offside_dedent'
      , len_dedent, len_indent};

      if (len_inner) {
        offside_dedent.len_inner = len_inner;}

      const last = ln.content.pop();
      if (last.multiline || trailing_types(last.type)) {
        ln.content.push(offside_dedent, last); }
      else {
        ln.content.push(last, offside_dedent); } } }

  const SourceLocation ={
    __proto__: null

  , get [Symbol.toStringTag]() {return '«SourceLocation»'}
  , toString() {return `«${this.line}:${this.column}»`}
  , get column() {return this.pos - this.line_pos}

  , create(source, file) {
      const root ={
        line:0, pos:0, line_pos:0
      , __proto__: SourceLocation};

      if (null != file) {
        root.file = file;}

      Object.defineProperties(root,{
        __root__:{value: root}
      , source:{value: source} } );
      return Object.freeze(root) }

  , nextLine() {
      let {line, pos} = this;
      line += 1;
      return Object.freeze({
        line, pos, line_pos: pos,
        __proto__: this.__root__}) }

  , move(char_len) {
      if ('string' === typeof char_len) {
        char_len = char_len.length;}
      else if ('number' === typeof char_len) {
        char_len |= 0;}
      else throw new TypeError('Expected move to be a string or number')

      let {line, pos, line_pos} = this;
      pos += char_len;
      return Object.freeze({
        line, pos, line_pos,
        __proto__: this.__root__}) }

  , distance(other) {
      const lines = this.line - other.line;
      const chars = this.pos - other.pos;
      return {lines, chars} }

  , slice(other) {
      if (this.source !== other.source) {
        throw new Error(`Locations from different sources`) }
      return this.source.slice(this.pos, other.pos) }

  , syntaxError(message) {
      const err = new SyntaxError(message);
      err.src_loc = this;
      return err} };

  var createLoc = SourceLocation.create;

  const rx_lines = /(\r\n|\r|\n)/ ;
  const rx_indent = /^([ \t]*)(.*)$/ ;
  const rx_indent_order = /^[\t]*[ ]*$/ ;

  function basic_offside_scanner(source, feedback) {
    if (null == feedback) {
      feedback ={
        warn(msg, ...args) {console.warn(`[Offside Warning]:: ${msg}`, ...args);} }; }

    const all_lines = [];
    const q_raw_lines = source.split(rx_lines);

    const offside_line_proto ={
      __proto__: null
    , get source() {
        const {start, end} = this.loc;
        return start.slice(end)} };

    let loc_tip = createLoc(source, feedback.file);

    while (0 !== q_raw_lines.length) {
      const loc ={start: loc_tip = loc_tip.nextLine()};

      const src_line = q_raw_lines.shift() || '';
      loc.end = loc_tip = loc_tip.move(src_line);

      const src_line_end = q_raw_lines.shift() || '';
      loc_tip = loc_tip.move(src_line_end);


      const match = rx_indent.exec(src_line);
      const loc_indent = loc.start.move(match[1]);
      const is_blank = 0 === match[2].length;

      if (! rx_indent_order.test(match[1])) {
        throw loc.start.syntaxError(`Mixed tab and space indent (${loc_indent})`, ) }

      const raw ={
        line: src_line
      , line_end: src_line_end
      , indent: match[1]
      , content: match[2]};

      let node;
      if (is_blank) {
        node ={
          type: 'offside_blank_line', loc
        , is_blank}; }

      else {
        const indent_node ={
          type: 'offside_indent',
          loc:{
            start: loc.start
          , end: loc_indent}
        , len_indent: match[1].length
        , indent: match[1]};

        const conent_node ={
          type: 'offside_content',
          loc:{
            start: loc_indent
          , end: loc.end}
        , len_indent: match[1].length
        , indent: match[1]
        , content: match[2]};

        node ={
          __proto__: offside_line_proto
        , type: 'offside_line', loc
        , indent: indent_node
        , content: conent_node
        , len_indent: match[1].length}; }

      Object.defineProperties(node,{raw: {value: raw}});
      all_lines.push(node); }

    add_indent_info(all_lines);
    return all_lines}


  function add_indent_info(all_lines) {
    let len_dedent = 0; // how far to dedent to next outer level
    let len_stack = [0];
    // work backwards from the file end
    for (let i = all_lines.length-1 ; i>=0 ; i--) {
      let ln = all_lines[i];
      if (ln.is_blank) {continue}

      ln.len_dedent = len_dedent;

      // how many indent prefix chars per line
      let len_indent = ln.len_indent;

      let len_inner;
      while (len_stack[0] > len_indent) {
        len_inner = len_stack.shift();}

      if (len_stack[0] < len_indent) {
        // len_indent is the new stack tip
        len_stack.unshift(len_indent); }

      if (len_inner) {
        ln.len_inner = len_inner;}

      len_dedent = len_indent;} }

  function ensure_indent(ctx, scanner) {
    const ln_first = scanner.ln_first;
    if (undefined === ln_first) {return true}
    const len_first_indent = ln_first.len_indent;

    const d_dedent = ctx.ln.len_indent - len_first_indent;
    if (d_dedent < 0) {
      throw ctx.ln.indent.loc.end.syntaxError(
`Invalid indent level in ${scanner.description}. (${ctx.ln.indent.loc.end})  --  current indent: ${ctx.ln.len_indent}  start indent: ${len_first_indent} from (${ln_first.loc.start})`  ) }
    else return true}


  function ensure_progress(loc0, loc1) {
    if (loc0.pos == loc1.pos) {
      throw new Error(`Scanner failed to make progress (${loc1})`) }

    if (loc0.pos > loc1.pos) {
      throw new Error(`Scanner went backward (${loc1} from ${loc0})`) } }


  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  class DispatchScanner {
    constructor(disp_name) {
      this.disp_name = disp_name || 'root';
      this.by_kind = {};
      this.by_op = {};}

    startCompile() {
      Object.defineProperties(this,{
        rx_list:{value: (this.rx_list || []).slice()} } );
      this.by_kind = Object.assign({}, this.by_kind);
      this.by_op = Object.assign({}, this.by_op);
      return this}

    addScannerList(scannerList) {
      for (const scanner of scannerList) {
        if (scanner) {
          this.addScanner(scanner);} }
      return this}

    addScanner(scanner) {
      if (scanner.withDispatch) {
        scanner = scanner.withDispatch(this);}

      if (scanner.is_body) {
        this.ds_body = scanner;}

      this.by_op[scanner.op] = scanner;}

    addRegExpScanner(scanner, kind, re_disp) {
      if (kind) {
        this.by_kind[kind] = scanner.op;
        this.rx_list.push(new RegExp(re_disp, 'g')); }
      return this}

    finishCompile(ds_body) {
      if (undefined === ds_body) {
        ds_body = this.ds_body;}
      return Object.defineProperties(this,{
        ds_body:{value: ds_body, writable: true} } ) }


    clone0() {
      if (undefined !== this.level) {
        throw new Error(`Invalid clone0`) }
      return this.cloneWithScanner()}

    cloneWithScanner(...scanners) {
      return this.cloneWithScannerList(scanners)}
    cloneWithScannerList(scanners) {
      const self = Object.create(this);
      self.level = 1 + 0|self.level;
      self.description = self.description.replace(
        /\(\d+\)/, `(${self.level})`);

      self.startCompile();
      self.addScannerList(scanners);
      self.finishCompile();
      return self}


    get_active_dispatch(ctx) {
      return ctx[`dispatch_${this.disp_name}`]}
    set_active_dispatch(ctx) {
      ctx.dispatch = ctx[`dispatch_${this.disp_name}`] = this;}


    newline(ctx, is_blank) {}

    scan(ctx, idx0) {
      const loc0 = ctx.loc_tip;
      const res = this._scan(ctx, idx0);
      ensure_progress(loc0, ctx.loc_tip);
      return res}

    _scan(ctx, idx0) {
      this.set_active_dispatch(ctx);

      if (undefined === this.ln_first) {
        if (undefined === this.level) {
          throw new Error('Scanner with level: undefined')}

        this.ln_first = ctx.ln;}

      ensure_indent(ctx, this);

      const source = ctx.ln_source; // slice is done by setting lastIndex
      let match=null, idx1 = Infinity;

      for (const rx of this.rx_list) {
        rx.lastIndex = idx0; // regexp powered source.slice()

        const m = rx.exec(source);
        if (null !== m && m.index < idx1) {
          idx1 = m.index;
          match = m;} }

      if (null === match) {
        return this.ds_body.scan(ctx, idx0)}

      if (idx0 !== idx1) {
        return this.ds_body.scan_fragment(
          ctx, source.slice(idx0, idx1)) }

      const kind = match.filter(Boolean)[1];
      const op = this.by_kind[kind];
      const op_scanner = this.by_op[op];
      if (! op_scanner) {
        throw new Error(`No scanner registered for « ${kind} »`) }

      return op_scanner.scan(ctx, idx1)}

    scan_fragment(ctx, content) {
      throw new Error(`${this.description} does not support fragments`) } }


  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  class DispatchFirstlineScanner extends DispatchScanner {
    clone0() {
      const self = super.clone0();
      self.ds_body = self.ds_body.clone0();
      return self}
    scan(ctx, idx0) {
      ctx.scanner = this.ds_body;
      return super.scan(ctx, idx0)} }


  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  class EmbeddedDispatchScanner extends DispatchScanner {
    constructor(options) {
      super(options.disp_name);
      Object.assign(this, options);
      this._compileForInit();}

    _compileForInit() {
      this.startCompile();
      this.addScannerList(this.scannerList);
      this.finishCompile();} }


  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  class BaseSourceScanner {
    constructor(options) {
      Object.assign(this, options);
      this._compileForInit();}

    _compileForInit() {}

    withDispatch(ds) {return this}

    emit_ast(ctx, content, ast_type) {
      const start = ctx.loc_tip;
      const end = ctx.loc_tip = start.move(content || 0);
      const ast ={type: ast_type || this.op, loc: {start, end}, content};
      this.ast_extend(ctx, ast);
      ctx.parts.push(ast);
      return ast}

    ast_extend(ctx, ast) {}

    newline(ctx, is_blank) {}
    scan_fragment(ctx, content) {
      throw new Error(`Scanner (${this.description}) does not support fragments`) }
    scan(ctx, idx0) {
      throw new Error(`Scanner (${this.description}) does not support scans`) } }


  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  class SourceCodeScanner extends BaseSourceScanner {
    get is_body() {return true}

    scan_fragment(ctx, content) {
      this.scan_content(ctx, content); }

    scan(ctx, idx0) {
      this.scan_content(ctx, ctx.ln_source.slice(idx0)); }

    scan_content(ctx, content) {
      if (content) {
        this.emit_ast(ctx, content); } } }


  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  class NestedCodeScanner extends SourceCodeScanner {
    constructor(options) {
      super(options);
      if (! this.char_pairs) {
        throw new Error('Missing required char_pairs mapping') }

      const chars = Object.keys(this.char_pairs).join('\\');
      this.rx = new RegExp(`([${chars}])`);}

    withOuter(options) {
      const scanner = options.scanner;
      if ('function' !== typeof scanner.scan) {
        throw new Error(`Expected valid outer scanner`) }
      delete options.scanner;

      const self = Object.create(this,{
        restore_scanner:{value: scanner} } );
      Object.assign(self, options);
      return self}

    scan_content(ctx, nested_content) {
      const {stack, char_pairs} = this;

      let content = '';
      for (const tok of nested_content.split(this.rx)) {
        const p = 1 === tok.length ? char_pairs[tok] : undefined;

        if (undefined === p) {
          content += tok;
          continue}

        if (true === p) {
          content += tok;
          stack.push(tok);
          continue}

        const tip = stack.pop();
        if (tip !== p) {
          const loc = ctx.loc_tip.move(content);
          throw loc.syntaxError(
      `Mismatched nesting in ${this.description} (${loc})`) }

        if (0 !== stack.length) {
          content += tok;
          continue}

        if (content) {
          this.emit_ast(ctx, content); }
        this.emit_ast(ctx, tok, this.ast_end || 'nested_end');
        ctx.scanner = this.restore_scanner;
        return}

      // all tokens with non-zero stack
      if (content) {
        this.emit_ast(ctx, content); } } }


  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  class RegExpScanner extends BaseSourceScanner {

    _compileForInit() {
      const {rx_open, rx_close} = this;
      const rx_disp = new RegExp(
        (rx_open ? rx_open.source : '') + rx_close.source);

      const rx_resume = new RegExp(
        '^' + rx_close.source);

      Object.defineProperties(this,{
        rx_disp:{value: rx_disp}
      , rx_resume:{value: rx_resume} } ); }

    withDispatch(ds) {
      this.compileForDispatch(ds);
      return this}

    compileForDispatch(ds) {
      if (undefined === this.kind) {return}

      const match = this.rx_disp.exec(this.example);
      if (null === match || this.kind !== match[1] || null == match[2]) {
        throw new Error(`Invalid scanner regexp and/or example (${this.description})`) }

      ds.addRegExpScanner(this, this.kind, this.rx_disp.source); }



    newline(ctx, is_blank) {
      if (! this.multiline && ! this.allow_blank_close) {
        throw ctx.ln.loc.end.syntaxError(
    `Newline in ${this.description} (${ctx.ln.loc.end})`) } }

    ast_extend(ctx, ast) {
      const ln = this.ln_first || ctx.ln;
      if (undefined !== ln.len_inner) {
        ast.block_indent = ln.len_inner;}
      return ast}

    scan(ctx, idx0) {
      const match = this.rx_disp.exec(ctx.ln_source.slice(idx0));
      if (null === match) {
        throw ctx.loc_tip.syntaxError(
    `Invalid scan ${this.description}. (${ctx.loc_tip})`) }

      const [content, open, close] = match;

      const t_content = this.nestTrim(content, close, false);
      if (null != t_content) {
        this.ast_scan_match({open, close},
          this.emit_ast(ctx, t_content,) ); }
      return this.post_scan(ctx, close)}

    scan_continue(ctx, idx0) {
      ensure_indent(ctx, this);

      const match = this.rx_resume.exec(ctx.ln_source.slice(idx0));
      if (null === match) {
        throw ctx.loc_tip.syntaxError(
    `Invalid scan continue ${this.description}. (${ctx.loc_tip})`) }

      const [content, close] = match;

      const t_content = this.nestTrim(content, close, true);
      if (null != t_content) {
        this.ast_scan_match({close},
          this.emit_ast(ctx, t_content,) ); }
      return this.post_scan(ctx, close)}

    ast_scan_match(match, ast) {}

    nestTrim(content, close, isContinue) {return content}

    post_scan(ctx, close) {
      if (! close) {
        if (this.invert_close) {
          // e.g. no '\' continuations at end of line
          return true}

        if (! this.allow_blank_close) {
          ctx.scanner = this.continueScanner(ctx);}
        return}

      else if (this.invert_close) {
        // e.g. '\' continuations at end of line
        ctx.scanner = this.continueScanner(ctx);}

      return this.nestMatch(close,
        ctx, this.hostScanner || this) }

    nestMatch(close, ctx, hostScanner) {
      const nesting = this.nesting;
      if (undefined !== nesting) {
        return this.nestWith(
          nesting[close],
          ctx, hostScanner) }
      return true }// pop ctx.scanner

    nestWith(nested, ctx, hostScanner) {
      if (true === nested || undefined === nested || null === nested) {
        return true }// pop ctx.scanner

      else if (hostScanner === nested || 'host' === nested) {
        ctx.scanner = hostScanner.continueScanner(ctx);
        return}

      else if ('function' === typeof nested.nestedScanner) {
        ctx.scanner = nested.nestedScanner(ctx);
        return}

      else if ('function' === typeof nested) {
        return nested(ctx, hostScanner) }

      return nested}


    nestedScanner(ctx) {
      return this._asNestedScanner(ctx, 'nest',{} ) }

    continueScanner(ctx) {
      return this._asNestedScanner(ctx, 'cont',{
        op: this.op_continue || this.op
      , continueScanner(ctx) {return this}
      , scan(ctx, idx0) {
          this.scan_continue(ctx, idx0);} } ) }

    _asNestedScanner(ctx, desc, body) {
      const restore_scanner = ctx.scanner;
      const self ={
        __proto__: this
      , description: `${this.description} (${desc})`
      , ln_first: ctx.ln_first || ctx.ln

      , _pop_scanner(ctx) {
          if (this.op_pop) {
            this.emit_ast(ctx, '', this.op_pop); }
          ctx.scanner = restore_scanner;}

      , scan(ctx, idx0) {
          if (true === super.scan(ctx, idx0)) {
            this._pop_scanner(ctx);} }

      , scan_continue(ctx, idx0) {
          if (true === super.scan_continue(ctx, idx0)) {
            this._pop_scanner(ctx);} } };

      return Object.assign(self, body) } }


  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  class MultiLineScanner extends RegExpScanner {
    newline(ctx, is_blank) {}
    get multiline() {return true}

    ast_extend(ctx, ast) {
      //let ln = this.ln_first || ctx.ln
      let col = ast.loc.start.column;
      let mlctx = this.mlctx ??= {col};

      if (col < mlctx.col) {
        mlctx.col = col;}

      ast.mlctx = mlctx;
      return ast} }


  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  class TaggedRegExpScanner extends RegExpScanner {
    withTag(ctx, tag, hostScanner) {
      const rx_replace = this.rx_replace || /tag/g;

      const re_open = this.rx_open.source
        .replace(rx_replace, tag);
      const re_close = this.rx_close.source
        .replace(rx_replace, tag);

      const rx_open = new RegExp(re_open);
      const rx_close = new RegExp(re_close);
      const rx_disp = new RegExp(re_open + rx_close.source);
      const rx_resume = new RegExp('^' + re_close);

      const self ={__proto__: this, hostScanner,
        rx_open, rx_close, rx_resume, rx_disp,
        tag, ln_first: ctx.ln
      , compileForDispatch(ds) {
          // skip testing example for second pass of this object
          ds.addRegExpScanner(this, this.kind, this.rx_disp.source); } };

      self.tagScanner(ctx, tag, hostScanner);
      return self}

    tagScanner(ctx, tag, hostScanner) {} }


  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  class DynamicScanner extends MultiLineScanner {
    scan(ctx, idx0) {
      const leader_match = this.rx_disp.exec(ctx.ln_source.slice(idx0));

      const self = this.withLeaderTag(ctx, leader_match[2]);
      return self._leader.scan(ctx, idx0)}

    withLeaderTag(ctx, tag) {
      const self ={
        __proto__: this
      , __root__: this.__root__ || this
      , ln_first: ctx.ln};

      self._trailer = this.trailer && this.trailer.withTag(ctx, tag, self);
      self._leader = this.leader.withTag(ctx, tag, self);
      return self} }


  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  class EmbeddedDynamicScanner extends DynamicScanner {
    continueScanner(ctx) {
      ensure_indent(ctx, this);
      const ds_body = this.ds_body.cloneWithScanner(this._trailer);

      // inherit ln_first
      ds_body.ln_first = 
        ds_body.disp_name === ctx.dispatch.disp_name
          ? ctx.dispatch.ln_first
          : this.ln_first || ctx.ln;

      return ds_body}

    andDispatchWith(options) {
      options.scannerList =[... options.scannerList, this];
      const ds_body = new EmbeddedDispatchScanner(options);
      this.ds_body = ds_body;
      return ds_body} }

  function bind_context_scanner(context_scanners) {
    if (! Object.isFrozen(context_scanners) || ! Array.isArray(context_scanners)) {
      throw new TypeError(`Expected a frozen array of context scanners`) }

    const cache = bind_context_scanner.cache || new WeakMap();
    if (cache !== bind_context_scanner.cache) {
      bind_context_scanner.cache = cache;}

    let res = cache.get(context_scanners);
    if (undefined === res) {
      res = compile_context_scanner(context_scanners);
      cache.set(context_scanners, res);}
    return res}


  function compile_context_scanner(context_scanners) {
    const ds_first = build_composite_scanner();
    return context_scanner

    function context_scanner(offside_lines) {
      const ctx ={scanner: ds_first.clone0()};

      for (const ln of offside_lines) {
        if (ln.is_blank) {
          delete ln.content;
          ctx.scanner.newline(ctx, true);
          continue}


        ctx.parts = [];
        ctx.ln = ln;

        scan_source(ctx, ln.content);

        if (0 === ctx.parts.length) {
          throw new Error(`No parts generated by context scanner`) }

        ln.content = ctx.parts;
        ctx.scanner.newline(ctx, false);}

      ctx.scanner.newline(ctx, true);
      return offside_lines}


    function scan_source(ctx, ln_content) {
      const ln_source = ctx.ln_source = ln_content.content;
      const loc_start = ctx.loc_tip = ctx.loc_start = ln_content.loc.start;
      const pos0 = loc_start.pos;

      while (true) {
        const idx0 = ctx.loc_tip.pos - pos0;
        if (idx0 >= ln_source.length) {
          return }// done with this line

        ctx.scanner.scan(ctx, idx0); } }


    function build_composite_scanner() {
      const ds_body = new DispatchScanner().startCompile();
      ds_body.description = 'JSY Dispatch scanner (0)';
      const ds_first = new DispatchFirstlineScanner().startCompile();
      ds_first.description = 'Firstline JSY Dispatch scanner (0)';

      for (const scanner of context_scanners) {
        if (! scanner) {continue}

        const ds = scanner.firstline ? ds_first : ds_body;
        ds.addScanner(scanner);}

      ds_body.finishCompile();
      return ds_first.finishCompile(ds_body)} }

  function scan_offside_contexts(source, feedback, disp_name, context_scanners) {
    // see scan_javascript and scan_clike for good context_scanners
    const context_scanner = bind_context_scanner(disp_name);
    return context_scanner(basic_offside_scanner(source, feedback)) }

  const scanner_source =
    new SourceCodeScanner({
        description: 'Source Code Scanner'
      , op: 'src'});

  const scanner_nestedSrc =
    new NestedCodeScanner({
      op: 'src', description: 'Template parameter source'
    , char_pairs:{
        '{': true, '}': '{'
      , '(': true, ')': '('
      , '[': true, ']': '['} });

  const scanner_hashbangDirective =
    new RegExpScanner({
        description: 'Hashbang directive'
      , example: '#!/usr/bin/env node'
      , op: 'hashbang', kind:'#!'
      , rx_open: /^(#!)/, rx_close: /.*($)/,
        firstline: true
      , allow_blank_close: true});

  const scanner_commentEOL =
    new RegExpScanner({
        description: 'Comment to end of line'
      , example: '// comment'
      , op: 'comment_eol', kind:'//'
      , rx_open: /(\/\/)/, rx_close: /.*($)/,
        allow_blank_close: true});

  const scanner_commentMultiLine =
    new MultiLineScanner({
        description: 'Multi-line comment'
      , example: '/* comment */'
      , op: 'comment_multi', kind:'/*'
      , rx_open: /(\/\*)/, rx_close: /.*?(\*\/|$)/,});

  const scanner_strSingle =
    new RegExpScanner({
        description: 'Single quote string literal'
      , example: "'single quote'"
      , op: 'str1', kind:"'"
      , rx_open: /(')/, rx_close: /(?:\\.|[^'])*('|$)/,});

  const scanner_strDouble =
    new RegExpScanner({
        description: 'Double quote string literal'
      , example: '"double quote"'
      , op: 'str2', kind:'"'
      , rx_open: /(")/, rx_close: /(?:\\.|[^"])*("|$)/,});

  const scanner_preprocessor =
    new RegExpScanner({
        description: 'Preprocessor directive'
      , example: '# IF platform === "web"'
      , op: 'preprocessor', kind:'#'
      , rx_open: /^\s*(#)/, rx_close: /.*?([\\]?)\s*$/,
        invert_close: true // preprocessor uses '\' continuations
      , allow_blank_close: true});


  const clike_context_scanners = Object.freeze([
    scanner_source
  , scanner_hashbangDirective
  , scanner_commentEOL
  , scanner_commentMultiLine
  , scanner_strSingle
  , scanner_strDouble
  , scanner_preprocessor]);

  const scanner_regexp =
    new RegExpScanner({
        description: 'RegExp literal'
      , example: '/regexp/'
      , op: 'regexp'
      , kind: '/'

      , /*
        rx_open: rx_or_parts @:
          opts: @[]
            /(\/)(?![\/\*])/    // start of a potential regexp literal, but not a comment

            @{}                 // ...complex regexp grammar...
              pre: ''
              opts: @[]
                /\\./           // ...any escaped character...
                /[^\\\/\[]/     // ...or any non-special character...

                @{}             // ... or a bracket [] expression...
                  pre: '\\['        // started with a '[' character
                  opts: @[]
                    /\\./           // ...with any escaped character
                    /[^\]]/         // ...or any non-escaped non-ending ']' character
                  post: '*\\]'      // ended with an ending ']' character

              post: '+'         // one or more interior expressions

            /(?=\/)/            // (lookahead) end of a regexp literal
        */

        rx_open: new RegExp(
          /(\/)(?![\/\*])/ .source + // a RegExp start but not a comment
          /(?:\\.|[^\\\/\[]|\[(?:\\.|[^\]])*\])+/ .source)

      , rx_close: /(\/[a-z]*)\s*(?=[;.,)\]}]|$)/  // inspired by vim's syntax highlighting end

      , });//multiline: false // spec https://tc39.es/ecma262/#sec-literals-regular-expression-literals


  const scanner_strTemplate =
    new MultiLineScanner({
        description: 'Template quote string literal'
      , example: '`template string`'
      , op: 'str_template'
      , kind: '`'
      , rx_open: /(`)\\?/
      , rx_close: /(?:\\.|\$(?!{)|[^\$`\\])*(`|\${|$)/
      , nesting:{
          '${': templateArgNesting}

      , ast_scan_match(scan, ast) {
          if ('`' == scan.open) {
            ast.tmpl_opened = true;}
          if ('`' == scan.close) {
            ast.tmpl_closed = true;} } });

  function templateArgNesting(ctx, hostScanner) {
    const src = scanner_nestedSrc.withOuter({
      scanner: hostScanner.continueScanner(ctx)
    , stack:['{' ]// from the template parameter opening
    , ast_end: 'template_param_end'});

    src.emit_ast(ctx, '', 'template_param');

    ctx.scanner = ctx.dispatch_root.cloneWithScanner(src);}



  const js_context_scanners = Object.freeze([
    scanner_regexp
  , scanner_strTemplate
  , ... clike_context_scanners]);

  const scanner_jsxContent =
    new SourceCodeScanner({
        description: 'JSX Content Scanner'
      , op: 'jsx_content'});

  const scanner_jsxContentExpr =
    new RegExpScanner({
        description: 'JSX Content Expression'
      , example: '{ param }'
      , op: 'jsx_content_expr'
      , kind: '{'
      , rx_open: /\s*({)/,
        rx_close: /()/,

        nestTrim(content, close, isContinue) {}
      , post_scan(ctx) {jsxArgNesting(ctx, null);} });

  const scanner_jsxAttrNameValue =
    new RegExpScanner({
        description: 'JSX attribute name value'
      , op: 'jsx_attr_name'
      , rx_open: /\s*([a-zA-Z0-9_:.\-]+)/,
        rx_close: /\s*(=)\s*/,});

  const scanner_jsxAttrNameOnly =
    new RegExpScanner({
        description: 'JSX attribute name only'
      , op: 'jsx_attr_name_only'
      , rx_open: /\s*([a-zA-Z0-9_:.\-]+)/,
        rx_close: /()/,

        post_scan(ctx, close) {
          return this.nestMatch(close,
            ctx, this.hostScanner || this) } });

  const scanner_jsxAttrSingle =
    new RegExpScanner({
        description: 'JSX Single quote attribute literal'
      , multiline: true
      , op: 'jsx_attr_str1'
      , rx_open: /\s*(')/,
        rx_close: /(?:\\.|[^'])*(')\s*/,});

  const scanner_jsxAttrDouble =
    new RegExpScanner({
        description: 'JSX Double quote attribute literal'
      , multiline: true
      , op: 'jsx_attr_str2'
      , rx_open: /\s*(")/,
        rx_close: /(?:\\.|[^"])*(")\s*/,});

  const scanner_jsxTagClose =
    new TaggedRegExpScanner({
        description: 'JSX Close Tag'
      , example: '</tag>'
      , op: 'jsx_tag_close'
      , kind: '</'
      , multiline: true
      , rx_open: /(<\/)\s*/
      , rx_close: /([a-zA-Z0-9_:.\-]+)\s*>/

      , tagScanner(ctx) {
          this.restore_scanner = ctx.scanner;}

      , post_scan(ctx, close) {
          if (close !== this.tag) {
            throw ctx.loc_tip.syntaxError(
        `Mismatched JSX close tag "</${close}>", expected "</${this.tag}>". (${ctx.loc_tip})`) }

          ctx.scanner = this.restore_scanner;} });



  const scanner_jsxTag =
    new TaggedRegExpScanner({
        description: 'JSX Tag'
      , multiline: true
      , op: 'jsx_tag'
      , op_continue: 'jsx_tag_part'

      , rx_open: /(<)tag\b\s*/
      , rx_close: /\s*?($|\/>|[{'">]|[a-zA-Z0-9_:.\-]+=?)/

      , nesting:{
          '>': 'host' // use hostScanner
        , '/>': true }// pop ctx.scanner

      , nestingEnd:{
          '{': jsxArgNesting
        , '=': scanner_jsxAttrNameValue
        , "'": scanner_jsxAttrSingle
        , '"': scanner_jsxAttrDouble}

      , nestTrim(content, close, isContinue) {
          if (! this.nesting[close]) {
            content = content.slice(0, - close.length);}
          return content || null}

      , nestMatch(close, ctx, hostScanner) {
          let inner = this.nesting[close];
          if (undefined === inner) {
            inner = this.nestingEnd[close.slice(-1)]
              || scanner_jsxAttrNameOnly;}

          if (true !== inner && 'host' !== inner) {
            // we're actually pushign two scanners onto the stack
            // the first for this context, the second for the attribute
            ctx.scanner = hostScanner = this.continueScanner(ctx);}

          return this.nestWith(inner, ctx, hostScanner) } });

  function jsxArgNesting(ctx, hostScanner) {
    const src = scanner_nestedSrc.withOuter({
      scanner: null !== hostScanner
        ? hostScanner.continueScanner(ctx)
        : ctx.scanner
    , stack:['{' ]// from the jsx parameter opening
    , ast_end: 'jsx_param_end'});

    src.emit_ast(ctx, '{', 'jsx_param');

    ctx.scanner = ctx.dispatch_root.cloneWithScanner(src);}




  const scanner_jsx =
    new EmbeddedDynamicScanner({
        description: 'Embedded JSX expression'
      , example: '<section>content</section>'
      , kind:'<'
      , disp_name: 'jsx'
      , op: 'jsx'

      , // recognize by '<tag' followed by 'attr=' or '/>' or '>'
        rx_open: /(<)([a-zA-Z0-9_:.\-]+)(?=\s*?(?:$|\/>|>|\s{|\s[a-zA-Z0-9_:\-]+=?))/
      , rx_close: /.*$/

      , leader: scanner_jsxTag
      , trailer: scanner_jsxTagClose});


  const scanner_embedded_jsx =
    scanner_jsx.andDispatchWith({
      description: 'JSX Dispatch Scanner (0)'
    , disp_name: 'jsx'

    , scannerList:[
        scanner_jsxContent
      , scanner_jsxContentExpr] });

  const scanner_jsx_close_fragment =
    new RegExpScanner({
        description: 'Embedded JSX fragment close expression'
      , example: '</>'
      , op: 'jsx_frag_close'
      , kind: '</'
      , allow_blank_close: true

      , rx_open: /(<\/)\s*/
      , rx_close: /([a-zA-Z0-9_:.\-]*)\s*>/

      , post_scan(ctx, close) {
          if (close) {
            throw ctx.loc_tip.syntaxError(
        `Mismatched JSX fragment close tag "</${close}>", expected "</$>". (${ctx.loc_tip})`) }

          ctx.scanner = this.restore_scanner;} });

  const scanner_jsx_fragment =
    new RegExpScanner({
        description: 'Embedded JSX fragment expression'
      , example: '<></>'
      , op: 'jsx_frag'
      , kind: '<>'

      , rx_open: /(<>)/
      , rx_close: /.*($|<\/>)/

      , nestTrim(content, close, isContinue) {
          return '<>'}

      , post_scan(ctx) {
          const jsx_frag_close ={
            __proto__: scanner_jsx_close_fragment
          , restore_scanner: ctx.scanner};

          const ds_body = 
            scanner_embedded_jsx.cloneWithScanner(
              jsx_frag_close);

          ds_body.description = 'Fragment' + ds_body.description;
          const disp = ds_body.get_active_dispatch(ctx);
          ds_body.ln_first = disp && disp.ln_first || ctx.ln;

          ctx.scanner = ds_body;} });




  const jsx_context_scanners = Object.freeze([
    scanner_jsx_fragment
  , scanner_jsx
  , ... js_context_scanners]);

  function scan_javascript_with_jsx(source, feedback) {
    return scan_offside_contexts(source, feedback, jsx_context_scanners)}

  const _is_offside_dedent = part => 'offside_dedent' === part.type;
  function jsy_scan(source, feedback) {
    const jsy_ast = scan_javascript_with_jsx(source, feedback);

    inject_dedent(jsy_ast,['comment_eol']);

    for (let ln of jsy_ast) {
      if (ln.is_blank) {continue}

      let ln_parts = ln.content = transform_jsy_ops(ln.content, ln);

      let idx_tail = ln_parts.findIndex(_is_offside_dedent);
      let dedent = ln_parts[idx_tail--];

      while (idx_tail >= 0) {
        let tail = ln_parts[idx_tail--];
        if (undefined === tail) {
          continue}

        if (/^jsy_op/.test(tail.type)) {
          dedent.ends_with_jsy_op = true;
          tail.ending_jsy_op = true;}
        else if ('src' !== tail.type || tail.content.trim()) {
          break} } }

    return jsy_ast}



  function transform_jsy_ops(ln_parts, ln) {
    const res = [];

    for (let p, i=0; undefined !== (p = ln_parts[i]) ; i++) {
      if ('src' === p.type) {
        transform_jsy_part(res, p, ln);}
      else res.push(p);}


    // allow keywords at the start and in code blocks after "::"
    let kw_allowed = 'src' === res[0].type;
    for (let idx=0 ; undefined !== res[idx] ; idx ++) {
      if (kw_allowed) {
        transform_jsy_keyword(res, idx, ln);
        kw_allowed = false;}

      else if ('jsy_op' === res[idx].type) {
        kw_allowed = '::' === res[idx].op;} }

    return res}



  function transform_jsy_keyword(res, idx, ln) {
    const first = res[idx];

    rx_keyword_ops.lastIndex = 0;
    const kw_match = rx_keyword_ops.exec(first.content);
    if (! kw_match) {return false}

    const rest = kw_match.input.slice(rx_keyword_ops.lastIndex);
    if ('(' === rest[0]) {
      return res }// explicit keyword arguments

    const kw_start = first.loc.start;
    const kw_end = kw_start.move(kw_match[0]);
    const kw = kw_match[0].split(' ').filter(Boolean).join(' ');

    const after = rest ? null : res[1+idx];
    const explicit = after && 'jsy_op' === after.type && '@' === after.op;

    const kw_node ={
      type: 'jsy_kw', kw, 
      loc:{start: kw_start, end: kw_end}
    , len_indent: ln.len_indent
    , explicit};

    const post_node = as_src_ast(rest, kw_end, first.loc.end);

    res.splice(idx, 1, kw_node, post_node);
    return true}


  function transform_jsy_part(res, part, ln) {
     {
      rx_offside_ops.lastIndex = 0;

      let loc_tip = part.loc.start;
      while (true) {
        let start = loc_tip, idx0 = rx_offside_ops.lastIndex;
        const op_match = rx_offside_ops.exec(part.content);

        if (! op_match) {
          _tail(loc_tip, idx0);
          return res}

        if (idx0 < op_match.index) {
          start = loc_tip = _inner(loc_tip, idx0, op_match.index);
          idx0 = rx_offside_ops.lastIndex;}


        const op = op_match[0].trim();
        const end = loc_tip = loc_tip.move(op_match[0]);

        const op_part ={
          type: 'jsy_op', op
        , loc:{start, end}
        , len_indent: ln.len_indent
        , content: op_match[0]};

        const op_args = op_match.slice(1).filter(Boolean);
        if (op_args.length) {
          op_part.type = 'jsy_op_args';
          op_part.op_args = op_args;
          op_part.op = op_args.reduce(
            (op, p) => op.replace(p, ''), op); }

        res.push(op_part); } }

    function _unknown_ops(content, loc_tip, idx0) {
      rx_unknown_ops.lastIndex = idx0;
      const op_unknown = rx_unknown_ops.exec(content);
      if (op_unknown) {
        const op = op_unknown[0].trim();
        const start = loc_tip;
        const end = loc_tip = loc_tip.move(op_unknown[0]);
        res.push({
          type: 'jsy_unknown', op
        , loc:{start, end}
        , len_indent: ln.len_indent
        , content: op_unknown[0]}); } }

    function _inner(loc_tip, idx0, idx_content) {
      const pre = part.content.slice(idx0, idx_content);
      _unknown_ops(pre, loc_tip, idx0);

      const start = loc_tip;
      const end = loc_tip.move(pre);
      res.push(as_src_ast(pre, start, end));
      return end}

    function _tail(loc_tip, idx0) {
      const rest = part.content.slice(idx0);
      if (rest) {
        _unknown_ops(rest, loc_tip, idx0);

        const start = loc_tip;
        const end = start.move(rest);
        res.push(as_src_ast(rest, start, end)); } } }

  function as_src_ast(content, start, end) {
    return {type: 'src', loc: {start, end}, content} }

  const pp_sym = Symbol('#IF?');
  const basic_preprocessor_proto ={
    bind() {
      const rx = /^#\s*([A-Z]+\b)(.*)$/;
      return (( part, stacktop ) => {
        let [,directive,arg] = rx.exec(part.content) || [];
        if (! this['v$'+directive]) {
          throw this.syntaxError(part)}

        return this['v$'+directive](
          part, (arg||'').trim(), stacktop) }) }

  , syntaxError: part => part.loc.start.syntaxError(`Preprocessor Invalid: "${part.content}"`)

  , v$IF(part, arg, stacktop) {
      if (! arg) {throw this.syntaxError(part)}
      let ans = !! this.answerFor(arg);
      return stacktop[pp_sym] = ans}

  , v$ELIF(part, arg, stacktop) {
      if (! arg || 'boolean' !== typeof stacktop[pp_sym]) {
        throw this.syntaxError(part)}

      if (! stacktop[pp_sym]) {
        let ans = !! this.answerFor(arg);
        return stacktop[pp_sym] = ans}
      return false}

  , v$ELSE(part, arg, stacktop) {
      if (arg || 'boolean' !== typeof stacktop[pp_sym]) {
        throw this.syntaxError(part)}

      if (! stacktop[pp_sym]) {
        stacktop[pp_sym] = null;
        return true}
      return false} };


  function basic_preprocessor(answerFor) {
    if (null == answerFor) {
      return }// defines is null -- disable preprocessor

    if ('object' === typeof answerFor) {
      answerFor = shunting_yard(answerFor);}
    else if ('function' !== typeof answerFor) {
      throw new TypeError(`Expected a function or object for basic_preprocessor`) }

    return {__proto__: basic_preprocessor_proto, answerFor}.bind()}


  function shunting_yard(defines) {
     {
      let _op_ = (order, op_fn) => (op_fn.order=order, op_fn);
      let NOT = v => ! v;
      let AND = (a, b) => a && b;
      let OR = (a, b) => a || b;

      let ops ={
        __proto__: null
      , false: false, FALSE: false,
        true: true, TRUE: true
      , NOT, '!': _op_(0, NOT),
        AND, '&&': _op_(10, AND),
        OR, '||': _op_(20, OR),};

      var lut_expr = key => ops[key] ?? defines[key];}

    function eval_op(fn_op, args) {
      args.push(
        fn_op.length
          ? fn_op(... args.splice(-fn_op.length))
          : fn_op()); }

    return function eval_shunting_yard(expr_src) {
      // see https://en.wikipedia.org/wiki/Shunting-yard_algorithm
      let args=[], ops=[];

      let expr = expr_src.split(/\s+/).map(lut_expr);
      for (let tip of expr) {
        if ('function' !== typeof tip) {
          args.push(tip);
          continue}

        // eval all lesser order operations
        while (ops[0] && (0 | ops[0].order) <= (0 | tip.order)) {
          eval_op(ops.shift(), args);}

        // push this operator on the stack
        ops.unshift(tip);}

      // evaluate all operations
      while (ops[0]) {
        eval_op(ops.shift(), args);}

      if (1 !== args.length) {
        throw new SyntaxError(
`Invalid preprocessor expression: "${expr_src}"`  ) }

      return args[0]} }

  const preprocess_visitor = {
    __proto__: null

  , *ast_iter(ast) {
      let ln, state = this.start();

      for (ln of ast) {
        ln = ln.is_blank
          ? this.blank_line(ln)
          : this.ast_line(ln, state);

        if (null != ln) {
          yield ln;} }

      ln = this.finish(state);
      if (null != ln) {
        yield ln;} }

  , start() {return {tip: {}}}
  , finish(state) {}

  , blank_line(ln) {return ln}

  , indent_state(ln, state) {
      let tip = state.tip;
      while (ln.len_indent < (tip.len|0)) {
        tip = tip.tail;}

      return state.tip = tip}

  , _dbg_ln(ln) {return ln.indent.indent + ln.content.map(v=>v.content||'').join('')}

  , ast_line(ln, state) {
      let tip = this.indent_state(ln, state);

      if ('exclude' === tip.op) {
        this.exclude_line(ln, state);
        return ln}

      //if tip.dedent > 0  ::
      //  ln.indent.indent = ln.indent.indent.slice(0, -tip.dedent)

      for (let part of ln.content) {
        this[`v$${part.type}`]?.( part, ln, state );}
      return ln}

  , preprocess(p, stacktop) {}
  , v$preprocessor(p, ln, state) {
      let tail = state.tip;
      let ans = p.ans = this.preprocess(p, tail);

      if (false === ans) {
        p.type += '_exc';
        state.tip ={
          op: 'exclude'
        , len: ln.len_inner
        , tail}; }

      else if (true === ans) {
        p.type += '_inc';
        state.tip ={
          len: ln.len_inner
        , //dedent: (tail.dedent|0) + ln.len_inner - ln.len_indent
          tail}; }

      else if ('string' === typeof ans) {
        p.type += '_sz';} }


  , exclude_line(ln, state) {
      let content =[
        {type: 'exclude_line', content: '//~ '} ];

      for (let part of ln.content) {
        if ('offside_dedent' === part.type) {
          content.unshift(part);}
        else {
          part.type = 'exclude_part';
          content.push(part);} }

      ln.content = content;
      return ln} };

  const rx_punct =  /[,.;:?]/;
  const rx_binary_ops =  /\&\&|\|\||\?\?/;
  const rx_add_sub_ops =  /(?<![+-])[+-]/; // but exclude increment and decrement ops

  const rx_disrupt_comma_tail = /* #__PURE__ */
    _regexp_join('', [ rx_punct, /=>/, rx_add_sub_ops, rx_binary_ops ], '\\s*$');

  const rx_disrupt_comma_head = /* #__PURE__ */
    _regexp_join('^\\s*', [ rx_punct, rx_binary_ops ], '');

  const rx_rescue_comma_head = /* #__PURE__ */
    _regexp_join('^\\s*', [ /\.\.\./ ], '');

  const rx_last_bits =  /[()\[\]{}]|<\/?\w*>/ ;
  const rx_dict_as_name =  /\s+as\s+\w+/g;

  function checkOptionalComma(op, pre_body, post_body) {
    let pre_end = pre_body.split(rx_last_bits).pop();
    if (rx_disrupt_comma_tail.test(pre_end)) {
      return false}

    let post_start = post_body.split(rx_last_bits).shift();
    if (rx_disrupt_comma_head.test(post_start)) {
      if (! rx_rescue_comma_head.test(post_start)) {
        return false} }

    if (op.pre.includes('{')) {
      // support for blocks like:
      //   import {name as othername} from 'file' blocks
      //   export {name as othername}
      pre_body = pre_body.replace(rx_dict_as_name, '');
      post_body = post_body.replace(rx_dict_as_name, '');}

    if (checkSyntax(`${op.pre} ${pre_body} , post_body ${op.post}`) ) {
      return true}

    if (checkSyntax(`${op.pre} pre_body , ${post_body} ${op.post}`) ) {
      return true}

    return false}


  const fn_flavors = [
    (function(){}).constructor
  , (function *(){}).constructor
  , (async function(){}).constructor
  , (async function *(){}).constructor];

  function checkSyntax(expr) {
    for (let FuncKind of fn_flavors) {
      try {
        new FuncKind(`return ${expr}`);
        return true}
      catch (err) {} }

    return false}


  function _regexp_join(pre, rx_options, post) {
    rx_options = [... rx_options]
      .flatMap(rx => rx ? [rx.source] : []);
    return new RegExp(`${pre}(?:${rx_options.join('|')})${post}`)}

  const rx_leading_space =  /^[ \t]+/ ;

  const root_head = /* #__PURE__ */ Object.freeze({__proto__: null});

  const transpile_visitor = {
    __proto__: null

  , *ast_iter(jsy_ast) {
      this.start();

      let ln, fin;
      for (ln of jsy_ast) {
        fin = this.ast_line(ln);
        yield `${fin?.join('') ?? fin ?? ''}\n`;}

      fin = this.finish();
      yield `${fin?.join('') ?? fin ?? ''}\n`;}


  , ast_line(ln) {
      if (ln.is_blank) {
        return this.blank_line(ln)}

      this.start_line(ln);
      this.v$offside_indent(ln.indent);

      let prev = ln.indent;
      for (let part of ln.content) {
        let fn_visit = `v$${part.type}`;
        if (undefined === this[fn_visit]) {
          throw new Error(`JSY transpile function "${fn_visit}" not found`) }

        this[fn_visit]( part, ln, prev );
        prev = part;}

      return this.finish_line(ln)}

  , start() {
      this.lineno = 0;
      this.head = root_head;}

  , finish() {
      if (root_head !== this.head) {
        throw new Error('Excess stack at finish') } }

  , blank_line(ln) {
      this.lineno ++;}

  , start_line(ln) {
      this.lineno ++;
      this.cur_ln = ln;
      let line_src = this._cur = [];
      line_src.finish_ops = [];}

  , finish_line(ln) {
      let line_src = this._cur;
      for (let fn of line_src.finish_ops || []) {
        line_src = fn(line_src, ln);}

      let comma_body = this.head.comma_body;
      if (undefined !== comma_body) {
        comma_body.push('\n'); }

      return line_src}

  , emit_raw(src) {
      if (src) {this._cur.push(src);} }

  , emit(src, loc_start) {
      if (loc_start && this.addSourceMapping) {
        const column = this._cur.join('').length;
        this.addSourceMapping({
          generated:{line: this.lineno, column}
        , original:{line: loc_start.line, column: loc_start.column} }); }

      const comma_body = this.head.comma_body;
      if (undefined !== comma_body) {
        comma_body.push(src); }

      this._cur.push(src); }

  , emit_indent(indent) {
      const cur = this._cur;
      if (0 !== cur.length) {
        throw new Error(`Indent must be first element of cur list`) }

      const comma_body = this.head.comma_body;
      if (undefined === comma_body) {
        cur.push(indent);
        return}

      comma_body.splice(0, comma_body.length,
        comma_body.join('').trimLeft());

      if (comma_body.len_inner != this.cur_ln.len_indent) {
        cur.push(indent);
        return}

      cur.push(indent || ' ');

      let finish_commas = (cur) => {
        const pre = comma_body[0];
        if (! pre) {return cur}

        const post = comma_body.slice(1).join('');
        const opt_comma = this.checkOptionalComma(comma_body.op, pre, post);
        if (opt_comma) {
          if (cur[0].length > 1) {
            cur[0] = cur[0].replace(/\s\s$/, ', ');}
          else cur[0] = ',';
          comma_body.shift();}
        return cur};

      cur.finish_ops.push(finish_commas); }

  , _checkOptionalComma: checkOptionalComma
  , checkOptionalComma

  , stack_push(op, p) {
      if (op.foldTop && this.head.isFoldable) {
        this.stack_pop();}

      if (null === op.post) {
        if (op.pre) {this.emit(op.pre);}
        return}

      const {len_indent, loc} = p;
      const head ={__proto__: this.head
      , op, len_indent, loc
      , isFoldable: op.isFoldable
      , nestBreak: op.nestBreak};

      if (',' == op.implicitSep) {
        const comma_body = head.comma_body = [];
        comma_body.op = op;
        comma_body.len_inner = this.cur_ln.len_inner;}
      else head.comma_body = undefined;

      if (op.in_nested_block) {
        head.in_nested_block = true;
        head.nested_block_indent = len_indent;}

      head.tail = [this.head].concat(head.tail || []);

      let src_pre = head.op.pre;
      if (src_pre) {this.emit(src_pre);}

      this.head = head;}

  , stack_pop(c) {
      let head = this.head;
      let next = head.tail[0];
      this.head = next;

      if (next.comma_body) {
        let substitute = head.op.substitute ??(// explicit substution
          ',' == head.op.implicitSep ? 'expr' // is a comma-based expression
          : /[\)\]]\s*$/.test(head.op.post) ? 'expr' // ends as call or index expr
          : null);

        if (null != substitute) {
          // internal op was an expression; simplify for comma_body
          next.comma_body.push(` ${substitute} `);} }

      let src_post = head.op.post;
      if (src_post) {
        this.emit(c ? ' '+src_post : src_post); } }

  , v$jsy_unknown(p) {
      throw p.loc.start.syntaxError(
`JSY unknown operator "${p.op}"`  ) }

  , v$jsy_kw(p) {
      const kw_op = p.explicit
        ? extra_jsy_ops.kw_explicit
        : extra_jsy_ops.kw_normal;

      this.stack_push(kw_op.kwExpandOp(p), p); }

  , v$jsy_op(p) {
      this._jsy_op(at_offside_map[p.op], p); }

  , v$jsy_op_args(p) {
      this._jsy_op(at_offside_map[p.op], p); }

  , _jsy_op(jsy_op, p) {
      if (! jsy_op) {
        throw new Error(`JSY op handler not found for "${p.op}"`) }

      if (jsy_op.warn) {jsy_op.warn(p);}

      if (jsy_op.opResolve) {
        jsy_op = validate_jsy_op_item(jsy_op.opResolve(p));
        if (jsy_op.warn) {jsy_op.warn(p);} }

      this._jsy_op_exec(jsy_op, p);}

  , _jsy_op_exec(jsy_op, p) {
      if (jsy_op.is_kw_close) {
        this._dedent_nested_block(p);}

      this.stack_push(jsy_op, p); }


  , _dedent_nested_block(p) {
      if (! this.head.in_nested_block) {return}

      if (null != p) {
        p.len_indent = this.head.nested_block_indent;}

      let c = 0, done=false;
      while (this.head && this.head.in_nested_block && ! done) {
        done = this.head.op.in_nested_block;
        this.stack_pop(c++); } }

  , _dedent_multi_ops() {
      if (! this.head.loc) {return}

      const line = this.cur_ln.loc.start.line;
      const t = this.head.tail
        .filter(t => t.loc && line === t.loc.start.line)
        .pop();

      if (undefined === t) {return}

      let c = 0;
      while (t !== this.head && !this.head.nestBreak) {
        this.stack_pop(c++); } }

  , v$offside_dedent(p) {
      if (! p.ends_with_jsy_op) {
        this._dedent_multi_ops();}

      let c = 0;
      while (this.head.len_indent >= p.len_dedent) {
        this.stack_pop(c++); } }


  , v$offside_indent(p) {
      this.emit_indent(p.indent); }


  , v$template_param(p) {this._param(extra_jsy_ops.tmpl_param, p);}
  , v$template_param_end(p) {this._param_end(p);}

  , v$jsx_param(p) {this._param(extra_jsy_ops.jsx_param, p);}
  , v$jsx_param_end(p) {this._param_end(p);}

  , _param(op, p) {
      this.stack_push(op, p);
      this.emit_raw(p.content); }

  , _param_end(p) {
      this._dedent_nested_block(p);
      this.emit_raw(p.content);

      let comma_body = this.head.comma_body;
      if (undefined !== comma_body) {
        // fixup comma_body with simplified template param
        comma_body.push('null }'); } }


  , v$str_template(p, ln, p0) {
      if (p.tmpl_opened) {
        this.stack_push(op_template_str, p); }

      if (p0 === ln.indent && p.mlctx) {
        let indent = this._cur.pop();
        this._cur.push(indent.slice(p.mlctx.col)); }

      this.emit(p.content, p.loc.start);

      if (p.tmpl_closed) {
        this.stack_pop();
        let comma_body = this.head.comma_body;
        if (undefined !== comma_body) {
          // fixup comma_body with simplified template param
          comma_body.push('`tmpl_expr`'); } } }

  , v$src(p, ln, p0) {
      let content = p.content;
      if ({jsy_op:1, jsy_kw:1}[p0.type] && rx_leading_space.test(content)) {
        content = content.replace(rx_leading_space, '');}

      this.emit(content, p.loc.start); }


  , v$preprocessor(p, ln) {this.emit(p.content);}
  , v$preprocessor_sz(p, ln) {this.emit(p.ans);}
  , v$preprocessor_inc(p, ln) {
      if (this.inc_preprocessor) {
        this.emit(`//+~${p.content}`); } }
  , v$preprocessor_exc(p, ln) {
      if (this.inc_preprocessor) {
        this.emit(`//-~${p.content}`); } }
  , v$exclude_line(p, ln) {
      if (this.inc_preprocessor) {
        this.emit(p.content);} }
  , v$exclude_part(p, ln) {
      if (this.inc_preprocessor) {
        this.emit(p.content);} }

  , v$str: direct_src
  , v$str1: direct_src
  , v$str2: direct_src

  , v$regexp: direct_src

  , v$jsx_frag: direct_src
  , v$jsx_frag_close: direct_src
  , v$jsx_tag: direct_src
  , v$jsx_tag_part: direct_src
  , v$jsx_tag_close: direct_src
  , v$jsx_attr_name: direct_src
  , v$jsx_attr_name_only: direct_src
  , v$jsx_attr_str1: direct_src
  , v$jsx_attr_str2: direct_src
  , v$jsx_content: direct_src
  , v$jsx_content_expr: direct_src

  , v$hashbang: raw_src
  , v$comment_eol: raw_src
  , v$comment_multi: raw_src};


  function raw_src(p) {this.emit_raw(p.content);}
  function direct_src(p) {this.emit(p.content, p.loc.start);}

  function validate_jsy_op_item(jsy_op_item) {
    let {pre, post} = jsy_op_item;

    if (null !== pre && 'string' !== typeof pre) {
      throw new Error('Invalid resolved jsy_op_item.pre result') }
    if (null !== post && 'string' !== typeof post) {
      throw new Error('Invalid resolved jsy_op_item.post result') }

    return jsy_op_item}

  function jsy_transpile(ast, feedback) {
    return [... jsy_iter_transpile(ast, feedback)]
      .join('') // join the stream that has embedded newlines
      .replace(/\s+$/, '\n') }// trimming excess whitespace at end into single newline

  function * jsy_iter_transpile(ast, feedback) {
    if (! feedback) {feedback = {};}

    if ('string' === typeof ast) {
      ast = jsy_scan(ast, feedback);}


    let preprocess = feedback.preprocessor?.()
      ?? basic_preprocessor(feedback.defines);

    if (preprocess) {// preprocessor pass
      let pp_visitor ={
        __proto__: preprocess_visitor
      , ... feedback.preprocess_visitor
      , preprocess};

      ast = pp_visitor.ast_iter(ast);}


     {// transpile pass
      let jsy_visitor ={
        __proto__: transpile_visitor
      , ... feedback.visitor};

      if (feedback.checkOptionalComma) {
        jsy_visitor.checkOptionalComma = feedback.checkOptionalComma;}

      if (feedback.addSourceMapping) {
        jsy_visitor.addSourceMapping = feedback.addSourceMapping;}


      yield * jsy_visitor.ast_iter(ast);}


     {// sourcemap output
      let srcmap = feedback.inlineSourceMap?.();
      if (srcmap) {
        yield sourcemap_comment(srcmap, '\n');} } }

  /* A tiny implementation of SourceMapGenerator usable in ES Module, CommonJS, and Browser friendly formats

  API:

      {
        addMapping({generated:{line, column}, original:{line, column}, source, name}) {},
        setSourceContent(source, content) {},

        toString() {},
        toJSON() {},
      }

  Inspired and extracted from
    require('source-map/lib/source-map-generator.js')

  */

  function tiny_source_map_generator(src_map) {
    src_map = {version: 3, ... (src_map || {}) };

    const sources = [];
    const names = [];
    const mappings = [];
    const contents = new Map();

    return {
      toJSON, toString: () => JSON.stringify(toJSON()),

      setSourceContent(source, source_content) {
        if (null != source_content)
          contents.set(`${source}`, source_content);
        else contents.delete(`${source}`);
      },

      addMapping({generated, original, source, name}) {
        const m = {
          gl: generated.line,
          gc: generated.column,
          ol: original != null && original.line,
          oc: original != null && original.column, };

        if (null != source) {
          m.source = source = `${source}`;
          if (! sources.includes(source))
            sources.push(source);
        }

        if (null != name) {
          m.name = name = `${name}`;
          if (! names.includes(name))
            names.push(name);
        }

        mappings.push(m);
      },
    }


    function toJSON() {
      const res_src_map = {
        ... src_map,
        sources: [... sources],
        names: [... names]};

      res_src_map.mappings =
        _serializeMappings(
          mappings, res_src_map);

      if (0 !== contents.size)
        res_src_map.sourcesContent =
          res_src_map.sources.map(
            key => contents.get(key) || null);

      return res_src_map
    }
  }


  function _serializeMappings(mappings, src_map) {
    const vlq_gen_column = _vlq_state(0);
    const vlq_orig_column = _vlq_state(0);
    const vlq_orig_line = _vlq_state(0);
    const vlq_name = _vlq_state(0);
    const vlq_source = _vlq_state(0);

    let line=1, result = '', prev_tip;
    for (const tip of mappings) {
      let sz = '';

      if (tip.gl !== line) {
        vlq_gen_column(0);
        while (tip.gl !== line) {
          sz += ';';
          line++;
        }
      } else if (undefined !== prev_tip) {
        if (0 === cmp_srcmappings(tip, prev_tip))
          continue // if we didn't move forward, ignore it!

        sz += ',';
      }

      sz += vlq_gen_column(tip.gc);

      if (tip.source != null) {
        sz += vlq_source(src_map.sources.indexOf(tip.source));
        sz += vlq_orig_line(tip.ol - 1);
        sz += vlq_orig_column(tip.oc);

        if (tip.name != null) {
          sz += vlq_name(src_map.names.indexOf(tip.name));
        }
      }

      // success; move forward
      result += sz;
      prev_tip = tip;
    }

    return result
  }

  function _vlq_state(v0) {
    const vlq = v => {
      const res = _b64_vlq(v - v0);
      vlq.value = v0 = v;
      return res
    };

    vlq.value = v0;
    return vlq
  }


  const strcmp = (a, b) =>
    a == b ? 0
      : null == a ? 1
      : null == b ? -1
      : a > b ? 1 : -1;

  const cmp_srcmappings = (a,b) => (
       a.gl - b.gl
    || a.gc - b.gc
    || strcmp(a.source, b.source)
    || a.ol - b.ol
    || a.oc - b.oc
    || strcmp(a.name, b.name) );


  const _vlq_low = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdef';
  const _vlq_high = 'ghijklmnopqrstuvwxyz0123456789+/';
  function _b64_vlq(v) {
    // move sign to LSB for VLQ encoding
    v = v >= 0
      ? (v << 1)
      : 1 | ( -v << 1 );

    let res = '';
    while (true) {
      // use lower 5 bits to generate a b64 symbol
      let d = v & 0x1f;
      v >>>= 5;
      if (0 === v) {
        res += _vlq_low[d];
        return res
      }

      res += _vlq_high[d];
    }
  }

  const _jsy_srcmap_ctx = {
    i: 1, ts: Date.now().toString(36)};

  function jsy_transpile_srcmap(jsy_src, ... args) {
    let source_ref = null == args[0] || 'object' !== typeof args[0] ? args.shift() : null;
    let opt = args.pop() || {};

    if (null == source_ref) {
      source_ref = `<jsy-${_jsy_srcmap_ctx.i++}-${_jsy_srcmap_ctx.ts}>.jsy`;}

    const srcmap = !opt.sourcemap ? null
      : opt.create_sourcemap
        ? opt.create_sourcemap()
        : tiny_source_map_generator();

    if (null !== srcmap) {
      srcmap.setSourceContent(source_ref, jsy_src); }

    let code = jsy_transpile(jsy_src,{
      addSourceMapping(arg) {
        if (null == srcmap) {return}
        if (source_ref) {
          arg.source = source_ref;}
        srcmap.addMapping(arg);}

    , inlineSourceMap() {
        if (srcmap && 'inline' == opt.sourcemap) {
          return srcmap.toString()} }

    , ... opt} );

    return opt.as_rec ? {code, srcmap} : code}

  function jsy_as_ast(jsy_code) {
    if (Array.isArray(jsy_code)) {
      jsy_code = jsy_code.join('\n');}

    const js_vanilla = jsy_transpile_srcmap(jsy_code);
    try {
      const ast = parse(js_vanilla,
        {ecmaVersion: 11, sourceType:'module'} );
      return {ast, code: js_vanilla} }
    catch (err) {
      console.error();
      console.error("--- Vanilla JS ---");
      console.error();
      console.error(js_vanilla);
      console.error();
      console.error("------------------");
      console.error();
      throw new SyntaxError(err.message) } }

  const {assert} = require('chai');

  function testSyntaxError(testCase) {
    const block = () => {
      if (testCase.debug) {
        console.dir(testCase.source,{colors: true, depth: null}); }

      let res = jsy_as_ast(testCase.source);

      if ('code' === testCase.debug) {
        console.dir(res.code.split('\n'),{colors: true, depth: null}); } };

    assert.throws(block, SyntaxError); }

  function testSourceTransform(testCase) {
    let res;
    try {
      if (testCase.debug) {
        console.dir(testCase.source,{colors: true, depth: null}); }

      res = jsy_as_ast(testCase.source); }
    catch (err) {
      console.error(err);
      assert.fail(err.message); }

    if ('code' === testCase.debug) {
      console.dir(res.code.split('\n'),{colors: true, depth: null}); }

    if (testCase.tokens) {
      testTokens(testCase, res.code);} }


  function testTokens(testCase, code) {
    const ignore_tokens = new Set([';', 'eof']);
    if (testCase.tokens.includes(';')) {
      ignore_tokens.delete(';');}

    let tokens;
    try {
      tokens = tokenizer(code, {ecmaVersion: 9});}
    catch (err) {
      throw new SyntaxError(err.message) }

    tokens = Array
      .from(tokens, token => token.type.label)
      .filter(token => token && ! ignore_tokens.has(token));

    if ('tokens' === testCase.debug) {
      console.log(tokens); }

    const expected_tokens = Array.from(testCase.tokens)
      .filter(token => ! ignore_tokens.has(token));

    assert.deepEqual(tokens, expected_tokens); }


  const TEST_LEAN = 'undefined' !== typeof process && process.env.TEST_LEAN;
  function genMochaSyntaxTestCases(iterSyntaxVariations, transformVariations) {
    return (() => {
      describe('Basic', (() =>genSyntaxTestCases(it, iterSyntaxVariations()) ));

      if (! TEST_LEAN && transformVariations) {
        for (const [name, xform] of Object.entries(transformVariations) ) {
          describe(name, (() =>genSyntaxTestCases(it, xform(iterSyntaxVariations()) ) )); } } } ) }


  function genSyntaxTestCases(it, iterable_test_cases) {
    for (const testCase of iterable_test_cases) {
      let testFn, title=testCase.title;
      if (testCase.expectSyntaxError) {
        title += ' should THROW a syntax error';
        testFn = (() =>testSyntaxError(testCase)); }
      else {
        testFn = (() =>testSourceTransform(testCase)); }

      if (testCase.skip) {
        it.skip(title, testFn); }
      else if (testCase.todo) {
        it.todo(title, testFn); }
      else if (testCase.only) {
        it.only(title, testFn); }
      else {
        it(title, testFn); } } }

  function bindIterableTransform(title_suffix, prefix, postfix, options={}) {
    if ('string' !== typeof prefix) {
      throw new Error("Expected prefix to be a string")}
    if (postfix && 'string' !== typeof postfix) {
      options = postfix; postfix = null;}

    const indent = ' '.repeat(options.indent || 2);

    let pre_tokens = options.pre_tokens, post_tokens = options.post_tokens;
    if (!pre_tokens && options.tokens) {pre_tokens = tokens;}

    return function * (iterable_test_cases) {
      for (const testCase of iterable_test_cases) {
        const title = `${testCase.title} WITHIN ${title_suffix}`;

        if ('string' === typeof testCase.source) {
          testCase.source = [testCase.source];}

        const source = [].concat(
          [prefix || '']
        , testCase.source.map(line => indent + line)
        , ['']
        , [postfix || '']);

        let tokens = null;
        if (testCase.tokens && (pre_tokens || post_tokens)) {
          tokens = [].concat(pre_tokens || [], testCase.tokens || [], post_tokens || []); }

        yield Object.assign({}, testCase,{title, source, tokens}); } } }


  const blockTransforms ={
    inBlock: bindIterableTransform('vanilla block', '{', '}',
      {pre_tokens:['{']
        , post_tokens:['}'] } )
  , inOffsideBlock: bindIterableTransform('offside block', '::',
      {pre_tokens:['{']
        , post_tokens:['}'] } )
  , inIfBlock: bindIterableTransform('keyword offside if block', 'if expr_0 ::',
      {pre_tokens:['if', '(', 'name', ')', '{']
        , post_tokens:['}'] } )
  , inWhileBlock: bindIterableTransform('keyword offside while block', 'while expr_0 ::',
      {pre_tokens:['while', '(', 'name', ')', '{']
        , post_tokens:['}'] } )
  , inSwitchBlock: bindIterableTransform('keyword offside switch block', 'switch expr_0 ::\n  case a: default:',
      {indent: 4
        , pre_tokens:['switch', '(', 'name', ')', '{', 'case', 'name', ':', 'default', ':']
        , post_tokens:['}'] } )
  , inFinallyBlock: bindIterableTransform('offside finally block', 'try ::\nfinally ::',
      {pre_tokens:['try', '{', '}', 'finally', '{']
        , post_tokens:['}'] } )
  , inTryFinallyBlock: bindIterableTransform('offside try/finally block', 'try ::', 'finally ::',
      {pre_tokens:['try', '{']
        , post_tokens:['}', 'finally', '{', '}'] } )
  , inCatchBlock: bindIterableTransform('keyword offside try/finally block', 'try ::\ncatch err ::',
      {pre_tokens:['try', '{', '}', 'catch', '(', 'name', ')', '{']
        , post_tokens:['}'] } )
  , inTryCatchBlock: bindIterableTransform('offside try/catch block', 'try ::', 'catch (err) :: catchBlock',
      {pre_tokens:['try', '{']
        , post_tokens:['}', 'catch', '(', 'name', ')', '{', 'name', '}'] } )
  , inTryCatchBlock_v2: bindIterableTransform('keyword offside try/catch block', 'try ::', 'catch err :: catchBlock',
      {pre_tokens:['try', '{']
        , post_tokens:['}', 'catch', '(', 'name', ')', '{', 'name', '}'] } ) };

  const functionTransforms ={
    inFunction: bindIterableTransform('vanilla function', 'function outer_fn() {', '}',
      {pre_tokens:['function', 'name', '(', ')', '{']
        , post_tokens:['}'] } )
  , inOffsideFn: bindIterableTransform('offside function', 'function outer_fn() ::',
      {pre_tokens:['function', 'name', '(', ')', '{']
        , post_tokens:['}'] } )
  , inArrowFn: bindIterableTransform('vanilla arrow function', 'const outer_arrow = () => {', '}',
      {pre_tokens:['const', 'name', '=', '(', ')', '=>', '{']
        , post_tokens:['}'] } )
  , inOffsideArrowFn: bindIterableTransform('offside arrow function', 'const outer_arrow = () => ::',
      {pre_tokens:['const', 'name', '=', '(', ')', '=>', '{']
        , post_tokens:['}'] } ) };

  const asyncFunctionTransforms ={
    inAsyncFunction: bindIterableTransform('vanilla async function', 'async function outer_fn() {', '}',
      {pre_tokens:['name', 'function', 'name', '(', ')', '{']
        , post_tokens:['}'] } )
  , inOffsideAsyncFn: bindIterableTransform('offside async function', 'async function outer_fn() ::',
      {pre_tokens:['name', 'function', 'name', '(', ')', '{']
        , post_tokens:['}'] } )
  , inAsyncArrowFn: bindIterableTransform('vanilla arrow function', 'const outer_arrow = async () => {', '}',
      {pre_tokens:['const', 'name', '=', 'name', '(', ')', '=>', '{']
        , post_tokens:['}'] } )
  , inOffsideAsyncArrowFn: bindIterableTransform('offside arrow function', 'const outer_arrow = async () => ::',
      {pre_tokens:['const', 'name', '=', 'name', '(', ')', '=>', '{']
        , post_tokens:['}'] } ) };


  const standardTransforms = Object.assign({},
    blockTransforms, functionTransforms, asyncFunctionTransforms);

  const moduleTopTransforms = Object.assign({},);

  const tkns ={
    cmp: '</>/<=/>='};

  describe('JavaScript Scanners',
    genMochaSyntaxTestCases(iterSyntaxVariations$b, standardTransforms) );

  function * iterSyntaxVariations$b() {
    yield {expectValid: true
      , title: 'Multi-line template string (``)'
      , source:[
          'offside_ast = scan_javascript @ `'
        , '  export function hash_fnv32(sz) ::'
        , '    // FNV32, from https://en.wikipedia.org/wiki/Fowler%E2%80%93Noll%E2%80%93Vo_hash_function#FNV-1a_hash'
        , '    let h = 0x811C9DC5 // fnv-1a 32 bit initial value'
        , '    for let i=0; i < sz.length; i++ ::'
        , '      h ^= sz.charCodeAt(i)'
        , '      h += (h << 24) + (h << 8) + (h << 7) + (h << 4) + (h << 1)'
        , '    return h'
        , '  `'
        , '; after']
      , tokens:['name', '=', 'name', '(', '`', 'template', '`', ')', ';', 'name'] };

    yield {expectValid: true
      , title: 'Multi-line comment string (/* */)'
      , source:[
          'offside_ast = scan_javascript /*'
        , '  export function hash_fnv32(sz) ::'
        , '    // FNV32, from https://en.wikipedia.org/wiki/Fowler%E2%80%93Noll%E2%80%93Vo_hash_function#FNV-1a_hash'
        , '    let h = 0x811C9DC5 // fnv-1a 32 bit initial value'
        , '    for let i=0; i < sz.length; i++ ::'
        , '      h ^= sz.charCodeAt(i)'
        , '      h += (h << 24) + (h << 8) + (h << 7) + (h << 4) + (h << 1)'
        , '    return h'
        , '  */'
        , '; after']
      , tokens:['name', '=', 'name', ';', 'name'] }; }

  describe('Previous Syntax Bugs',
    genMochaSyntaxTestCases(iterSyntaxVariations$a, standardTransforms) );

  describe('Optional Comma with Import / Export',
    genMochaSyntaxTestCases(iterImportExportWithOptionalCommas, moduleTopTransforms) );



  function * iterSyntaxVariations$a() {
    yield * iterBugWithBlankFirstLine();
    yield * iterBugWithOptionalCommas();}


  function * iterImportExportWithOptionalCommas() {
    yield {
      title: 'import with as names'
    , source:[
        'import @{}'
      , '  a'
      , '  d as e, f as g'
      , '  b as c'
      , '  x, y, z'
      , 'from "some/module.js"']

    , tokens:['import', '{', 'name', ',', 'name', 'name', 'name', ',', 'name', 'name', 'name', ',', 'name', 'name', 'name', ',', 'name', ',', 'name', ',', 'name', '}', 'name', 'string'] };

    yield {
      title: 'export with as names'
    , source:[
        'let a,b,d,f,x,y,z'
      , 'export @{}'
      , '  a'
      , '  b as c'
      , '  d as e, f as g'
      , '  x, y, z']

    , tokens:[
        // let expr
        'name' , 'name' , ',' , 'name' , ',' , 'name' , ',' , 'name' , ',' , 'name' , ',' , 'name' , ',' , 'name',
        // export expr
        'export', '{', 'name', ',', 'name', 'name', 'name', ',', 'name', 'name', 'name', ',', 'name', 'name', 'name', ',', 'name', ',', 'name', ',', 'name', '}'] }; }


  function * iterBugWithOptionalCommas() {
    yield {
      title: 'Msg-Fabric plugin/web problem with optional commas'
    , source:[
        'websock.addEventListener @ "open"'
      , '  () => resolve()'
      , '  @{} passive: true, once: true']

    , tokens:['name', '.', 'name', '(', 'string', ',', '(', ')', '=>', 'name', '(', ')', ',', '{', 'name', ':', 'true', ',', 'name', ':', 'true', '}', ')'] };

    yield {
      title: 'Msg-Fabric plugin/web problem with optional commas'
    , source:[
        'websock.addEventListener @ "open"'
      , '  (() => resolve())'
      , '  @{} passive: true, once: true']

    , tokens:['name', '.', 'name', '(', 'string', ',', '(', '(', ')', '=>', 'name', '(', ')', ')', ',', '{', 'name', ':', 'true', ',', 'name', ':', 'true', '}', ')'] };


    yield {
      title: 'Msg-Fabric plugin/web problem with optional commas'
    , source:[
        'websock.addEventListener @ "open"'
      , '  @=> resolve()'
      , '  @{} passive: true, once: true']

    , tokens:['name', '.', 'name', '(', 'string', ',', '(', '(', ')', '=>', 'name', '(', ')', ')', ',', '{', 'name', ':', 'true', ',', 'name', ':', 'true', '}', ')'] };

    yield {
      title: 'Msg-Fabric plugin/web problem with optional commas'
    , source:[
        "  const find_ops = ({has, sans}) => all_ops.filter @ op => @"
      , "       @ !has  || has .split(' ').every @ a => op.attrs.includes @ a"
      , "    && @ !sans || sans.split(' ').every @ a => ! op.attrs.includes @ a"] };

    yield {
      title: 'Problem with optional commas and post-increment operator'
    , source:[
        "let a = 0"
      , "let data = @{}"
      , "  a"
      , "  b: 2"
      , "  c: a++ // here"
      , "  d: 3"] };

    yield {
      title: 'Problem with optional commas and post-decrement operator'
    , source:[
        "let a = 0"
      , "let data = @{}"
      , "  a"
      , "  b: 2"
      , "  c: a-- // here"
      , "  d: 3"] }; }


  function * iterBugWithBlankFirstLine() {
    yield {
      title: 'Filled first line of block '
    , source:[
        'const a = @{}'
      , '    v1: 1'
      , '  , v2: \'two\''
      , ''
      , '  , v3: null']
    , tokens:['const', 'name', '=', '{', 'name', ':', 'num', ',', 'name', ':', 'string', ',', 'name', ':', 'null', '}'] };

    yield {
      title: 'Blank first line of block '
    , source:[
        'const a = @{}'
      , ''
      , '    v1: 1'
      , '  , v2: \'two\''
      , ''
      , '  , v3: null']
    , tokens:['const', 'name', '=', '{', 'name', ':', 'num', ',', 'name', ':', 'string', ',', 'name', ':', 'null', '}'] }; }

  describe('Function Call Statements',
    genMochaSyntaxTestCases(iterCalls, standardTransforms) );

  describe('Arrow Call Statements',
    genMochaSyntaxTestCases(iterArrowCalls, standardTransforms) );

  describe('Arrow Async Call Statements',
    genMochaSyntaxTestCases(iterArrowAsyncCalls, standardTransforms) );

  describe('Arrow Generator Call Statements',
    genMochaSyntaxTestCases(iterArrowGeneratorCalls, standardTransforms) );

  describe('Arrow Async Generator Call Statements',
    genMochaSyntaxTestCases(iterArrowAsyncGeneratorCalls, standardTransforms) );

  describe('Function Array Call Statements',
    genMochaSyntaxTestCases(iterArrayCalls, standardTransforms) );

  describe('Function Hash Call Statements',
    genMochaSyntaxTestCases(iterHashCalls, standardTransforms) );


  function * iterCalls() {
    yield {
      title: 'simple call 0 args single line'
    , source:['fn_target @']
    , tokens:['name', '(', ')'] };

    yield {
      title: 'simple call 1 arg single line'
    , source:['fn_target @ one']
    , tokens:['name', '(', 'name', ')'] };

    yield {
      title: 'simple call 2 args single line'
    , source:['fn_target @ one, two']
    , tokens:['name', '(', 'name', ',', 'name', ')'] };


    yield {
      title: 'simple call 0 args multiple lines'
    , source:[
        'fn_target @'
      , '']
    , tokens:['name', '(', ')'] };

    yield {
      title: 'simple call 1 arg multiple lines'
    , source:['fn_target @ one']
    , source:[
        'fn_target @'
      , '  one']
    , tokens:['name', '(', 'name', ')'] };

    yield {
      title: 'simple call 2 args multiple lines'
    , source:[
        'fn_target @'
      , '    one'
      , '  , two']
    , tokens:['name', '(', 'name', ',', 'name', ')'] }; }


  function * iterHashCalls() {
    yield {
      title: 'call with hash 0 args single line'
    , source:['fn_target @:', '']
    , tokens:['name', '(', '{', '}', ')'] };

    yield {
      title: 'call with hash 1 arg single line'
    , source:['fn_target @: one']
    , tokens:['name', '(', '{', 'name', '}', ')'] };

    yield {
      title: 'call with hash 2 args single line'
    , source:['fn_target @: one, two']
    , tokens:['name', '(', '{', 'name', ',', 'name', '}', ')'] };


    yield {
      title: 'call with hash 0 args multiple lines'
    , source:[
        'fn_target @:'
      , '']
    , tokens:['name', '(', '{', '}', ')'] };

    yield {
      title: 'call with hash 1 arg multiple lines'
    , source:['fn_target @: one']
    , source:[
        'fn_target @:'
      , '  one']
    , tokens:['name', '(', '{', 'name', '}', ')'] };

    yield {
      title: 'call with hash 2 args multiple lines'
    , source:[
        'fn_target @:'
      , '    one'
      , '  , two']
    , tokens:['name', '(', '{', 'name', ',', 'name', '}', ')'] }; }


  function * iterArrayCalls() {
    yield {
      title: 'call with array 0 args single line'
    , source:['fn_target @#', '']
    , tokens:['name', '(', '[', ']', ')'] };

    yield {
      title: 'call with array 1 arg single line'
    , source:['fn_target @# one']
    , tokens:['name', '(', '[', 'name', ']', ')'] };

    yield {
      title: 'call with array 2 args single line'
    , source:['fn_target @# one, two']
    , tokens:['name', '(', '[', 'name', ',', 'name', ']', ')'] };


    yield {
      title: 'call with array 0 args multiple lines'
    , source:[
        'fn_target @#'
      , '']
    , tokens:['name', '(', '[', ']', ')'] };

    yield {
      title: 'call with array 1 arg multiple lines'
    , source:['fn_target @# one']
    , source:[
        'fn_target @#'
      , '  one']
    , tokens:['name', '(', '[', 'name', ']', ')'] };

    yield {
      title: 'call with array 2 args multiple lines'
    , source:[
        'fn_target @#'
      , '    one'
      , '  , two']
    , tokens:['name', '(', '[', 'name', ',', 'name', ']', ')'] }; }


  function * iterArrowCalls() {
    yield {
      title: 'vanilla call arrow with single line'
    , source:['fn_target @ () => value']
    , tokens:['name', '(', '(', ')', '=>', 'name', ')'] };

    yield {
      title: 'call arrow with single line expression'
    , source:['fn_target @=> value']
    , tokens:['name', '(', '(', ')', '=>', 'name', ')'] };

    yield {
      title: 'call arrow with multiple line expression'
    , source:[
        'fn_target @=>'
      , '  value']
    , tokens:['name', '(', '(', ')', '=>', 'name', ')'] };

    yield {
      title: 'call arrow with single line vanilla body'
    , source:['fn_target @=> { value }']
    , tokens:['name', '(', '(', ')', '=>', '{', 'name', '}', ')'] };

    yield {
      title: 'call arrow with single line body'
    , source:['fn_target @=> :: value']
    , tokens:['name', '(', '(', ')', '=>', '{', 'name', '}', ')'] };

    yield {
      title: 'call arrow with multiple line body'
    , source:[
        'fn_target @=> ::'
      , '  value'
      , '  second']
    , tokens:['name', '(', '(', ')', '=>', '{', 'name', 'name', '}', ')'] };

    yield {
      title: 'call arrow with multiple line paren expression'
    , source:[
        'fn_target @=> @'
      , '    value'
      , '  , second']
    , tokens:['name', '(', '(', ')', '=>', '(', 'name', ',', 'name', ')', ')'] };

    yield {
      title: 'call arrow with multiple line hash expression'
    , source:[
        'fn_target @=> @:'
      , '    value'
      , '  , second']
    , tokens:['name', '(', '(', ')', '=>', '(', '{', 'name', ',', 'name', '}', ')', ')'] };

    yield {
      title: 'call arrow with multiple line array expression'
    , source:[
        'fn_target @=> @#'
      , '    value'
      , '  , second']
    , tokens:['name', '(', '(', ')', '=>', '(', '[', 'name', ',', 'name', ']', ')', ')'] }; }


  function * iterArrowAsyncCalls() {
    yield {
      title: 'vanilla call async arrow with single line'
    , source:['fn_target @ async () => value']
    , tokens:['name', '(', 'name', '(', ')', '=>', 'name', ')'] };

    yield {
      title: 'call async arrow with single line expression'
    , source:['fn_target @=>> value']
    , tokens:['name', '(', 'name', '(', ')', '=>', 'name', ')'] };

    yield {
      title: 'call async arrow with multiple line expression'
    , source:[
        'fn_target @=>>'
      , '  value']
    , tokens:['name', '(', 'name', '(', ')', '=>', 'name', ')'] };

    yield {
      title: 'call async arrow with single line vanilla body'
    , source:['fn_target @=>> { value }']
    , tokens:['name', '(', 'name', '(', ')', '=>', '{', 'name', '}', ')'] };

    yield {
      title: 'call async arrow with single line body'
    , source:['fn_target @=>> :: value']
    , tokens:['name', '(', 'name', '(', ')', '=>', '{', 'name', '}', ')'] };

    yield {
      title: 'call async arrow with multiple line body'
    , source:[
        'fn_target @=>> ::'
      , '  value'
      , '  second']
    , tokens:['name', '(', 'name', '(', ')', '=>', '{', 'name', 'name', '}', ')'] };

    yield {
      title: 'call async arrow with multiple line paren expression'
    , source:[
        'fn_target @=>> @'
      , '    value'
      , '  , second']
    , tokens:['name', '(', 'name', '(', ')', '=>', '(', 'name', ',', 'name', ')', ')'] };

    yield {
      title: 'call async arrow with multiple line hash expression'
    , source:[
        'fn_target @=>> @:'
      , '    value'
      , '  , second']
    , tokens:['name', '(', 'name', '(', ')', '=>', '(', '{', 'name', ',', 'name', '}', ')', ')'] };

    yield {
      title: 'call async arrow with multiple line array expression'
    , source:[
        'fn_target @=>> @#'
      , '    value'
      , '  , second']
    , tokens:['name', '(', 'name', '(', ')', '=>', '(', '[', 'name', ',', 'name', ']', ')', ')'] }; }


  function * iterArrowGeneratorCalls() {
    yield {
      title: `call generator expression (@=>*)`
    , source: `@=>* yield expression_body`
    , tokens:['(', '(', 'function', '*', '(', ')', '{', 'name', 'name', '}', ')', '.', 'name', '(', 'this', ')', ')'] };

    yield {
      title: `call generator expression - two lines (@=>*)`
    , source:[
        '@=>*'
      , '  yield stmt_a'
      , '  yield stmt_b']
    , tokens:['(', '(', 'function', '*', '(', ')', '{', 'name', 'name', 'name', 'name', '}', ')', '.', 'name', '(', 'this', ')', ')'] };

    yield {
      title: `call generator expression (@=>*)`
    , source:[
`@=>* ::`
      , '  yield stmt_a'
      , '  yield stmt_b']
    , tokens:['(', '(', 'function', '*', '(', ')', '{', '{', 'name', 'name', 'name', 'name', '}', '}', ')', '.', 'name', '(', 'this', ')', ')'] }; }


  function * iterArrowAsyncGeneratorCalls() {
    yield {
      title: `async call generator expression (@=>>*)`
    , source: `@=>>* yield await expression_body`
    , tokens:['(', '(', 'name', 'function', '*', '(', ')', '{', 'name', 'name', 'name', '}', ')', '.', 'name', '(', 'this', ')', ')'] };

    yield {
      title: `async call generator expression - two lines (@=>>*)`
    , source:[
        '@=>>*'
      , '  yield await stmt_a'
      , '  yield await stmt_b']
    , tokens:['(', '(', 'name', 'function', '*', '(', ')', '{', 'name', 'name', 'name', 'name', 'name', 'name', '}', ')', '.', 'name', '(', 'this', ')', ')'] };

    yield {
      title: `async call generator expression (@=>>*)`
    , source:[
`@=>>* ::`
      , '  yield await stmt_a'
      , '  yield await stmt_b']
    , tokens:['(', '(', 'name', 'function', '*', '(', ')', '{', '{', 'name', 'name', 'name', 'name', 'name', 'name', '}', '}', ')', '.', 'name', '(', 'this', ')', ')'] }; }

  describe('Lambda Call Statements',
    genMochaSyntaxTestCases(iterLambdaCalls, standardTransforms) );


  function * iterLambdaCalls() {
    yield * iterLambdaSimpleCalls();
    yield * iterBlockLambdaSimpleCalls();

    yield * iterLambdaNestedCalls();
    yield * iterBlockLambdaNestedCalls();}


  function * iterLambdaSimpleCalls() {
    yield {
      title: 'call lambda with no arguments'
    , source:['fn_target @=> expr']
    , tokens:['name', '(', '(', ')', '=>', 'name', ')'] };

    yield {
      title: 'call lambda with two arguments'
    , source:['fn_target @\\ a, b => expr']
    , tokens:['name', '(', '(', 'name', ',', 'name', ')', '=>', 'name', ')'] };

    yield {
      title: 'call lambda with two arguments, arg-list second '
    , source:['fn_target @\\ a, ...b => expr']
    , tokens:['name', '(', '(', 'name', ',', '...', 'name', ')', '=>', 'name', ')'] };

    yield {
      title: 'call lambda with two arguments, unpack second by position'
    , source:['fn_target @\\ a, [b] => expr']
    , tokens:['name', '(', '(', 'name', ',', '[', 'name', ']', ')', '=>', 'name', ')'] };

    yield {
      title: 'call lambda with two arguments, unpack second by name'
    , source:['fn_target @\\ a, {b} => expr']
    , tokens:['name', '(', '(', 'name', ',', '{', 'name', '}', ')', '=>', 'name', ')'] }; }



  function * iterBlockLambdaSimpleCalls() {
    yield {
      title: 'call lambda with no arguments'
    , source:['fn_target @:: expr']
    , tokens:['name', '(', '(', ')', '=>', '{', 'name', '}', ')'] };

    yield {
      title: 'call lambda with two arguments'
    , source:[
        'fn_target @\\ a, b ::'
      , '  block']
    , tokens:['name', '(', '(', 'name', ',', 'name', ')', '=>', '{', 'name', '}', ')'] };

    yield {
      title: 'call lambda with two arguments, arg-list second '
    , source:[
        'fn_target @\\ a, ...b ::'
      , '  block']
    , tokens:['name', '(', '(', 'name', ',', '...', 'name', ')', '=>', '{', 'name', '}', ')'] };

    yield {
      title: 'call lambda with two arguments, unpack second by position'
    , source:[
        'fn_target @\\ a, [b] ::'
      , '  block']
    , tokens:['name', '(', '(', 'name', ',', '[', 'name', ']', ')', '=>', '{', 'name', '}', ')'] };

    yield {
      title: 'call lambda with two arguments, unpack second by name'
    , source:[
        'fn_target @\\ a, {b} ::'
      , '  block']
    , tokens:['name', '(', '(', 'name', ',', '{', 'name', '}', ')', '=>', '{', 'name', '}', ')'] }; }



  function * iterLambdaNestedCalls() {
    yield {
      title: 'call lambda with no arguments, two lines'
    , source:[
        'outer @ fn_target @=>'
      , '  expr']
    , tokens:['name', '(', 'name', '(', '(', ')', '=>', 'name', ')', ')'] };

    yield {
      title: 'call lambda with two arguments, two lines'
    , source:[
        'outer @ fn_target @\\ a, b =>'
      , '  expr']
    , tokens:['name', '(', 'name', '(', '(', 'name', ',', 'name', ')', '=>', 'name', ')', ')'] };

    yield {
      title: 'call lambda with two arguments, arg-list second '
    , source:[
        'outer @ fn_target @\\ a, ...b =>'
      , '  expr']
    , tokens:['name', '(', 'name', '(', '(', 'name', ',', '...', 'name', ')', '=>', 'name', ')', ')'] };

    yield {
      title: 'call lambda with two arguments, unpack second by position'
    , source:[
        'outer @ fn_target @\\ a, [b] =>'
      , '  expr']
    , tokens:['name', '(', 'name', '(', '(', 'name', ',', '[', 'name', ']', ')', '=>', 'name', ')', ')'] };

    yield {
      title: 'call lambda with two arguments, unpack second by name'
    , source:[
        'outer @ fn_target @\\ a, {b} =>'
      , '  expr']
    , tokens:['name', '(', 'name', '(', '(', 'name', ',', '{', 'name', '}', ')', '=>', 'name', ')', ')'] }; }

  function * iterBlockLambdaNestedCalls() {
    yield {
      title: 'call lambda with no arguments, two lines'
    , source:[
        'outer @ fn_target @::'
      , '  stmt_a'
      , '  stmt_b']
    , tokens:['name', '(', 'name', '(', '(', ')', '=>', '{', 'name', 'name', '}', ')', ')'] };

    yield {
      title: 'call lambda with two arguments, two lines'
    , source:[
        'outer @ fn_target @\\ a, b ::'
      , '  stmt_a'
      , '  stmt_b']
    , tokens:['name', '(', 'name', '(', '(', 'name', ',', 'name', ')', '=>', '{', 'name', 'name', '}', ')', ')'] };

    yield {
      title: 'call lambda with two arguments, arg-list second '
    , source:[
        'outer @ fn_target @\\ a, ...b ::'
      , '  stmt_a'
      , '  stmt_b']
    , tokens:['name', '(', 'name', '(', '(', 'name', ',', '...', 'name', ')', '=>', '{', 'name', 'name', '}', ')', ')'] };

    yield {
      title: 'call lambda with two arguments, unpack second by position'
    , source:[
        'outer @ fn_target @\\ a, [b] ::'
      , '  stmt_a'
      , '  stmt_b']
    , tokens:['name', '(', 'name', '(', '(', 'name', ',', '[', 'name', ']', ')', '=>', '{', 'name', 'name', '}', ')', ')'] };

    yield {
      title: 'call lambda with two arguments, unpack second by name'
    , source:[
        'outer @ fn_target @\\ a, {b} ::'
      , '  stmt_a'
      , '  stmt_b']
    , tokens:['name', '(', 'name', '(', '(', 'name', ',', '{', 'name', '}', ')', '=>', '{', 'name', 'name', '}', ')', ')'] }; }

  describe('Lambda Async Call Statements',
    genMochaSyntaxTestCases(iterLambdaAsyncCalls, standardTransforms) );


  function * iterLambdaAsyncCalls() {
    yield * iterLambdaAsyncSimpleCalls();
    yield * iterBlockLambdaAsyncSimpleCalls();

    yield * iterLambdaAsyncNestedCalls();
    yield * iterBlockLambdaAsyncNestedCalls();}


  function * iterLambdaAsyncSimpleCalls() {
    yield {
      title: 'call async lambda with no arguments (post)'
    , source:['fn_target @=>> expr']
    , tokens:['name', '(', 'name', '(', ')', '=>', 'name', ')'] };

    yield {
      title: 'call async lambda with two arguments (post)'
    , source:['fn_target @\\ a, b =>> expr']
    , tokens:['name', '(', 'name', '(', 'name', ',', 'name', ')', '=>', 'name', ')'] };

    yield {
      title: 'call async lambda with two arguments, arg-list second (post)'
    , source:['fn_target @\\ a, ...b =>> expr']
    , tokens:['name', '(', 'name', '(', 'name', ',', '...', 'name', ')', '=>', 'name', ')'] };

    yield {
      title: 'call async lambda with two arguments, unpack second by position (post)'
    , source:['fn_target @\\ a, [b] =>> expr']
    , tokens:['name', '(', 'name', '(', 'name', ',', '[', 'name', ']', ')', '=>', 'name', ')'] };

    yield {
      title: 'call async lambda with two arguments, unpack second by name (post)'
    , source:['fn_target @\\ a, {b} =>> expr']
    , tokens:['name', '(', 'name', '(', 'name', ',', '{', 'name', '}', ')', '=>', 'name', ')'] }; }


  function * iterBlockLambdaAsyncSimpleCalls() {
    yield {
      title: 'call async lambda with no arguments'
    , source:[
        'fn_target @::>'
      , '  block']
    , tokens:['name', '(', 'name', '(', ')', '=>', '{', 'name', '}', ')'] };

    yield {
      title: 'call async lambda with two arguments'
    , source:[
        'fn_target @\\ a, b ::>'
      , '  block']
    , tokens:['name', '(', 'name', '(', 'name', ',', 'name', ')', '=>', '{', 'name', '}', ')'] };

    yield {
      title: 'call async lambda with two arguments, arg-list second '
    , source:[
        'fn_target @\\ a, ...b ::>'
      , '  block']
    , tokens:['name', '(', 'name', '(', 'name', ',', '...', 'name', ')', '=>', '{', 'name', '}', ')'] };

    yield {
      title: 'call async lambda with two arguments, unpack second by position'
    , source:[
        'fn_target @\\ a, [b] ::>'
      , '  block']
    , tokens:['name', '(', 'name', '(', 'name', ',', '[', 'name', ']', ')', '=>', '{', 'name', '}', ')'] };

    yield {
      title: 'call async lambda with two arguments, unpack second by name'
    , source:[
        'fn_target @\\ a, {b} ::>'
      , '  block']
    , tokens:['name', '(', 'name', '(', 'name', ',', '{', 'name', '}', ')', '=>', '{', 'name', '}', ')'] }; }



  function * iterLambdaAsyncNestedCalls() {
    yield {
      title: 'call async lambda with no arguments, two lines'
    , source:[
        'outer @ fn_target @=>>'
      , '  expr']
    , tokens:['name', '(', 'name', '(', 'name', '(', ')', '=>', 'name', ')', ')'] };

    yield {
      title: 'call async lambda with two arguments, two lines'
    , source:[
        'outer @ fn_target @\\ a, b =>>'
      , '  expr']
    , tokens:['name', '(', 'name', '(', 'name', '(', 'name', ',', 'name', ')', '=>', 'name', ')', ')'] };

    yield {
      title: 'call async lambda with two arguments, arg-list second '
    , source:[
        'outer @ fn_target @\\ a, ...b =>>'
      , '  expr']
    , tokens:['name', '(', 'name', '(', 'name', '(', 'name', ',', '...', 'name', ')', '=>', 'name', ')', ')'] };

    yield {
      title: 'call async lambda with two arguments, unpack second by position'
    , source:[
        'outer @ fn_target @\\ a, [b] =>>'
      , '  expr']
    , tokens:['name', '(', 'name', '(', 'name', '(', 'name', ',', '[', 'name', ']', ')', '=>', 'name', ')', ')'] };

    yield {
      title: 'call async lambda with two arguments, unpack second by name'
    , source:[
        'outer @ fn_target @\\ a, {b} =>>'
      , '  expr']
    , tokens:['name', '(', 'name', '(', 'name', '(', 'name', ',', '{', 'name', '}', ')', '=>', 'name', ')', ')'] }; }

  function * iterBlockLambdaAsyncNestedCalls() {
    yield {
      title: 'call async lambda with no arguments, two lines'
    , source:[
        'outer @ fn_target @::>'
      , '  stmt_a'
      , '  stmt_b']
    , tokens:['name', '(', 'name', '(', 'name', '(', ')', '=>', '{', 'name', 'name', '}', ')', ')'] };

    yield {
      title: 'call async lambda with two arguments, two lines'
    , source:[
        'outer @ fn_target @\\ a, b ::>'
      , '  stmt_a'
      , '  stmt_b']
    , tokens:['name', '(', 'name', '(', 'name', '(', 'name', ',', 'name', ')', '=>', '{', 'name', 'name', '}', ')', ')'] };

    yield {
      title: 'call async lambda with two arguments, arg-list second '
    , source:[
        'outer @ fn_target @\\ a, ...b ::>'
      , '  stmt_a'
      , '  stmt_b']
    , tokens:['name', '(', 'name', '(', 'name', '(', 'name', ',', '...', 'name', ')', '=>', '{', 'name', 'name', '}', ')', ')'] };

    yield {
      title: 'call async lambda with two arguments, unpack second by position'
    , source:[
        'outer @ fn_target @\\ a, [b] ::>'
      , '  stmt_a'
      , '  stmt_b']
    , tokens:['name', '(', 'name', '(', 'name', '(', 'name', ',', '[', 'name', ']', ')', '=>', '{', 'name', 'name', '}', ')', ')'] };

    yield {
      title: 'call async lambda with two arguments, unpack second by name'
    , source:[
        'outer @ fn_target @\\ a, {b} ::>'
      , '  stmt_a'
      , '  stmt_b']
    , tokens:['name', '(', 'name', '(', 'name', '(', 'name', ',', '{', 'name', '}', ')', '=>', '{', 'name', 'name', '}', ')', ')'] }; }

  const v_bind_this$1 =['.', 'name', '(', 'this', ')'];

  describe('Lambda Generator Call Statements',
    genMochaSyntaxTestCases(iterLambdaGeneratorCalls, standardTransforms) );


  function * iterLambdaGeneratorCalls() {
    yield * iterLambdaGeneratorSimpleCalls();
    yield * iterBlockLambdaGeneratorSimpleCalls();

    yield * iterLambdaGeneratorNestedCalls();
    yield * iterBlockLambdaGeneratorNestedCalls();}


  function * iterLambdaGeneratorSimpleCalls() {
    yield {
      title: 'call lambda generator with no arguments (post)'
    , source:['fn_target @=>* expr']
    , tokens:['name', '(', '(', 'function', '*', '(', ')', '{', 'name', '}', ')', ... v_bind_this$1, ')'] };

    yield {
      title: 'call lambda generator with two arguments (post)'
    , source:['fn_target @\\ a, b =>* expr']
    , tokens:['name', '(', '(', 'function', '*', '(', 'name', ',', 'name', ')', '{', 'name', '}', ')', ... v_bind_this$1, ')'] };

    yield {
      title: 'call lambda generator with two arguments, arg-list second (post)'
    , source:['fn_target @\\ a, ...b =>* expr']
    , tokens:['name', '(', '(', 'function', '*', '(', 'name', ',', '...', 'name', ')', '{', 'name', '}', ')', ... v_bind_this$1, ')'] };

    yield {
      title: 'call lambda generator with two arguments, unpack second by position (post)'
    , source:['fn_target @\\ a, [b] =>* expr']
    , tokens:['name', '(', '(', 'function', '*', '(', 'name', ',', '[', 'name', ']', ')', '{', 'name', '}', ')', ... v_bind_this$1, ')'] };

    yield {
      title: 'call lambda generator with two arguments, unpack second by name (post)'
    , source:['fn_target @\\ a, {b} =>* expr']
    , tokens:['name', '(', '(', 'function', '*', '(', 'name', ',', '{', 'name', '}', ')', '{', 'name', '}', ')', ... v_bind_this$1, ')'] }; }





  function * iterBlockLambdaGeneratorSimpleCalls() {
    yield {
      title: 'call lambda generator with no arguments'
    , source:[
        'fn_target @::*'
      , '  block']
    , tokens:['name', '(', '(', 'function', '*', '(', ')', '{', 'name', '}', ')', ...v_bind_this$1, ')'] };

    yield {
      title: 'call lambda generator with two arguments'
    , source:[
        'fn_target @\\ a, b ::*'
      , '  block']
    , tokens:['name', '(', '(', 'function', '*', '(', 'name', ',', 'name', ')', '{', 'name', '}', ')', ...v_bind_this$1, ')'] };

    yield {
      title: 'call lambda generator with two arguments, arg-list second '
    , source:[
        'fn_target @\\ a, ...b ::*'
      , '  block']
    , tokens:['name', '(', '(', 'function', '*', '(', 'name', ',', '...', 'name', ')', '{', 'name', '}', ')', ...v_bind_this$1, ')'] };

    yield {
      title: 'call lambda generator with two arguments, unpack second by position'
    , source:[
        'fn_target @\\ a, [b] ::*'
      , '  block']
    , tokens:['name', '(', '(', 'function', '*', '(', 'name', ',', '[', 'name', ']', ')', '{', 'name', '}', ')', ...v_bind_this$1, ')'] };

    yield {
      title: 'call lambda generator with two arguments, unpack second by name'
    , source:[
        'fn_target @\\ a, {b} ::*'
      , '  block']
    , tokens:['name', '(', '(', 'function', '*', '(', 'name', ',', '{', 'name', '}', ')', '{', 'name', '}', ')', ...v_bind_this$1, ')'] }; }



  function * iterLambdaGeneratorNestedCalls() {
    yield {
      title: 'call lambda generator with two arguments, two lines'
    , source:[
        'outer @ fn_target @=>*'
      , '  expr']
    , tokens:['name', '(', 'name', '(', '(', 'function', '*', '(', ')', '{', 'name', '}', ')', ...v_bind_this$1, ')', ')'] };

    yield {
      title: 'call lambda generator with two arguments, two lines'
    , source:[
        'outer @ fn_target @\\ a, b =>*'
      , '  expr']
    , tokens:['name', '(', 'name', '(', '(', 'function', '*', '(', 'name', ',', 'name', ')', '{', 'name', '}', ')', ...v_bind_this$1, ')', ')'] };

    yield {
      title: 'call lambda generator with two arguments, arg-list second '
    , source:[
        'outer @ fn_target @\\ a, ...b =>*'
      , '  expr']
    , tokens:['name', '(', 'name', '(', '(', 'function', '*', '(', 'name', ',', '...', 'name', ')', '{', 'name', '}', ')', ...v_bind_this$1, ')', ')'] };

    yield {
      title: 'call lambda generator with two arguments, unpack second by position'
    , source:[
        'outer @ fn_target @\\ a, [b] =>*'
      , '  expr']
    , tokens:['name', '(', 'name', '(', '(', 'function', '*', '(', 'name', ',', '[', 'name', ']', ')', '{', 'name', '}', ')', ...v_bind_this$1, ')', ')'] };

    yield {
      title: 'call lambda generator with two arguments, unpack second by name'
    , source:[
        'outer @ fn_target @\\ a, {b} =>*'
      , '  expr']
    , tokens:['name', '(', 'name', '(', '(', 'function', '*', '(', 'name', ',', '{', 'name', '}', ')', '{', 'name', '}', ')', ...v_bind_this$1, ')', ')'] }; }

  function * iterBlockLambdaGeneratorNestedCalls() {
    yield {
      title: 'call lambda generator with no arguments, two lines'
    , source:[
        'outer @ fn_target @::*'
      , '  stmt_a'
      , '  stmt_b']
    , tokens:['name', '(', 'name', '(', '(', 'function', '*', '(', ')', '{', 'name', 'name', '}', ')', ...v_bind_this$1, ')', ')'] };

    yield {
      title: 'call lambda generator with two arguments, two lines'
    , source:[
        'outer @ fn_target @\\ a, b ::*'
      , '  stmt_a'
      , '  stmt_b']
    , tokens:['name', '(', 'name', '(', '(', 'function', '*', '(', 'name', ',', 'name', ')', '{', 'name', 'name', '}', ')', ...v_bind_this$1, ')', ')'] };

    yield {
      title: 'call lambda generator with two arguments, arg-list second '
    , source:[
        'outer @ fn_target @\\ a, ...b ::*'
      , '  stmt_a'
      , '  stmt_b']
    , tokens:['name', '(', 'name', '(', '(', 'function', '*', '(', 'name', ',', '...', 'name', ')', '{', 'name', 'name', '}', ')', ...v_bind_this$1, ')', ')'] };

    yield {
      title: 'call lambda generator with two arguments, unpack second by position'
    , source:[
        'outer @ fn_target @\\ a, [b] ::*'
      , '  stmt_a'
      , '  stmt_b']
    , tokens:['name', '(', 'name', '(', '(', 'function', '*', '(', 'name', ',', '[', 'name', ']', ')', '{', 'name', 'name', '}', ')', ...v_bind_this$1, ')', ')'] };

    yield {
      title: 'call lambda generator with two arguments, unpack second by name'
    , source:[
        'outer @ fn_target @\\ a, {b} ::*'
      , '  stmt_a'
      , '  stmt_b']
    , tokens:['name', '(', 'name', '(', '(', 'function', '*', '(', 'name', ',', '{', 'name', '}', ')', '{', 'name', 'name', '}', ')', ...v_bind_this$1, ')', ')'] }; }

  const v_bind_this =['.', 'name', '(', 'this', ')'];

  describe('Lambda Async Generator Call Statements',
    genMochaSyntaxTestCases(iterLambdaAsyncGeneratorCalls, standardTransforms) );


  function * iterLambdaAsyncGeneratorCalls() {
    yield * iterLambdaAsyncGeneratorSimpleCalls();
    yield * iterBlockLambdaAsyncGeneratorSimpleCalls();

    yield * iterLambdaAsyncGeneratorNestedCalls();
    yield * iterBlockLambdaAsyncGeneratorNestedCalls();}


  function * iterLambdaAsyncGeneratorSimpleCalls() {
    yield {
      title: 'call lambda async generator with no arguments (post)'
    , source:['fn_target @=>>* expr']
    , tokens:['name', '(', '(', 'name', 'function', '*', '(', ')', '{', 'name', '}', ')', ... v_bind_this, ')'] };

    yield {
      title: 'call lambda async generator with two arguments (post)'
    , source:['fn_target @\\ a, b =>>* expr']
    , tokens:['name', '(', '(', 'name', 'function', '*', '(', 'name', ',', 'name', ')', '{', 'name', '}', ')', ... v_bind_this, ')'] };

    yield {
      title: 'call lambda async generator with two arguments, arg-list second (post)'
    , source:['fn_target @\\ a, ...b =>>* expr']
    , tokens:['name', '(', '(', 'name', 'function', '*', '(', 'name', ',', '...', 'name', ')', '{', 'name', '}', ')', ... v_bind_this, ')'] };

    yield {
      title: 'call lambda async generator with two arguments, unpack second by position (post)'
    , source:['fn_target @\\ a, [b] =>>* expr']
    , tokens:['name', '(', '(', 'name', 'function', '*', '(', 'name', ',', '[', 'name', ']', ')', '{', 'name', '}', ')', ... v_bind_this, ')'] };

    yield {
      title: 'call lambda async generator with two arguments, unpack second by name (post)'
    , source:['fn_target @\\ a, {b} =>>* expr']
    , tokens:['name', '(', '(', 'name', 'function', '*', '(', 'name', ',', '{', 'name', '}', ')', '{', 'name', '}', ')', ... v_bind_this, ')'] }; }





  function * iterBlockLambdaAsyncGeneratorSimpleCalls() {
    yield {
      title: 'call lambda async generator with no arguments'
    , source:[
        'fn_target @::>*'
      , '  block']
    , tokens:['name', '(', '(', 'name', 'function', '*', '(', ')', '{', 'name', '}', ')', ...v_bind_this, ')'] };

    yield {
      title: 'call lambda async generator with two arguments'
    , source:[
        'fn_target @\\ a, b ::>*'
      , '  block']
    , tokens:['name', '(', '(', 'name', 'function', '*', '(', 'name', ',', 'name', ')', '{', 'name', '}', ')', ...v_bind_this, ')'] };

    yield {
      title: 'call lambda async generator with two arguments, arg-list second '
    , source:[
        'fn_target @\\ a, ...b ::>*'
      , '  block']
    , tokens:['name', '(', '(', 'name', 'function', '*', '(', 'name', ',', '...', 'name', ')', '{', 'name', '}', ')', ...v_bind_this, ')'] };

    yield {
      title: 'call lambda async generator with two arguments, unpack second by position'
    , source:[
        'fn_target @\\ a, [b] ::>*'
      , '  block']
    , tokens:['name', '(', '(', 'name', 'function', '*', '(', 'name', ',', '[', 'name', ']', ')', '{', 'name', '}', ')', ...v_bind_this, ')'] };

    yield {
      title: 'call lambda async generator with two arguments, unpack second by name'
    , source:[
        'fn_target @\\ a, {b} ::>*'
      , '  block']
    , tokens:['name', '(', '(', 'name', 'function', '*', '(', 'name', ',', '{', 'name', '}', ')', '{', 'name', '}', ')', ...v_bind_this, ')'] }; }



  function * iterLambdaAsyncGeneratorNestedCalls() {
    yield {
      title: 'call lambda async generator with no arguments, two lines'
    , source:[
        'outer @ fn_target @=>>*'
      , '  expr']
    , tokens:['name', '(', 'name', '(', '(', 'name', 'function', '*', '(', ')', '{', 'name', '}', ')', ...v_bind_this, ')', ')'] };

    yield {
      title: 'call lambda async generator with two arguments, two lines'
    , source:[
        'outer @ fn_target @\\ a, b =>>*'
      , '  expr']
    , tokens:['name', '(', 'name', '(', '(', 'name', 'function', '*', '(', 'name', ',', 'name', ')', '{', 'name', '}', ')', ...v_bind_this, ')', ')'] };

    yield {
      title: 'call lambda async generator with two arguments, arg-list second '
    , source:[
        'outer @ fn_target @\\ a, ...b =>>*'
      , '  expr']
    , tokens:['name', '(', 'name', '(', '(', 'name', 'function', '*', '(', 'name', ',', '...', 'name', ')', '{', 'name', '}', ')', ...v_bind_this, ')', ')'] };

    yield {
      title: 'call lambda async generator with two arguments, unpack second by position'
    , source:[
        'outer @ fn_target @\\ a, [b] =>>*'
      , '  expr']
    , tokens:['name', '(', 'name', '(', '(', 'name', 'function', '*', '(', 'name', ',', '[', 'name', ']', ')', '{', 'name', '}', ')', ...v_bind_this, ')', ')'] };

    yield {
      title: 'call lambda async generator with two arguments, unpack second by name'
    , source:[
        'outer @ fn_target @\\ a, {b} =>>*'
      , '  expr']
    , tokens:['name', '(', 'name', '(', '(', 'name', 'function', '*', '(', 'name', ',', '{', 'name', '}', ')', '{', 'name', '}', ')', ...v_bind_this, ')', ')'] }; }

  function * iterBlockLambdaAsyncGeneratorNestedCalls() {
    yield {
      title: 'call lambda async generator with no arguments, two lines'
    , source:[
        'outer @ fn_target @::>*'
      , '  stmt_a'
      , '  stmt_b']
    , tokens:['name', '(', 'name', '(', '(', 'name', 'function', '*', '(', ')', '{', 'name', 'name', '}', ')', ...v_bind_this, ')', ')'] };

    yield {
      title: 'call lambda async generator with two arguments, two lines'
    , source:[
        'outer @ fn_target @\\ a, b ::>*'
      , '  stmt_a'
      , '  stmt_b']
    , tokens:['name', '(', 'name', '(', '(', 'name', 'function', '*', '(', 'name', ',', 'name', ')', '{', 'name', 'name', '}', ')', ...v_bind_this, ')', ')'] };

    yield {
      title: 'call lambda async generator with two arguments, arg-list second '
    , source:[
        'outer @ fn_target @\\ a, ...b ::>*'
      , '  stmt_a'
      , '  stmt_b']
    , tokens:['name', '(', 'name', '(', '(', 'name', 'function', '*', '(', 'name', ',', '...', 'name', ')', '{', 'name', 'name', '}', ')', ...v_bind_this, ')', ')'] };

    yield {
      title: 'call lambda async generator with two arguments, unpack second by position'
    , source:[
        'outer @ fn_target @\\ a, [b] ::>*'
      , '  stmt_a'
      , '  stmt_b']
    , tokens:['name', '(', 'name', '(', '(', 'name', 'function', '*', '(', 'name', ',', '[', 'name', ']', ')', '{', 'name', 'name', '}', ')', ...v_bind_this, ')', ')'] };

    yield {
      title: 'call lambda async generator with two arguments, unpack second by name'
    , source:[
        'outer @ fn_target @\\ a, {b} ::>*'
      , '  stmt_a'
      , '  stmt_b']
    , tokens:['name', '(', 'name', '(', '(', 'name', 'function', '*', '(', 'name', ',', '{', 'name', '}', ')', '{', 'name', 'name', '}', ')', ...v_bind_this, ')', ')'] }; }

  describe('Tilde Call Statements',
    genMochaSyntaxTestCases(iterTildeCalls, standardTransforms) );


  function * iterTildeCalls() {
    yield * iterBlockTildeSimpleCalls();
    yield * iterBlockTildeNestedCalls();}


  function * iterBlockTildeSimpleCalls() {
    yield {
      title: 'call tidle with no arguments'
    , source:[
        'fn_target @~::'
      , '  block']
    , tokens:['name', '(', 'function', '(', ')', '{', 'name', '}', ')'] };

    yield {
      title: 'call tidle with two arguments'
    , source:[
        'fn_target @~ a, b ::'
      , '  block']
    , tokens:['name', '(', 'function', '(', 'name', ',', 'name', ')', '{', 'name', '}', ')'] };

    yield {
      title: 'call tidle with two arguments'
    , source:[
        'fn_target @~ a, b ::'
      , '  block']
    , tokens:['name', '(', 'function', '(', 'name', ',', 'name', ')', '{', 'name', '}', ')'] };

    yield {
      title: 'call tidle with two arguments, arg-list second '
    , source:[
        'fn_target @~ a, ...b ::'
      , '  block']
    , tokens:['name', '(', 'function', '(', 'name', ',', '...', 'name', ')', '{', 'name', '}', ')'] };

    yield {
      title: 'call tidle with two arguments, unpack second by position'
    , source:[
        'fn_target @~ a, [b] ::'
      , '  block']
    , tokens:['name', '(', 'function', '(', 'name', ',', '[', 'name', ']', ')', '{', 'name', '}', ')'] };

    yield {
      title: 'call tidle with two arguments, unpack second by name'
    , source:[
        'fn_target @~ a, {b} ::'
      , '  block']
    , tokens:['name', '(', 'function', '(', 'name', ',', '{', 'name', '}', ')', '{', 'name', '}', ')'] }; }



  function * iterBlockTildeNestedCalls() {
    yield {
      title: 'call tidle with no arguments, two lines'
    , source:[
        'outer @ fn_target @~::'
      , '  stmt_a'
      , '  stmt_b']
    , tokens:['name', '(', 'name', '(', 'function', '(', ')', '{', 'name', 'name', '}', ')', ')'] };

    yield {
      title: 'call tidle with two arguments, two lines'
    , source:[
        'outer @ fn_target @~ a, b ::'
      , '  stmt_a'
      , '  stmt_b']
    , tokens:['name', '(', 'name', '(', 'function', '(', 'name', ',', 'name', ')', '{', 'name', 'name', '}', ')', ')'] };

    yield {
      title: 'call tidle with two arguments, arg-list second '
    , source:[
        'outer @ fn_target @~ a, ...b ::'
      , '  stmt_a'
      , '  stmt_b']
    , tokens:['name', '(', 'name', '(', 'function', '(', 'name', ',', '...', 'name', ')', '{', 'name', 'name', '}', ')', ')'] };

    yield {
      title: 'call tidle with two arguments, unpack second by position'
    , source:[
        'outer @ fn_target @~ a, [b] ::'
      , '  stmt_a'
      , '  stmt_b']
    , tokens:['name', '(', 'name', '(', 'function', '(', 'name', ',', '[', 'name', ']', ')', '{', 'name', 'name', '}', ')', ')'] };

    yield {
      title: 'call tidle with two arguments, unpack second by name'
    , source:[
        'outer @ fn_target @~ a, {b} ::'
      , '  stmt_a'
      , '  stmt_b']
    , tokens:['name', '(', 'name', '(', 'function', '(', 'name', ',', '{', 'name', '}', ')', '{', 'name', 'name', '}', ')', ')'] }; }

  describe('Tilde Async Call Statements',
    genMochaSyntaxTestCases(iterTildeAsyncCalls, standardTransforms) );


  function * iterTildeAsyncCalls() {
    yield * iterBlockTildeAsyncSimpleCalls();
    yield * iterBlockTildeAsyncNestedCalls();}


  function * iterBlockTildeAsyncSimpleCalls() {
    yield {
      title: 'call async tidle with no arguments'
    , source:[
        'fn_target @~::>'
      , '  block']
    , tokens:['name', '(', 'name', 'function', '(', ')', '{', 'name', '}', ')'] };

    yield {
      title: 'call async tidle with two arguments'
    , source:[
        'fn_target @~ a, b ::>'
      , '  block']
    , tokens:['name', '(', 'name', 'function', '(', 'name', ',', 'name', ')', '{', 'name', '}', ')'] };

    yield {
      title: 'call async tidle with two arguments, arg-list second '
    , source:[
        'fn_target @~ a, ...b ::>'
      , '  block']
    , tokens:['name', '(', 'name', 'function', '(', 'name', ',', '...', 'name', ')', '{', 'name', '}', ')'] };

    yield {
      title: 'call async tidle with two arguments, unpack second by position'
    , source:[
        'fn_target @~ a, [b] ::>'
      , '  block']
    , tokens:['name', '(', 'name', 'function', '(', 'name', ',', '[', 'name', ']', ')', '{', 'name', '}', ')'] };

    yield {
      title: 'call async tidle with two arguments, unpack second by name'
    , source:[
        'fn_target @~ a, {b} ::>'
      , '  block']
    , tokens:['name', '(', 'name', 'function', '(', 'name', ',', '{', 'name', '}', ')', '{', 'name', '}', ')'] }; }



  function * iterBlockTildeAsyncNestedCalls() {
    yield {
      title: 'call async tidle with no arguments, two lines'
    , source:[
        'outer @ fn_target @~::>'
      , '  stmt_a'
      , '  stmt_b']
    , tokens:['name', '(', 'name', '(', 'name', 'function', '(', ')', '{', 'name', 'name', '}', ')', ')'] };

    yield {
      title: 'call async tidle with two arguments, two lines'
    , source:[
        'outer @ fn_target @~ a, b ::>'
      , '  stmt_a'
      , '  stmt_b']
    , tokens:['name', '(', 'name', '(', 'name', 'function', '(', 'name', ',', 'name', ')', '{', 'name', 'name', '}', ')', ')'] };

    yield {
      title: 'call async tidle with two arguments, arg-list second '
    , source:[
        'outer @ fn_target @~ a, ...b ::>'
      , '  stmt_a'
      , '  stmt_b']
    , tokens:['name', '(', 'name', '(', 'name', 'function', '(', 'name', ',', '...', 'name', ')', '{', 'name', 'name', '}', ')', ')'] };

    yield {
      title: 'call async tidle with two arguments, unpack second by position'
    , source:[
        'outer @ fn_target @~ a, [b] ::>'
      , '  stmt_a'
      , '  stmt_b']
    , tokens:['name', '(', 'name', '(', 'name', 'function', '(', 'name', ',', '[', 'name', ']', ')', '{', 'name', 'name', '}', ')', ')'] };

    yield {
      title: 'call async tidle with two arguments, unpack second by name'
    , source:[
        'outer @ fn_target @~ a, {b} ::>'
      , '  stmt_a'
      , '  stmt_b']
    , tokens:['name', '(', 'name', '(', 'name', 'function', '(', 'name', ',', '{', 'name', '}', ')', '{', 'name', 'name', '}', ')', ')'] }; }

  describe('Tilde Generator Call Statements',
    genMochaSyntaxTestCases(iterTildeGeneratorCalls, standardTransforms) );


  function * iterTildeGeneratorCalls() {
    yield * iterBlockTildeGeneratorSimpleCalls();
    yield * iterBlockTildeGeneratorNestedCalls();}


  function * iterBlockTildeGeneratorSimpleCalls() {
    yield {
      title: 'call tidle generator with no arguments'
    , source:[
        'fn_target @~::*'
      , '  block']
    , tokens:['name', '(', 'function', '*', '(', ')', '{', 'name', '}', ')'] };

    yield {
      title: 'call tidle generator with two arguments'
    , source:[
        'fn_target @~ a, b ::*'
      , '  block']
    , tokens:['name', '(', 'function', '*', '(', 'name', ',', 'name', ')', '{', 'name', '}', ')'] };

    yield {
      title: 'call tidle generator with two arguments, arg-list second '
    , source:[
        'fn_target @~ a, ...b ::*'
      , '  block']
    , tokens:['name', '(', 'function', '*', '(', 'name', ',', '...', 'name', ')', '{', 'name', '}', ')'] };

    yield {
      title: 'call tidle generator with two arguments, unpack second by position'
    , source:[
        'fn_target @~ a, [b] ::*'
      , '  block']
    , tokens:['name', '(', 'function', '*', '(', 'name', ',', '[', 'name', ']', ')', '{', 'name', '}', ')'] };

    yield {
      title: 'call tidle generator with two arguments, unpack second by name'
    , source:[
        'fn_target @~ a, {b} ::*'
      , '  block']
    , tokens:['name', '(', 'function', '*', '(', 'name', ',', '{', 'name', '}', ')', '{', 'name', '}', ')'] }; }



  function * iterBlockTildeGeneratorNestedCalls() {
    yield {
      title: 'call tidle generator with no arguments, two lines'
    , source:[
        'outer @ fn_target @~::*'
      , '  stmt_a'
      , '  stmt_b']
    , tokens:['name', '(', 'name', '(', 'function', '*', '(', ')', '{', 'name', 'name', '}', ')', ')'] };

    yield {
      title: 'call tidle generator with two arguments, two lines'
    , source:[
        'outer @ fn_target @~ a, b ::*'
      , '  stmt_a'
      , '  stmt_b']
    , tokens:['name', '(', 'name', '(', 'function', '*', '(', 'name', ',', 'name', ')', '{', 'name', 'name', '}', ')', ')'] };

    yield {
      title: 'call tidle generator with two arguments, arg-list second '
    , source:[
        'outer @ fn_target @~ a, ...b ::*'
      , '  stmt_a'
      , '  stmt_b']
    , tokens:['name', '(', 'name', '(', 'function', '*', '(', 'name', ',', '...', 'name', ')', '{', 'name', 'name', '}', ')', ')'] };

    yield {
      title: 'call tidle generator with two arguments, unpack second by position'
    , source:[
        'outer @ fn_target @~ a, [b] ::*'
      , '  stmt_a'
      , '  stmt_b']
    , tokens:['name', '(', 'name', '(', 'function', '*', '(', 'name', ',', '[', 'name', ']', ')', '{', 'name', 'name', '}', ')', ')'] };

    yield {
      title: 'call tidle generator with two arguments, unpack second by name'
    , source:[
        'outer @ fn_target @~ a, {b} ::*'
      , '  stmt_a'
      , '  stmt_b']
    , tokens:['name', '(', 'name', '(', 'function', '*', '(', 'name', ',', '{', 'name', '}', ')', '{', 'name', 'name', '}', ')', ')'] }; }

  describe('Tilde Async Generator Call Statements',
    genMochaSyntaxTestCases(iterTildeAsyncGeneratorCalls, standardTransforms) );


  function * iterTildeAsyncGeneratorCalls() {
    yield * iterBlockTildeAsyncGeneratorSimpleCalls();
    yield * iterBlockTildeAsyncGeneratorNestedCalls();}


  function * iterBlockTildeAsyncGeneratorSimpleCalls() {
    yield {
      title: 'call tidle async generator with no arguments'
    , source:[
        'fn_target @~::>*'
      , '  block']
    , tokens:['name', '(', 'name', 'function', '*', '(', ')', '{', 'name', '}', ')'] };

    yield {
      title: 'call tidle async generator with two arguments'
    , source:[
        'fn_target @~ a, b ::>*'
      , '  block']
    , tokens:['name', '(', 'name', 'function', '*', '(', 'name', ',', 'name', ')', '{', 'name', '}', ')', ] };

    yield {
      title: 'call tidle async generator with two arguments, arg-list second '
    , source:[
        'fn_target @~ a, ...b ::>*'
      , '  block']
    , tokens:['name', '(', 'name', 'function', '*', '(', 'name', ',', '...', 'name', ')', '{', 'name', '}', ')', ] };

    yield {
      title: 'call tidle async generator with two arguments, unpack second by position'
    , source:[
        'fn_target @~ a, [b] ::>*'
      , '  block']
    , tokens:['name', '(', 'name', 'function', '*', '(', 'name', ',', '[', 'name', ']', ')', '{', 'name', '}', ')', ] };

    yield {
      title: 'call tidle async generator with two arguments, unpack second by name'
    , source:[
        'fn_target @~ a, {b} ::>*'
      , '  block']
    , tokens:['name', '(', 'name', 'function', '*', '(', 'name', ',', '{', 'name', '}', ')', '{', 'name', '}', ')', ] }; }



  function * iterBlockTildeAsyncGeneratorNestedCalls() {
    yield {
      title: 'call tidle async generator with no arguments, two lines'
    , source:[
        'outer @ fn_target @~::>*'
      , '  stmt_a'
      , '  stmt_b']
    , tokens:['name', '(', 'name', '(', 'name', 'function', '*', '(', ')', '{', 'name', 'name', '}', ')', ')'] };

    yield {
      title: 'call tidle async generator with two arguments, two lines'
    , source:[
        'outer @ fn_target @~ a, b ::>*'
      , '  stmt_a'
      , '  stmt_b']
    , tokens:['name', '(', 'name', '(', 'name', 'function', '*', '(', 'name', ',', 'name', ')', '{', 'name', 'name', '}', ')', ')'] };

    yield {
      title: 'call tidle async generator with two arguments, arg-list second '
    , source:[
        'outer @ fn_target @~ a, ...b ::>*'
      , '  stmt_a'
      , '  stmt_b']
    , tokens:['name', '(', 'name', '(', 'name', 'function', '*', '(', 'name', ',', '...', 'name', ')', '{', 'name', 'name', '}', ')', ')'] };

    yield {
      title: 'call tidle async generator with two arguments, unpack second by position'
    , source:[
        'outer @ fn_target @~ a, [b] ::>*'
      , '  stmt_a'
      , '  stmt_b']
    , tokens:['name', '(', 'name', '(', 'name', 'function', '*', '(', 'name', ',', '[', 'name', ']', ')', '{', 'name', 'name', '}', ')', ')'] };

    yield {
      title: 'call tidle async generator with two arguments, unpack second by name'
    , source:[
        'outer @ fn_target @~ a, {b} ::>*'
      , '  stmt_a'
      , '  stmt_b']
    , tokens:['name', '(', 'name', '(', 'name', 'function', '*', '(', 'name', ',', '{', 'name', '}', ')', '{', 'name', 'name', '}', ')', ')'] }; }

  describe('Immediately Invoked Expressions', (() => {

    describe('Immediately Invoked Function Expressions',
      genMochaSyntaxTestCases(iterImmediatelyInvokedFunctionExpressionTests, standardTransforms) );

    describe('Immediately Invoked Async Function Expressions',
      genMochaSyntaxTestCases(iterImmediatelyInvokedGeneratorExpressionTests, standardTransforms) );

    describe('Immediately Invoked Function Expressions (Variants)',
      genMochaSyntaxTestCases(iterImmediatelyInvokedGeneratorExpressionVariationsTests) );

    describe('Immediately Invoked Block Expressions',
      genMochaSyntaxTestCases(iterImmediatelyInvokedBlockExpressionTests, standardTransforms) ); } ) );


  function * iterImmediatelyInvokedFunctionExpressionTests() {
    yield * iterIIArrowExpressions();
    yield * iterIIFuncExpressions();

    yield * iterIIAsyncArrowExpressions();
    yield * iterIIAsyncFuncExpressions();}

  function * iterImmediatelyInvokedGeneratorExpressionTests() {
    yield * iterIIGeneratorExpressions('@!*');
    yield * iterIIAsyncGeneratorExpressions('@!>*');}

  function * iterImmediatelyInvokedGeneratorExpressionVariationsTests() {
    yield * iterIIGeneratorExpressions('@!=>*');

    yield * iterIIAsyncGeneratorExpressions('@!>*');
    yield * iterIIAsyncGeneratorExpressions('@!=>>*');}

  function * iterImmediatelyInvokedBlockExpressionTests() {
    yield * iterIIBlockExpressions();
    yield * iterIIAsyncBlockExpressions();}



  function * iterIIArrowExpressions() {
    yield {
      title: 'arrow expression (@!=>)'
    , source: '@!=> expression_body'
    , tokens:['(', '(', '(', ')', '=>', 'name', ')', '(', ')', ')'] };

    yield {
      title: 'arrow expression - two lines (@!=>)'
    , source:[
        '@!=>'
      , '  expression_body']
    , tokens:['(', '(', '(', ')', '=>', 'name', ')', '(', ')', ')'] };

    yield {
      title: 'arrow block expression (@!=>)'
    , source:[
        '@!=> ::'
      , '  stmt_a'
      , '  stmt_b']
    , tokens:['(', '(', '(', ')', '=>', '{', 'name', 'name', '}', ')', '(', ')', ')'] }; }


  function * iterIIAsyncArrowExpressions() {
    yield {
      title: 'async arrow expression (@!=>>)'
    , source: '@!=>> await expression_body'
    , tokens:['(', '(', 'name', '(', ')', '=>', 'name', 'name', ')', '(', ')', ')'] };

    yield {
      title: 'async arrow expression - two lines (@!=>>)'
    , source:[
        '@!=>>'
      , '  await expression_body']
    , tokens:['(', '(', 'name', '(', ')', '=>', 'name', 'name', ')', '(', ')', ')'] };

    yield {
      title: 'async arrow block expression (@!=>>)'
    , source:[
        '@!=>> ::'
      , '  await stmt_a'
      , '  await stmt_b']
    , tokens:['(', '(', 'name', '(', ')', '=>', '{', 'name', 'name', 'name', 'name', '}', ')', '(', ')', ')'] }; }


  function * iterIIFuncExpressions() {
    yield {
      title: 'immediately invoked expression (@!)'
    , source: '@! expression_body'
    , tokens:['(', '(', '(', ')', '=>', '{', 'name', '}', ')', '(', ')', ')'] };

    yield {
      title: 'immediately invoked expression - two lines (@!)'
    , source:[
        '@!'
      , '  stmt_a'
      , '  stmt_b']
    , tokens:['(', '(', '(', ')', '=>', '{', 'name', 'name', '}', ')', '(', ')', ')'] };

    yield {
      title: 'immediately invoked expression (@!)'
    , source:[
        '@! ::'
      , '  stmt_a'
      , '  stmt_b']
    , tokens:['(', '(', '(', ')', '=>', '{', '{', 'name', 'name', '}', '}', ')', '(', ')', ')'] }; }


  function * iterIIAsyncFuncExpressions() {
    yield {
      title: 'async immediately invoked expression (@!>)'
    , source: '@!> await expression_body'
    , tokens:['(', '(', 'name', '(', ')', '=>', '{', 'name', 'name', '}', ')', '(', ')', ')'] };

    yield {
      title: 'async immediately invoked expression - two lines (@!>)'
    , source:[
        '@!>'
      , '  await stmt_a'
      , '  await stmt_b']
    , tokens:['(', '(', 'name', '(', ')', '=>', '{', 'name', 'name', 'name', 'name', '}', ')', '(', ')', ')'] };

    yield {
      title: 'async immediately invoked expression (@!>)'
    , source:[
        '@!> ::'
      , '  await stmt_a'
      , '  await stmt_b']
    , tokens:['(', '(', 'name', '(', ')', '=>', '{', '{', 'name', 'name', 'name', 'name', '}', '}', ')', '(', ')', ')'] }; }


  function * iterIIGeneratorExpressions(variant='@!*') {
    yield {
      title: `immediately invoked generator expression (${variant})`
    , source: `${variant} yield expression_body`
    , tokens:['(', '(', 'function', '*', '(', ')', '{', 'name', 'name', '}', ')', '.', 'name', '(', 'this', ')', ')'] };

    yield {
      title: `immediately invoked generator expression - two lines (${variant})`
    , source:[
        variant
      , '  yield stmt_a'
      , '  yield stmt_b']
    , tokens:['(', '(', 'function', '*', '(', ')', '{', 'name', 'name', 'name', 'name', '}', ')', '.', 'name', '(', 'this', ')', ')'] };

    yield {
      title: `immediately invoked generator expression (${variant})`
    , source:[
`${variant} ::`
      , '  yield stmt_a'
      , '  yield stmt_b']
    , tokens:['(', '(', 'function', '*', '(', ')', '{', '{', 'name', 'name', 'name', 'name', '}', '}', ')', '.', 'name', '(', 'this', ')', ')'] }; }



  function * iterIIAsyncGeneratorExpressions(variant='@!>*') {
    yield {
      title: `async immediately invoked generator expression (${variant})`
    , source: `${variant} yield await expression_body`
    , tokens:['(', '(', 'name', 'function', '*', '(', ')', '{', 'name', 'name', 'name', '}', ')', '.', 'name', '(', 'this', ')', ')'] };

    yield {
      title: `async immediately invoked generator expression - two lines (${variant})`
    , source:[
        variant
      , '  yield await stmt_a'
      , '  yield await stmt_b']
    , tokens:['(', '(', 'name', 'function', '*', '(', ')', '{', 'name', 'name', 'name', 'name', 'name', 'name', '}', ')', '.', 'name', '(', 'this', ')', ')'] };

    yield {
      title: `async immediately invoked generator expression (${variant})`
    , source:[
`${variant} ::`
      , '  yield await stmt_a'
      , '  yield await stmt_b']
    , tokens:['(', '(', 'name', 'function', '*', '(', ')', '{', '{', 'name', 'name', 'name', 'name', 'name', 'name', '}', '}', ')', '.', 'name', '(', 'this', ')', ')'] }; }



  function * iterIIBlockExpressions() {
    yield {
      title: 'immediately invoked block expression (::!)'
    , source: '::! expression_body'
    , tokens:['{', '(', '(', ')', '=>', '{', 'name', '}', ')', '(', ')', '}'] };

    yield {
      title: 'immediately invoked block expression - two lines (::!)'
    , source:[
        '::!'
      , '  stmt_a'
      , '  stmt_b']
    , tokens:['{', '(', '(', ')', '=>', '{', 'name', 'name', '}', ')', '(', ')', '}'] };

    yield {
      title: 'immediately invoked block expression (::!)'
    , source:[
        '::!'
      , '  stmt_a'
      , '  stmt_b']
    , tokens:['{', '(', '(', ')', '=>', '{', 'name', 'name', '}', ')', '(', ')', '}'] }; }


  function * iterIIAsyncBlockExpressions() {
    yield {
      title: 'async immediately invoked block expression (::!>)'
    , source: '::!> await expression_body'
    , tokens:['{', '(', 'name', '(', ')', '=>', '{', 'name', 'name', '}', ')', '(', ')', '}'] };

    yield {
      title: 'async immediately invoked block expression - two lines (::!>)'
    , source:[
        '::!>'
      , '  await stmt_a'
      , '  await stmt_b']
    , tokens:['{', '(', 'name', '(', ')', '=>', '{', 'name', 'name', 'name', 'name', '}', ')', '(', ')', '}'] };

    yield {
      title: 'async immediately invoked block expression (::!>)'
    , source:[
        '::!> ::'
      , '  await stmt_a'
      , '  await stmt_b']
    , tokens:['{', '(', 'name', '(', ')', '=>', '{', '{', 'name', 'name', 'name', 'name', '}', '}', ')', '(', ')', '}'] }; }

  describe('If Statements',
    genMochaSyntaxTestCases(iterSyntaxVariations$9, standardTransforms) );




  function * iterSyntaxVariations$9() {
    yield * iterIfStmts();
    yield * iterCompoundExpressions();
    yield * iterIfElseStmts();
    yield * iterIfElseIfElseStmts();
    yield * iterExtendedIfElseIfElseStmts();}

  function * iterIfStmts() {
    // if (expr) body variations
    yield {expectValid: true
      , title: 'vanilla if statement'
      , source:['if (expr) { blockStatement }']
      , tokens:['if', '(', 'name', ')', '{', 'name', '}'] };

    yield {expectValid: true
      , title: 'offside if statement'
      , source:['if (expr) :: blockStatement']
      , tokens:['if', '(', 'name', ')', '{', 'name', '}'] };

    yield {expectValid: true
      , title: 'offside if statement, multiline'
      , source:['if (expr) ::'
                  , '  blockStatement']
      , tokens:['if', '(', 'name', ')', '{', 'name', '}'] };

    yield {expectValid: true
      , title: 'keyword offside if statement'
      , source:['if expr :: blockStatement']
      , tokens:['if', '(', 'name', ')', '{', 'name', '}'] };

    yield {expectValid: true
      , title: 'keyword offside if statement, multiline'
      , source:['if expr ::'
                  , '  blockStatement']
      , tokens:['if', '(', 'name', ')', '{', 'name', '}'] }; }


  function * iterCompoundExpressions() {
    // compound expression variants
    yield {expectValid: true
      , title: 'offside compound if expression'
      , source:['if test @ a, b, c :: blockStatement']
      , tokens:["if", "(", "name", "(", "name", ",", "name", ",", "name", ")", ")", "{", "name", "}"] };

    yield {expectValid: true
      , title: 'offside compound if expression, multiline'
      , source:['if test @ a, b, c ::'
                  , '  blockStatement']
      , tokens:["if", "(", "name", "(", "name", ",", "name", ",", "name", ")", ")", "{", "name", "}"] };

    yield {expectValid: true
      , title: 'offside dual compound if expression'
      , source:['if other && test @ a, b, c ::'
                  , '  blockStatement']
      , tokens:["if", "(", "name", "&&", "name", "(", "name", ",", "name", ",", "name", ")", ")", "{", "name", "}"] };


    // @ prefixed expressions
    yield {expectValid: true
      , title: 'offside compound if @ expression'
      , source:['if @ test @ a, b, c :: blockStatement']
      , tokens:["if", "(", "name", "(", "name", ",", "name", ",", "name", ")", ")", "{", "name", "}"] };

    yield {expectValid: true
      , title: 'offside compound if @ expression, multiline'
      , source:['if @ test @ a, b, c ::'
                  , '  blockStatement']
      , tokens:["if", "(", "name", "(", "name", ",", "name", ",", "name", ")", ")", "{", "name", "}"] };

    yield {expectValid: true
      , title: 'offside dual compound if @ expression'
      , source:['if @ other && test @ a, b, c ::'
                  , '  blockStatement']
      , tokens:["if", "(", "name", "&&", "name", "(", "name", ",", "name", ",", "name", ")", ")", "{", "name", "}"] };

    // keyword after :: block
    yield {expectValid: true
      , title: 'if a :: if b :: block'
      , source: 'if a :: if b :: block'
      , tokens:["if", "(", "name", ")", "{", "if", "(", "name", ")", "{", "name", "}", "}"] }; }


  function * iterIfElseStmts() {
    // if (expr) body else body variations
    yield {expectValid: true
      , title: 'vanilla if / else statement'
      , source:['if (expr) { blockStatement } else { blockStatement }']
      , tokens:['if', '(', 'name', ')', '{', 'name', '}', 'else', '{', 'name', '}'] };

    yield {expectValid: true
      , title: 'offside if / else statement'
      , source:['if (expr) :: blockStatement'
                  , 'else :: blockStatement']
      , tokens:['if', '(', 'name', ')', '{', 'name', '}', 'else', '{', 'name', '}'] };

    yield {expectValid: true
      , title: 'keyword offside if / else statement'
      , source:['if expr :: blockStatement'
                  , 'else :: blockStatement']
      , tokens:['if', '(', 'name', ')', '{', 'name', '}', 'else', '{', 'name', '}'] }; }


  function * iterIfElseIfElseStmts() {
    // if (expr) body else if (expr) else body variations
    yield {expectValid: true
      , title: 'vanilla if / else if / else statement'
      , source:['if (expr) { blockStatement } else if (expr) { blockStatement } else { blockStatement }']
      , tokens:['if', '(', 'name', ')', '{', 'name', '}', 'else', 'if', '(', 'name', ')', '{', 'name', '}', 'else', '{', 'name', '}'] };

    yield {expectValid: true
      , title: 'offside if / else if / else statement'
      , source:['if (expr) :: blockStatement'
                  , 'else if (expr) :: blockStatement'
                  , 'else :: blockStatement']
      , tokens:['if', '(', 'name', ')', '{', 'name', '}', 'else', 'if', '(', 'name', ')', '{', 'name', '}', 'else', '{', 'name', '}'] };

    yield {expectValid: true
      , title: 'keyword offside if / else if / else statement'
      , source:['if expr :: blockStatement'
                  , 'else if expr :: blockStatement'
                  , 'else :: blockStatement']
      , tokens:['if', '(', 'name', ')', '{', 'name', '}', 'else', 'if', '(', 'name', ')', '{', 'name', '}', 'else', '{', 'name', '}'] }; }


  function * iterExtendedIfElseIfElseStmts() {
    yield {expectValid: true
      , title: 'mixed variant 1 keyword offside if / else if / else statement'
      , source:['if (expr) :: blockStatement'
                  , 'else if expr :: blockStatement'
                  , 'else :: blockStatement']
      , tokens:['if', '(', 'name', ')', '{', 'name', '}', 'else', 'if', '(', 'name', ')', '{', 'name', '}', 'else', '{', 'name', '}'] };

    yield {expectValid: true
      , title: 'mixed variant 2 keyword offside if / else if / else statement'
      , source:['if expr :: blockStatement'
                  , 'else if (expr) :: blockStatement'
                  , 'else :: blockStatement']
      , tokens:['if', '(', 'name', ')', '{', 'name', '}', 'else', 'if', '(', 'name', ')', '{', 'name', '}', 'else', '{', 'name', '}'] };

    yield {expectValid: true
      , title: 'mixed variant 3 keyword offside if / else if / else statement'
      , source:['if @ expr :: blockStatement'
                  , 'else if @ expr :: blockStatement'
                  , 'else :: blockStatement']
      , tokens:['if', '(', 'name', ')', '{', 'name', '}', 'else', 'if', '(', 'name', ')', '{', 'name', '}', 'else', '{', 'name', '}'] };

    yield {expectValid: true
      , title: 'mixed variant 4 keyword offside if / else if / else statement'
      , source:['if @ expr :: blockStatement'
                  , 'else if expr :: blockStatement'
                  , 'else :: blockStatement']
      , tokens:['if', '(', 'name', ')', '{', 'name', '}', 'else', 'if', '(', 'name', ')', '{', 'name', '}', 'else', '{', 'name', '}'] };

    yield {expectValid: true
      , title: 'mixed variant 5 keyword offside if / else if / else statement'
      , source:['if @ expr :: blockStatement'
                  , 'else if (expr) :: blockStatement'
                  , 'else :: blockStatement']
      , tokens:['if', '(', 'name', ')', '{', 'name', '}', 'else', 'if', '(', 'name', ')', '{', 'name', '}', 'else', '{', 'name', '}'] }; }

  describe('While Statements',
    genMochaSyntaxTestCases(iterSyntaxVariations$8, standardTransforms) );


  function * iterSyntaxVariations$8() {
    yield * iterWhileStmts();
    yield * iterDoWhileStmts();}

  function * iterWhileStmts() {
    // while (expr) body variations
    yield {expectValid: true
      , title: 'vanilla while statement'
      , source:['while (expr) { blockStatement }']
      , tokens:['while', '(', 'name', ')', '{', 'name', '}'] };

    yield {expectValid: true
      , title: 'offside while statement'
      , source:['while (expr) :: blockStatement']
      , tokens:['while', '(', 'name', ')', '{', 'name', '}'] };

    yield {expectValid: true
      , title: 'offside while statement, multiline'
      , source:['while (expr) ::'
                  , '  blockStatement']
      , tokens:['while', '(', 'name', ')', '{', 'name', '}'] };

    yield {expectValid: true
      , title: 'keyword offside while statement'
      , source:['while expr :: blockStatement']
      , tokens:['while', '(', 'name', ')', '{', 'name', '}'] };

    yield {expectValid: true
      , title: 'keyword offside while statement, multiline'
      , source:['while expr ::'
                  , '  blockStatement']
      , tokens:['while', '(', 'name', ')', '{', 'name', '}'] }; }


  function * iterDoWhileStmts() {
    // do {} while (expr) body variations
    yield {expectValid: true
      , title: 'vanilla do / while statement'
      , source:['do { blockStatement } while (expr)']
      , tokens:['do', '{', 'name', '}', 'while', '(', 'name', ')'] };

    yield {expectValid: true
      , title: 'offside do / while statement'
      , source:['do :: blockStatement'
                  , 'while (expr)']
      , tokens:['do', '{', 'name', '}', 'while', '(', 'name', ')'] };

    yield {expectValid: true
      , title: 'keyword offside do / while statement'
      , source:['do :: blockStatement'
                  , 'while expr']
      , tokens:['do', '{', 'name', '}', 'while', '(', 'name', ')'] }; }

  describe('For Of Statements',
    genMochaSyntaxTestCases(iterSyntaxVariations$7, standardTransforms) );



  function * iterSyntaxVariations$7() {
    yield * iterForOfStatements();
    yield * iterKeywordOffsideForOfStatements();
    yield * iterKeywordOffsideForOfWithCallStatements();
    yield * iterKeywordAtOffsideForOfStatements();}


  function * iterForOfStatements() {
    // for (each of iterable) body variations
    yield {expectValid: true
      , title: 'vanilla for/of statement'
      , source:['for (each of iterable) { blockStatement }']
      , tokens:['for', '(', 'name', 'name', 'name', ')', '{', 'name', '}'] };

    yield {expectValid: true
      , title: 'vanilla for/of let statement'
      , source:['for (let each of iterable) { blockStatement }']
      , tokens:['for', '(', 'name', 'name', 'name', 'name', ')', '{', 'name', '}'] };

    yield {expectValid: true
      , title: 'vanilla for/of const statement'
      , source:['for (const each of iterable) { blockStatement }']
      , tokens:['for', '(', 'const', 'name', 'name', 'name', ')', '{', 'name', '}'] };

    yield {expectValid: true
      , title: 'offside for/of statement'
      , source:['for (each of iterable) :: blockStatement']
      , tokens:['for', '(', 'name', 'name', 'name', ')', '{', 'name', '}'] };

    yield {expectValid: true
      , title: 'offside for/of statement, multiline'
      , source:['for (each of iterable) ::'
                  , '  blockStatement']
      , tokens:['for', '(', 'name', 'name', 'name', ')', '{', 'name', '}'] };

    yield {expectValid: true
      , title: 'offside for/of let statement, multiline'
      , source:['for (let each of iterable) ::'
                  , '  blockStatement']
      , tokens:['for', '(', 'name', 'name', 'name', 'name', ')', '{', 'name', '}'] }; }



  function * iterKeywordOffsideForOfStatements() {
    yield {expectValid: true
      , title: 'keyword offside for/of statement'
      , source:['for each of iterable :: blockStatement']
      , tokens:['for', '(', 'name', 'name', 'name', ')', '{', 'name', '}'] };

    yield {expectValid: true
      , title: 'keyword offside let for/of statement'
      , source:['for let each of iterable :: blockStatement']
      , tokens:['for', '(', 'name', 'name', 'name', 'name', ')', '{', 'name', '}'] };

    yield {expectValid: true
      , title: 'keyword offside for/of statement, multiline'
      , source:['for each of iterable ::'
                  , '  blockStatement']
      , tokens:['for', '(', 'name', 'name', 'name', ')', '{', 'name', '}'] };

    yield {expectValid: true
      , title: 'ordered unpack keyword offside for/of statement, multiline'
      , source:['for [a,b] of iterable ::'
                  , '  blockStatement']
      , tokens:['for', '(', '[', 'name', ',', 'name', ']', 'name', 'name', ')', '{', 'name', '}'] };

    yield {expectValid: true
      , title: 'named unpack keyword offside for/of statement, multiline'
      , source:['for {a,b} of iterable ::'
                  , '  blockStatement']
      , tokens:['for', '(', '{', 'name', ',', 'name', '}', 'name', 'name', ')', '{', 'name', '}'] }; }


  function * iterKeywordOffsideForOfWithCallStatements() {
    yield {expectValid: true
      , title: 'keyword offside for/of statement with call'
      , source:['for each of fn_call @ x, y ::'
                  , '  blockStatement']
      , tokens:['for', '(', 'name', 'name', 'name', '(', 'name', ',', 'name', ')', ')', '{', 'name', '}'] };

    yield {expectValid: true
      , title: 'keyword offside for/of let statement with call'
      , source:['for let each of fn_call @ x, y ::'
                  , '  blockStatement']
      , tokens:['for', '(', 'name', 'name', 'name', 'name', '(', 'name', ',', 'name', ')', ')', '{', 'name', '}'] };


    yield {expectValid: true
      , title: 'ordered unpack keyword offside for/of statement with call'
      , source:['for [a,b] of fn_call @ x, y ::'
                  , '  blockStatement']
      , tokens:['for', '(', '[', 'name', ',', 'name', ']', 'name', 'name', '(', 'name', ',', 'name', ')', ')', '{', 'name', '}'] };

    yield {expectValid: true
      , title: 'named unpack keyword offside for/of statement with call'
      , source:['for {a,b} of fn_call @ x, y ::'
                  , '  blockStatement']
      , tokens:['for', '(', '{', 'name', ',', 'name', '}', 'name', 'name', '(', 'name', ',', 'name', ')', ')', '{', 'name', '}'] }; }


  function * iterKeywordAtOffsideForOfStatements() {
    yield {expectValid: true
      , title: 'keyword @ offside for/of let statement, multiline'
      , source:['for @ let each of iterable ::'
                  , '  blockStatement']
      , tokens:['for', '(', 'name', 'name', 'name', 'name', ')', '{', 'name', '}'] };

    yield {expectValid: true
      , title: 'keyword @ offside for/of statement, multiline'
      , source:['for @ each of iterable ::'
                  , '  blockStatement']
      , tokens:['for', '(', 'name', 'name', 'name', ')', '{', 'name', '}'] };

    yield {expectValid: true
      , title: 'ordered unpack keyword @ offside for/of statement, multiline'
      , source:['for @ [a,b] of iterable ::'
                  , '  blockStatement']
      , tokens:['for', '(', '[', 'name', ',', 'name', ']', 'name', 'name', ')', '{', 'name', '}'] };

    yield {expectValid: true
      , title: 'named unpack keyword @ offside for/of statement, multiline'
      , source:['for @ {a,b} of iterable ::'
                  , '  blockStatement']
      , tokens:['for', '(', '{', 'name', ',', 'name', '}', 'name', 'name', ')', '{', 'name', '}'] };

    yield {expectValid: true
      , title: 'ordered unpack keyword @ offside for/of statement with call'
      , source:['for @ [a,b] of fn_call @ x, y ::'
                  , '  blockStatement']
      , tokens:['for', '(', '[', 'name', ',', 'name', ']', 'name', 'name', '(', 'name', ',', 'name', ')', ')', '{', 'name', '}'] };

    yield {expectValid: true
      , title: 'named unpack keyword @ offside for/of statement with call'
      , source:['for @ {a,b} of fn_call @ x, y ::'
                  , '  blockStatement']
      , tokens:['for', '(', '{', 'name', ',', 'name', '}', 'name', 'name', '(', 'name', ',', 'name', ')', ')', '{', 'name', '}'] }; }

  describe('For Of Step Statements',
    genMochaSyntaxTestCases(iterSyntaxVariations$6, standardTransforms) );




  function * iterSyntaxVariations$6() {
    yield {expectValid: true
      , title: 'vanilla for/step statement'
      , source:['for (i=0; i<n; i++) { blockStatement }']
      , tokens:['for', '(', 'name', '=', 'num', ';', 'name', tkns.cmp, 'name', ';', 'name', '++/--', ')', '{', 'name', '}'] };

    yield {expectValid: true
      , title: 'vanilla for/step let statement'
      , source:['for (let i=0; i<n; i++) { blockStatement }']
      , tokens:['for', '(', 'name', 'name', '=', 'num', ';', 'name', tkns.cmp, 'name', ';', 'name', '++/--', ')', '{', 'name', '}'] };

    yield {expectValid: true
      , title: 'offside for/step statement'
      , source:['for (i=0; i<n; i++) :: blockStatement']
      , tokens:['for', '(', 'name', '=', 'num', ';', 'name', tkns.cmp, 'name', ';', 'name', '++/--', ')', '{', 'name', '}'] };

    yield {expectValid: true
      , title: 'offside for/step let statement'
      , source:['for (let i=0; i<n; i++) :: blockStatement']
      , tokens:['for', '(', 'name', 'name', '=', 'num', ';', 'name', tkns.cmp, 'name', ';', 'name', '++/--', ')', '{', 'name', '}'] };

    yield {expectValid: true
      , title: 'offside for/step let statement, multiline'
      , source:['for (let i=0; i<n; i++) ::'
                  , '  blockStatement']
      , tokens:['for', '(', 'name', 'name', '=', 'num', ';', 'name', tkns.cmp, 'name', ';', 'name', '++/--', ')', '{', 'name', '}'] };

    yield {expectValid: true
      , title: 'keyword offside for/step statement'
      , source:['for i=0; i<n; i++ :: blockStatement']
      , tokens:['for', '(', 'name', '=', 'num', ';', 'name', tkns.cmp, 'name', ';', 'name', '++/--', ')', '{', 'name', '}'] };

    yield {expectValid: true
      , title: 'keyword offside for/step statement, multiline'
      , source:['for i=0; i<n; i++ ::'
                  , '  blockStatement']
      , tokens:['for', '(', 'name', '=', 'num', ';', 'name', tkns.cmp, 'name', ';', 'name', '++/--', ')', '{', 'name', '}'] };

    yield {expectValid: true
      , title: 'keyword offside for/step let statement'
      , source:['for let i=0; i<n; i++ :: blockStatement']
      , tokens:['for', '(', 'name', 'name', '=', 'num', ';', 'name', tkns.cmp, 'name', ';', 'name', '++/--', ')', '{', 'name', '}'] }; }

  describe('For Await Of Statements', (() => {
    const transforms = asyncFunctionTransforms ;

    for (const [name, xform] of Object.entries(transforms) ) {
      describe(name, (() =>genSyntaxTestCases(it, xform(iterSyntaxVariations$5()) ) )); } } ) );


  function * iterSyntaxVariations$5() {
    yield * iterForAwaitOfStatements();
    yield * iterKeywordOffsideForAwaitOfStatements();
    yield * iterKeywordOffsideForAwaitOfWithCallStatements();
    yield * iterKeywordAtOffsideForAwaitOfStatements();}


  function * iterForAwaitOfStatements() {
    // for await (each of iterable) body variations
    yield {expectValid: true
      , title: 'vanilla for await of statement'
      , source:['for await (each of iterable) { blockStatement }']
      , tokens:['for', 'name', '(', 'name', 'name', 'name', ')', '{', 'name', '}'] };

    yield {expectValid: true
      , title: 'vanilla for await of let statement'
      , source:['for await (let each of iterable) { blockStatement }']
      , tokens:['for', 'name', '(', 'name', 'name', 'name', 'name', ')', '{', 'name', '}'] };

    yield {expectValid: true
      , title: 'vanilla for await of const statement'
      , source:['for await (const each of iterable) { blockStatement }']
      , tokens:['for', 'name', '(', 'const', 'name', 'name', 'name', ')', '{', 'name', '}'] };

    yield {expectValid: true
      , title: 'offside for await of statement'
      , source:['for await (each of iterable) :: blockStatement']
      , tokens:['for', 'name', '(', 'name', 'name', 'name', ')', '{', 'name', '}'] };

    yield {expectValid: true
      , title: 'offside for await of statement, multiline'
      , source:['for await (each of iterable) ::'
                  , '  blockStatement']
      , tokens:['for', 'name', '(', 'name', 'name', 'name', ')', '{', 'name', '}'] };

    yield {expectValid: true
      , title: 'offside for await of let statement, multiline'
      , source:['for await (let each of iterable) ::'
                  , '  blockStatement']
      , tokens:['for', 'name', '(', 'name', 'name', 'name', 'name', ')', '{', 'name', '}'] }; }



  function * iterKeywordOffsideForAwaitOfStatements() {
    yield {expectValid: true
      , title: 'keyword offside for await of statement'
      , source:['for await each of iterable :: blockStatement']
      , tokens:['for', 'name', '(', 'name', 'name', 'name', ')', '{', 'name', '}'] };

    yield {expectValid: true
      , title: 'keyword offside let for await of statement'
      , source:['for await let each of iterable :: blockStatement']
      , tokens:['for', 'name', '(', 'name', 'name', 'name', 'name', ')', '{', 'name', '}'] };

    yield {expectValid: true
      , title: 'keyword offside for await of statement, multiline'
      , source:['for await each of iterable ::'
                  , '  blockStatement']
      , tokens:['for', 'name', '(', 'name', 'name', 'name', ')', '{', 'name', '}'] };

    yield {expectValid: true
      , title: 'ordered unpack keyword offside for await of statement, multiline'
      , source:['for await [a,b] of iterable ::'
                  , '  blockStatement']
      , tokens:['for', 'name', '(', '[', 'name', ',', 'name', ']', 'name', 'name', ')', '{', 'name', '}'] };

    yield {expectValid: true
      , title: 'named unpack keyword offside for await of statement, multiline'
      , source:['for await {a,b} of iterable ::'
                  , '  blockStatement']
      , tokens:['for', 'name', '(', '{', 'name', ',', 'name', '}', 'name', 'name', ')', '{', 'name', '}'] }; }


  function * iterKeywordOffsideForAwaitOfWithCallStatements() {
    yield {expectValid: true
      , title: 'keyword offside for await of statement with call'
      , source:['for await each of fn_call @ x, y ::'
                  , '  blockStatement']
      , tokens:['for', 'name', '(', 'name', 'name', 'name', '(', 'name', ',', 'name', ')', ')', '{', 'name', '}'] };

    yield {expectValid: true
      , title: 'keyword offside for await of let statement with call'
      , source:['for await let each of fn_call @ x, y ::'
                  , '  blockStatement']
      , tokens:['for', 'name', '(', 'name', 'name', 'name', 'name', '(', 'name', ',', 'name', ')', ')', '{', 'name', '}'] };


    yield {expectValid: true
      , title: 'ordered unpack keyword offside for await of statement with call'
      , source:['for await [a,b] of fn_call @ x, y ::'
                  , '  blockStatement']
      , tokens:['for', 'name', '(', '[', 'name', ',', 'name', ']', 'name', 'name', '(', 'name', ',', 'name', ')', ')', '{', 'name', '}'] };

    yield {expectValid: true
      , title: 'named unpack keyword offside for await of statement with call'
      , source:['for await {a,b} of fn_call @ x, y ::'
                  , '  blockStatement']
      , tokens:['for', 'name', '(', '{', 'name', ',', 'name', '}', 'name', 'name', '(', 'name', ',', 'name', ')', ')', '{', 'name', '}'] }; }


  function * iterKeywordAtOffsideForAwaitOfStatements() {
    yield {expectValid: true
      , title: 'keyword @ offside for await of let statement, multiline'
      , source:['for await @ let each of iterable ::'
                  , '  blockStatement']
      , tokens:['for', 'name', '(', 'name', 'name', 'name', 'name', ')', '{', 'name', '}'] };

    yield {expectValid: true
      , title: 'keyword @ offside for await of statement, multiline'
      , source:['for await @ each of iterable ::'
                  , '  blockStatement']
      , tokens:['for', 'name', '(', 'name', 'name', 'name', ')', '{', 'name', '}'] };

    yield {expectValid: true
      , title: 'ordered unpack keyword @ offside for await of statement, multiline'
      , source:['for await @ [a,b] of iterable ::'
                  , '  blockStatement']
      , tokens:['for', 'name', '(', '[', 'name', ',', 'name', ']', 'name', 'name', ')', '{', 'name', '}'] };

    yield {expectValid: true
      , title: 'named unpack keyword @ offside for await of statement, multiline'
      , source:['for await @ {a,b} of iterable ::'
                  , '  blockStatement']
      , tokens:['for', 'name', '(', '{', 'name', ',', 'name', '}', 'name', 'name', ')', '{', 'name', '}'] };

    yield {expectValid: true
      , title: 'ordered unpack keyword @ offside for await of statement with call'
      , source:['for await @ [a,b] of fn_call @ x, y ::'
                  , '  blockStatement']
      , tokens:['for', 'name', '(', '[', 'name', ',', 'name', ']', 'name', 'name', '(', 'name', ',', 'name', ')', ')', '{', 'name', '}'] };

    yield {expectValid: true
      , title: 'named unpack keyword @ offside for await of statement with call'
      , source:['for await @ {a,b} of fn_call @ x, y ::'
                  , '  blockStatement']
      , tokens:['for', 'name', '(', '{', 'name', ',', 'name', '}', 'name', 'name', '(', 'name', ',', 'name', ')', ')', '{', 'name', '}'] }; }

  describe('Misc Keyword Statements',
    genMochaSyntaxTestCases(iterSyntaxVariations$4, standardTransforms) );




  function * iterSyntaxVariations$4() {
    yield * iterObjectWithKeywords();
    yield * iterPromiseCatch();
    yield * iterHashCatchFn();
    yield * iterTernaryExpressions();}


  function * iterObjectWithKeywords() {
    yield {expectValid: true,
        title: 'object literal with keyword keys'
      , source:['const ans = @{}'
                  , '  if: body,'
                  , '  while: body,'
                  , '  for: body,'
                  , '  switch: body,'
                  , '  catch: body,'
                  , '  function: body,'
                  , '  class: body,'
                  , '  await: body,'
                  , '  async: body,'
                  , '  with: body,']
      , tokens:[
          'const' , 'name' , '=' , '{',
            'if' , ':' , 'name' , ',',
            'while' , ':' , 'name' , ',',
            'for' , ':' , 'name' , ',',
            'switch' , ':' , 'name' , ',',
            'catch' , ':' , 'name' , ',' ,
            'function' , ':' , 'name' , ',',
            'class' , ':' , 'name' , ',',
            'name' , ':' , 'name' , ',',
            'name' , ':' , 'name' , ',',
            'with' , ':' , 'name' , ',',
          '}'] };

    yield {expectValid: true,
        title: 'object literal with keyword keys'
      , source:['const ans = @:'
                  , '  if: body,'
                  , '  while: body,'
                  , '  for: body,'
                  , '  switch: body,'
                  , '  catch: body,'
                  , '  function: body,'
                  , '  class: body,'
                  , '  await: body,'
                  , '  async: body,'
                  , '  with: body,']
      , tokens:[
          'const' , 'name' , '=' , '(', '{',
            'if' , ':' , 'name' , ',',
            'while' , ':' , 'name' , ',',
            'for' , ':' , 'name' , ',',
            'switch' , ':' , 'name' , ',',
            'catch' , ':' , 'name' , ',' ,
            'function' , ':' , 'name' , ',',
            'class' , ':' , 'name' , ',',
            'name' , ':' , 'name' , ',',
            'name' , ':' , 'name' , ',',
            'with' , ':' , 'name' , ',',
          '}', ')'] }; }


  function * iterPromiseCatch() {
    // catch keyword after promise-- promise.catch @ err => err
    yield {expectValid: true
      , title: 'promise.catch vanilla'
      , source:['promise.catch(err => err)']
      , tokens:['name', '.', 'catch', '(', 'name', '=>', 'name', ')'] };

    yield {expectValid: true
      , title: 'promise.catch offside arrow expression'
      , source:['promise.catch @ err => err']
      , tokens:['name', '.', 'catch', '(', 'name', '=>', 'name', ')'] };

    yield {expectValid: true
      , title: 'promise.catch offside arrow block'
      , source:['promise.catch @ err => :: err']
      , tokens:['name', '.', 'catch', '(', 'name', '=>', '{', 'name', '}', ')'] }; }


  function * iterHashCatchFn() {
    // catch keyword within hash -- {catch: err => err}
    yield {expectValid: true
      , title: 'hash (vanilla) with catch entry arrow expression'
      , source:['const ns = {catch: err => err}']
      , tokens:['const', 'name', '=', '{', 'catch', ':', 'name', '=>', 'name', '}'] };

    yield {expectValid: true
      , title: 'hash (offside) with catch entry arrow expression'
      , source:['const ns = @{} catch: err => err']
      , tokens:['const', 'name', '=', '{', 'catch', ':', 'name', '=>', 'name', '}'] };

    yield {expectValid: true
      , title: 'hash (offside) with catch entry arrow block'
      , source:['const ns = @{} catch: err => :: err']
      , tokens:['const', 'name', '=', '{', 'catch', ':', 'name', '=>', '{', 'name', '}', '}'] };

    yield {expectValid: true
      , title: 'hash (offside) with catch function'
      , source:['const ns = @{} catch(err) :: ']
      , tokens:['const', 'name', '=', '{', 'catch', '(', 'name', ')', '{', '}', '}'] }; }

  function * iterTernaryExpressions() {
    yield {expectValid: true
      , title: 'ternary with @ on second branch'
      , source:['const ans = test'
                  , '  ? first'
                  , '  : @ second']
      , tokens:['const', 'name', '=', 'name', '?', 'name', ':', '(', 'name', ')'] };

    yield {expectValid: true
      , title: 'ternary with @ on first branch'
      , source:['const ans = test'
                  , '  ? @ first'
                  , '  : second']
      , tokens:['const', 'name', '=', 'name', '?', '(', 'name', ')', ':', 'name'] };

    yield {expectValid: true
      , title: 'ternary with @ on both branchs'
      , source:['const ans = test'
                  , '  ? @ first'
                  , '  : @ second']
      , tokens:['const', 'name', '=', 'name', '?', '(', 'name', ')', ':', '(', 'name', ')'] };


    // Test with @{}
    yield {expectValid: true
      , title: 'ternary with @{} on second branch'
      , source:['const ans = test'
                  , '  ? first'
                  , '  : @{} second'
                  , '     , second_part_b']
      , tokens:['const', 'name', '=', 'name', '?', 'name', ':', '{', 'name', ',', 'name', '}'] };

    yield {expectValid: true
      , title: 'ternary with @{} on first branch'
      , source:['const ans = test'
                  , '  ? @{} first'
                  , '     , first_part_b'
                  , '  : second']
      , tokens:['const', 'name', '=', 'name', '?', '{', 'name', ',', 'name', '}', ':', 'name'] };

    yield {expectValid: true
      , title: 'ternary with @{} on both branchs'
      , source:['const ans = test'
                  , '  ? @{} first'
                  , '     , first_part_b'
                  , '  : @{} second'
                  , '     , second_part_b']
      , tokens:['const', 'name', '=', 'name', '?', '{', 'name', ',', 'name', '}', ':', '{', 'name', ',', 'name', '}'] };


    // Test with @:
    yield {expectValid: true
      , title: 'ternary with @: on second branch'
      , source:['const ans = test'
                  , '  ? first'
                  , '  : @: second'
                  , '     , second_part_b']
      , tokens:['const', 'name', '=', 'name', '?', 'name', ':', '(', '{', 'name', ',', 'name', '}', ')'] };

    yield {expectValid: true
      , title: 'ternary with @: on first branch'
      , source:['const ans = test'
                  , '  ? @: first'
                  , '     , first_part_b'
                  , '  : second']
      , tokens:['const', 'name', '=', 'name', '?', '(', '{', 'name', ',', 'name', '}', ')', ':', 'name'] };

    yield {expectValid: true
      , title: 'ternary with @: on both branchs'
      , source:['const ans = test'
                  , '  ? @: first'
                  , '     , first_part_b'
                  , '  : @: second'
                  , '     , second_part_b']
      , tokens:['const', 'name', '=', 'name', '?', '(', '{', 'name', ',', 'name', '}', ')', ':', '(', '{', 'name', ',', 'name', '}', ')'] };


    // Test with @[]
    yield {expectValid: true
      , title: 'ternary with @[] on second branch'
      , source:['const ans = test'
                  , '  ? first'
                  , '  : @[] second'
                  , '     , second_part_b']
      , tokens:['const', 'name', '=', 'name', '?', 'name', ':', '[', 'name', ',', 'name', ']'] };

    yield {expectValid: true
      , title: 'ternary with @[] on first branch'
      , source:['const ans = test'
                  , '  ? @[] first'
                  , '     , first_part_b'
                  , '  : second']
      , tokens:['const', 'name', '=', 'name', '?', '[', 'name', ',', 'name', ']', ':', 'name'] };

    yield {expectValid: true
      , title: 'ternary with @[] on both branchs'
      , source:['const ans = test'
                  , '  ? @[] first'
                  , '     , first_part_b'
                  , '  : @[] second'
                  , '     , second_part_b']
      , tokens:['const', 'name', '=', 'name', '?', '[', 'name', ',', 'name', ']', ':', '[', 'name', ',', 'name', ']'] };


    // Test with @#
    yield {expectValid: true
      , title: 'ternary with @# on second branch'
      , source:['const ans = test'
                  , '  ? first'
                  , '  : @# second'
                  , '     , second_part_b']
      , tokens:['const', 'name', '=', 'name', '?', 'name', ':', '(', '[', 'name', ',', 'name', ']', ')'] };

    yield {expectValid: true
      , title: 'ternary with @# on first branch'
      , source:['const ans = test'
                  , '  ? @# first'
                  , '     , first_part_b'
                  , '  : second']
      , tokens:['const', 'name', '=', 'name', '?', '(', '[', 'name', ',', 'name', ']', ')', ':', 'name'] };

    yield {expectValid: true
      , title: 'ternary with @# on both branchs'
      , source:['const ans = test'
                  , '  ? @# first'
                  , '     , first_part_b'
                  , '  : @# second'
                  , '     , second_part_b']
      , tokens:['const', 'name', '=', 'name', '?', '(', '[', 'name', ',', 'name', ']', ')', ':', '(', '[', 'name', ',', 'name', ']', ')'] }; }

  describe('Catch Statements',
    genMochaSyntaxTestCases(iterSyntaxVariations$3, standardTransforms) );


  function * iterSyntaxVariations$3() {
    yield * iterTryFinally();
    yield * iterTryCatch();}

  function * iterTryFinally() {
    // try / finally variations
    yield {expectValid: true
      , title: 'vanilla try/finally statement'
      , source:['try { blockStatement } finally { blockStatement }']
      , tokens:['try', '{', 'name', '}', 'finally', '{', 'name', '}'] };

    yield {expectValid: true
      , title: 'offside try/finally statement'
      , source:['try ::'
                  , '  blockStatement'
                  , 'finally ::'
                  , '  blockStatement']
      , tokens:['try', '{', 'name', '}', 'finally', '{', 'name', '}'] }; }


  function * iterTryCatch() {
    // try / catch (expr) variations
    yield {expectValid: true
      , title: 'vanilla try/catch statement'
      , source:['try { blockStatement } catch (err) { blockStatement }']
      , tokens:['try', '{', 'name', '}', 'catch', '(', 'name', ')', '{', 'name', '}'] };

    yield {expectValid: true
      , title: 'offside try/catch statement'
      , source:['try ::'
                  , '  blockStatement'
                  , 'catch (err) ::'
                  , '  blockStatement']
      , tokens:['try', '{', 'name', '}', 'catch', '(', 'name', ')', '{', 'name', '}'] };

    yield {expectValid: true
      , title: 'keyword offside try/catch statement'
      , source:['try ::'
                  , '  blockStatement'
                  , 'catch err ::'
                  , '  blockStatement']
      , tokens:['try', '{', 'name', '}', 'catch', '(', 'name', ')', '{', 'name', '}'] };

    yield {expectValid: true
      , title: 'keyword @ offside try/catch statement'
      , source:['try ::'
                  , '  blockStatement'
                  , 'catch @ err ::'
                  , '  blockStatement']
      , tokens:['try', '{', 'name', '}', 'catch', '(', 'name', ')', '{', 'name', '}'] }; }

  describe('Switch Statements',
    genMochaSyntaxTestCases(iterSyntaxVariations$2, standardTransforms) );




  function * iterSyntaxVariations$2() {
    // switch (expr) :: cases variations
    yield {expectValid: true
      , title: 'vanilla switch statement'
      , source:['switch (expr) { case a: default: break }']
      , tokens:['switch', '(', 'name', ')', '{', 'case', 'name', ':', 'default', ':', 'break', '}'] };

    yield {expectValid: true
      , title: 'offside switch statement'
      , source:['switch (expr) :: case a: default: break']
      , tokens:['switch', '(', 'name', ')', '{', 'case', 'name', ':', 'default', ':', 'break', '}'] };

    yield {expectValid: true
      , title: 'keyword offside switch statement'
      , source:['switch expr :: case a: default: break']
      , tokens:['switch', '(', 'name', ')', '{', 'case', 'name', ':', 'default', ':', 'break', '}'] };

    yield {expectValid: true
      , title: 'keyword @ offside switch statement'
      , source:['switch @ expr :: case a: default: break']
      , tokens:['switch', '(', 'name', ')', '{', 'case', 'name', ':', 'default', ':', 'break', '}'] };

    yield {expectValid: true
      , title: 'keyword offside switch statement with call'
      , source:['switch fn_call @ x, y :: case a: default: break']
      , tokens:['switch', '(', 'name', '(', 'name', ',', 'name', ')', ')', '{', 'case', 'name', ':', 'default', ':', 'break', '}'] }; }

  describe('Complex Multiline Statements',
    genMochaSyntaxTestCases(iterSyntaxVariations$1, standardTransforms) );


  function * iterSyntaxVariations$1() {
    //yield * iterExpectedSyntaxErrors()
    yield * iterBlockStatements();}

  function * iterBlockStatements() {
    yield {expectValid: true
      , title: 'chained statements in a block should work'
      , source:['if cond ::'
                  , '  firstStatement'
                  , '  secondStatement; chainedStatement; chainedAgain'
                  , '  thirdStatement']
      , tokens:['if', '(', 'name', ')', '{', 'name', 'name', ';', 'name', ';', 'name', 'name', '}'] };


    yield {expectValid: true
      , title: 'keyword offside if/else statement, extended multiline'
      , source:['if cond_a'
                  , '    && cond_b ::'
                  , '  blockStatement'
                  , 'else ::'
                  , '  blockStatement']
      , tokens:['if', '(', 'name', '&&', 'name', ')', '{', 'name', '}', 'else', '{', 'name', '}'] };

    yield {expectValid: true
      , title: 'v1 keyword offside if/else statement with call, extended multiline'
      , source:['if cond_a'
                  , '    && fn_test @ a, b ::'
                  , '  blockStatement'
                  , 'else ::'
                  , '  blockStatement']
      , tokens:['if', '(', 'name', '&&', 'name', '(', 'name', ',', 'name', ')', ')', '{', 'name', '}', 'else', '{', 'name', '}'] };

    yield {expectValid: true
      , title: 'v2 keyword offside if/else statement with call, extended multiline'
      , source:['if fn_test @ a, b'
                  , '    && cond_b ::'
                  , '  blockStatement'
                  , 'else ::'
                  , '  blockStatement']
      , tokens:['if', '(', 'name', '(', 'name', ',', 'name', ')', '&&', 'name', ')', '{', 'name', '}', 'else', '{', 'name', '}'] };

    yield {expectValid: true
      , title: 'keyword offside while statement, extended multiline'
      , source:['while cond_a'
                  , '    && cond_b ::'
                  , '  blockStatement']
      , tokens:['while', '(', 'name', '&&', 'name', ')', '{', 'name', '}'] };

    yield {expectValid: true
      , title: 'keyword offside do/while statement, extended multiline'
      , source:['do ::'
                  , '  blockStatement'
                  , 'while cond_a'
                  , '   && cond_b']
      , tokens:['do', '{', 'name', '}', 'while', '(', 'name', '&&', 'name', ')'] };

    yield {expectValid: true
      , title: 'keyword offside do/while statement with call, extended multiline'
      , source:['do ::'
                  , '  blockStatement'
                  , 'while fn_test @ a, b'
                  , '   && cond_b']
      , tokens:['do', '{', 'name', '}', 'while', '(', 'name', '(', 'name', ',', 'name', ')', '&&', 'name', ')'] };

    yield {expectValid: true
      , title: 'keyword offside switch statement, extended multiline'
      , source:['switch'
                  , '    fn_init @ a, b ::'
                  , '  case a: default: blockStatement']
      , tokens:['switch', '(', 'name', '(', 'name', ',', 'name', ')', ')', '{', 'case', 'name', ':', 'default', ':', 'name', '}'] };

    yield {expectValid: true
      , title: 'keyword offside for/of let statement, extended multiline'
      , source:['for let ea of'
                  , '      fn_init @ a, b ::'
                  , '  blockStatement']
      , tokens:['for', '(', 'name', 'name', 'name', 'name', '(', 'name', ',', 'name', ')', ')', '{', 'name', '}'] };

    yield {expectValid: true
      , title: 'keyword offside for/step let statement, extended multiline'
      , source:['for let i = 0'
                  , '    ; i < n'
                  , '    ; i++ ::'
                  , '  blockStatement']
      , tokens:['for', '(', 'name', 'name', '=', 'num', ';', 'name', tkns.cmp, 'name', ';', 'name', '++/--', ')', '{', 'name', '}'] };

    yield {expectValid: true
      , title: 'keyword offside for/step let statement, extended multiline'
      , source:['for let i = fn_init @ a, b'
                  , '    ; fn_test @ i, n'
                  , '    ; i++ ::'
                  , '  blockStatement']
      , tokens:['for', '(', 'name', 'name', '=', 'name', '(', 'name', ',', 'name', ')', ';', 'name', '(', 'name', ',', 'name', ')', ';', 'name', '++/--', ')', '{', 'name', '}'] }; }

  describe('Optional Commas',
    genMochaSyntaxTestCases(iterSyntaxVariations, standardTransforms) );



  function * iterSyntaxVariations() {
    yield * iterCallArgumentVariations();
    yield * iterAdvancedCallMethods();
    yield * iterObjectMethods();
    yield * iterOptionalCommaBugs();}

  function * iterCallArgumentVariations() {
    yield({
      title: 'call arguments with implicit commas'
    , source:[
        'method @'
      , '    firstArg'
      , '    secondArg'
      , '    thirdArg']
    , tokens:['name', '(', 'name', ',', 'name', ',', 'name', ')'] });

    yield({
      title: 'call arguments mixed 1 with implicit commas'
    , source:[
        'method @'
      , '    firstArg, secondArg'
      , '    thirdArg']
    , tokens:['name', '(', 'name', ',', 'name', ',', 'name', ')'] });

    yield({
      title: 'call arguments mixed 2 with explicit commas'
    , source:[
        'method @'
      , '    firstArg, secondArg, '
      , '    thirdArg']
    , tokens:['name', '(', 'name', ',', 'name', ',', 'name', ')'] });

    yield({
      title: 'call arguments mixed 3 with implicit commas'
    , source:[
        'method @'
      , '    firstArg'
      , '    secondArg, thirdArg']
    , tokens:['name', '(', 'name', ',', 'name', ',', 'name', ')'] });

    yield({
      title: 'call arguments mixed 4 with implicit commas'
    , source:[
        'method @'
      , '    firstArg'
      , '    , secondArg'
      , '    thirdArg']
    , tokens:['name', '(', 'name', ',', 'name', ',', 'name', ')'] }); }


  function * iterAdvancedCallMethods() {
    yield({
      title: 'advanced call methods -- simple with implicit commas, v1'
    , source:[
        'method @'
      , '  someValue'
      , '  () => ::'
      , '  otherValue'
      , '  val =>'
      , '    val + val'
      , '  (err, cb) => ::']
    , tokens:['name', '(', 'name', ',', '(', ')', '=>', '{', '}', ',', 'name', ',', 'name', '=>', 'name', '+/-', 'name', ',', '(', 'name', ',', 'name', ')', '=>', '{', '}', ')'] });

    yield({
      title: 'advanced call methods -- simple with implicit commas, v2'
    , source:[
        'method @'
      , '  someValue'
      , '  function () ::'
      , '  otherValue'
      , '  val =>'
      , '    val + val'
      , '  (err, cb) => ::']
    , tokens:['name', '(', 'name', ',', 'function', '(', ')', '{', '}', ',', 'name', ',', 'name', '=>', 'name', '+/-', 'name', ',', '(', 'name', ',', 'name', ')', '=>', '{', '}', ')'] });

    yield({
      title: 'advanced call methods -- simple with implicit commas, v3'
    , source:[
        'method @'
      , '  function () ::'
      , '  val =>'
      , '    val + val'
      , '  (err, cb) => ::']
    , tokens:['name', '(', 'function', '(', ')', '{', '}', ',', 'name', '=>', 'name', '+/-', 'name', ',', '(', 'name', ',', 'name', ')', '=>', '{', '}', ')'] });

    yield({
      title: 'advanced call methods -- async with implicit commas, v1'
    , source:[
        'method @'
      , '  someValue'
      , '  async function (p) ::'
      , '    await p'
      , '  otherValue'
      , '  async (a, b) =>'
      , '    await a + await b']
    , tokens:['name', '(', 'name', ',', 'name', 'function', '(', 'name', ')', '{', 'name', 'name', '}', ',', 'name', ',', 'name', '(', 'name', ',', 'name', ')', '=>', 'name', 'name', '+/-', 'name', 'name', ')'] });

    yield({
      title: 'advanced call methods -- async with implicit commas, v2'
    , source:[
        'method @'
      , '  async function (p) ::'
      , '    await p'
      , '  async (a, b) =>'
      , '    await a + await b']
    , tokens:['name', '(', 'name', 'function', '(', 'name', ')', '{', 'name', 'name', '}', ',', 'name', '(', 'name', ',', 'name', ')', '=>', 'name', 'name', '+/-', 'name', 'name', ')'] });

    yield({
      title: 'advanced call methods -- generator with implicit commas, v1'
    , source:[
        'method @'
      , '  someValue'
      , '  function * (iter) ::'
      , '    yield * iter'
      , '  otherValue'
      , '  function * (a) ::'
      , '    yield a'
      , '    yield b']
    , tokens:['name', '(', 'name', ',', 'function', '*', '(', 'name', ')', '{', 'name', '*', 'name', '}', ',', 'name', ',', 'function', '*', '(', 'name', ')', '{', 'name', 'name', 'name', 'name', '}', ')'] });

    yield({
      title: 'advanced call methods -- generator with implicit commas, v2'
    , source:[
        'method @'
      , '  function * (iter) ::'
      , '    yield * iter'
      , '  function * (a) ::'
      , '    yield a'
      , '    yield b']
    , tokens:['name', '(', 'function', '*', '(', 'name', ')', '{', 'name', '*', 'name', '}', ',', 'function', '*', '(', 'name', ')', '{', 'name', 'name', 'name', 'name', '}', ')'] }); }


  function * iterObjectMethods() {
    yield({
      title: 'object methods -- simple with implicit commas'
    , source:[
        'const api = @{}'
      , '  someValue'
      , '  method_a(a, b, c) ::'
      , '  method_b() ::'
      , '  method_c(d, e) ::'
      , '  anotherValue']
    , tokens:['const', 'name', '=', '{', 'name', ',', 'name', '(', 'name', ',', 'name', ',', 'name', ')', '{', '}', ',', 'name', '(', ')', '{', '}', ',', 'name', '(', 'name', ',', 'name', ')', '{', '}', ',', 'name', '}'] });

    yield({
      title: 'object methods -- async with explicit comma'
    , source:[
        'const api = @{}'
      , '  method() ::'
      , '  , async cps_method(p) ::'
      , '    return await p']
    , tokens:['const', 'name', '=', '{', 'name', '(', ')', '{', '}', ',', 'name', 'name', '(', 'name', ')', '{', 'return', 'name', 'name', '}', '}'] });

    yield({
      title: 'object methods -- async with implicit comma'
    , source:[
        'const api = @{}'
      , '  method() ::'
      , '  async cps_method(p) ::'
      , '    return await p']
    , tokens:['const', 'name', '=', '{', 'name', '(', ')', '{', '}', ',', 'name', 'name', '(', 'name', ')', '{', 'return', 'name', 'name', '}', '}'] });

    yield({
      title: 'object methods -- generator with explicit comma'
    , source:[
        'const api = @{}'
      , '  method() ::'
      , '  , * iter_method(iterable) ::'
      , '    yield * iterable']
    , tokens:['const', 'name', '=', '{', 'name', '(', ')', '{', '}', ',', '*', 'name', '(', 'name', ')', '{', 'name', '*', 'name', '}', '}'] });

    yield({
      title: 'object methods -- generator with implicit comma'
    , source:[
        'const api = @{}'
      , '  method() ::'
      , '  * iter_method(iterable) ::'
      , '    yield * iterable']
    , tokens:['const', 'name', '=', '{', 'name', '(', ')', '{', '}', ',', '*', 'name', '(', 'name', ')', '{', 'name', '*', 'name', '}', '}'] }); }


  function * iterOptionalCommaBugs() {
    yield({
      title: 'object with arrow functions and template strings'
    , source:[
        'const api = bind_api @:'
      , '  first: a => `${a}`'
      , '  second: b => `${b}`'
      , '  third: c => `${c}`']

    , tokens:['const' , 'name' , '=' , 'name' , '(' , '{' ,
              'name' , ':' , 'name' , '=>' , '`' , 'template' , '${' , 'name' , '}' , 'template' , '`' ,
        ',' , 'name' , ':' , 'name' , '=>' , '`' , 'template' , '${' , 'name' , '}' , 'template' , '`' ,
        ',' , 'name' , ':' , 'name' , '=>' , '`' , 'template' , '${' , 'name' , '}' , 'template' , '`' ,
        '}' , ')'] }); }

  (require('source-map-support') || {install(){}}).install();

})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
