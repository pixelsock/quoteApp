"use strict";
/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdatequoteapp"]("main",{

/***/ "./src/index.js":
/*!**********************!*\
  !*** ./src/index.js ***!
  \**********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _data_output_json__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./data/output.json */ \"./src/data/output.json\");\n/* harmony import */ var _generatePDF_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./generatePDF.js */ \"./src/generatePDF.js\");\n\n\n// for testing purposes if a user clicks on an item with data-w-id=\"3c2f2722-e3c7-6f05-8576-623a08bbaedd\" it will select the first item in every dropdown and add a quantity of 1\ndocument.addEventListener('click', function(event) {\n    if (event.target.getAttribute('data-w-id') === '3c2f2722-e3c7-6f05-8576-623a08bbaedd') {\n        const formFields = fieldOrder;\n        formFields.forEach(fieldId => {\n            const field = document.getElementById(fieldId);\n            if (field) {\n                field.value = field.options[1].value;\n                field.setAttribute('data-auto-selected', 'true');\n                currentSelections[fieldId] = field.options[1].value;\n                field.dispatchEvent(new Event('change', { bubbles: true, cancelable: true }));\n            }\n        });\n        document.getElementById('quantity').value = '1';\n        addFilteredItemToQuote();\n    }\n}\n);\nalert('This is a test alertingss');\n\nlet currentSelections = {\n    'product-line': \"\",\n    'frame-color': \"\",\n    'mirror-controls': \"\",\n    'mirror-style': \"\",\n    'light-direction': \"\",\n    'size': \"\",\n    'mounting-orientation': \"\",\n    'color-temperature': \"\",\n    'light-output': \"\",\n    'dimming': \"\",\n    'accessories': \"\"\n\n};\n\nlet jsondata = _data_output_json__WEBPACK_IMPORTED_MODULE_0__;\n\nfunction generateSKU(currentSelections) {\n    const skuOrder = [\n        'mirror-style', 'light-direction', 'size', \n        'light-output', 'color-temperature', 'dimming', 'mounting-orientation', \n        'accessories', 'frame-color'\n    ];\n\n    const skuParts = skuOrder.map(field => {\n        let value = currentSelections[field];\n\n        // Special handling for 'size' to format as \"nnnn\"\n        if (field === 'size' && value) {\n            value = value.replace(/\"/g, '').replace('x', ''); // Remove all inches symbols and 'x'\n        }\n        // Extract SKU code from the description\n        else if (value) {\n            const match = value.match(/\\(([^)]+)\\)/); // Matches anything between parentheses\n            if (match) {\n                value = match[1]; // Extract the SKU code\n            }\n        }\n        // Exclude 'frame-color' if it's \"N/A\"\n        if (field === 'frame-color' && value === \"N/A\") {\n            return '';\n        }\n        return value || '';\n    });\n\n    // Join the parts to form the SKU, filtering out any empty values\n    const sku = skuParts.filter(part => part !== '').join('-');\n    return sku;\n}\n\nfunction generateProductDescription(currentSelections) {\n    const productLine = currentSelections['product-line'].trim();\n    const mirrorStyle = currentSelections['mirror-style'].replace(/\\([^)]*\\)/g, '').trim();\n    const lightDirection = currentSelections['light-direction'].replace(/\\([^)]*\\)/g, '').trim();\n    const accessories = currentSelections['accessories'].replace(/\\([^)]*\\)/g, '').trim();\n    const description = `${productLine} ${mirrorStyle} ${lightDirection} With ${accessories}`;\n    return description;\n}\n\nfunction clearSelectOptions(selectElement) {\n    while (selectElement.options.length > 0) {\n        selectElement.remove(0);\n    }\n}\n\nfunction populateSelectField(selectElement, options, keepSelection = false) {\n    const currentSelection = keepSelection ? selectElement.value : null; // Store current selection if needed\n    clearSelectOptions(selectElement); // Clears the existing options\n    \n    // Determine the text for the default option based on whether a selection has been made\n    const defaultOptionText = currentSelection ? \"Change This Selection\" : \"Select One...\";\n    const defaultOption = new Option(defaultOptionText, \"\");\n    selectElement.add(defaultOption);\n    \n    // Populate with new options\n    options.forEach(optionValue => {\n        const option = new Option(optionValue, optionValue);\n        selectElement.add(option);\n    });\n    \n    // If keeping the selection and it's still valid, re-select it\n    if (keepSelection && options.includes(currentSelection)) {\n        selectElement.value = currentSelection;\n    }\n}\nconst fields = {\n    'product-line': \"Product Line\",\n    'frame-color': \"Frame Color\",\n    'mirror-controls': \"Mirror Controls\",\n    'mirror-style': \"Mirror Style\",\n    'light-direction': \"Light Direction\",\n    'size': \"Size\",\n    'mounting-orientation': \"Mounting Orientation\",\n    'color-temperature': \"Color Temperature\",\n    'light-output': \"Light Output\",\n    'dimming': \"Dimming\",\n    'accessories': \"Accessories\",\n};\n\nfunction populateFormFields(jsonData) {\n    Object.entries(fields).forEach(([fieldId, jsonKey]) => {\n        const selectElement = document.getElementById(fieldId);\n        let options = jsonData.map(item => item[jsonKey]);\n\n        // Flatten the array if the options are arrays and remove duplicates\n        options = options.flat();\n        options = [...new Set(options)]; // Remove duplicates\n\n        // Check if all options are \"N/A\" after deduplication\n        if (options.length === 1 && options[0] === \"N/A\") {\n            const wrapperElement = document.getElementById(`${fieldId}-wrapper`);\n            if (wrapperElement) {\n                wrapperElement.style.display = 'none';\n            }\n            return; // Skip further processing for this field\n        }\n\n        // Ensure the wrapper is visible (in case it was previously hidden)\n        const wrapperElement = document.getElementById(`${fieldId}-wrapper`);\n        if (wrapperElement) {\n            wrapperElement.style.display = '';\n        }\n\n        populateSelectField(selectElement, options);\n    });\n}\n\n// Define the order of fields\nconst fieldOrder = Object.keys(fields);\n\nconsole.log('Field order:', fieldOrder);\n\nlet lastUserInteractedFieldId = null;\n\nfunction setupFieldInteractions() {\n    const formFields = fieldOrder; // Assuming this is your ordered list of field IDs\n    formFields.forEach(fieldId => {\n        const field = document.getElementById(fieldId);\n        if (field) {\n            field.addEventListener('change', () => {\n                lastUserInteractedFieldId = fieldId;\n                // Any other logic you need to run on field change\n            });\n        }\n    });\n}\n\n// Call this function once to set up the interactions\nsetupFieldInteractions();\n\nfunction goBackAndResetField() {\n    if (lastUserInteractedFieldId) {\n        const currentIndex = fieldOrder.indexOf(lastUserInteractedFieldId);\n\n        // If going back to the very first field, perform a bulk reset for efficiency\n        if (currentIndex === 0) {\n            clearFormAndResetSelections();\n        } else {\n            // Reset only the auto-selected fields that come after the last interacted field\n            for (let i = currentIndex + 1; i < fieldOrder.length; i++) {\n                const fieldId = fieldOrder[i];\n                const field = document.getElementById(fieldId);\n                if (field.getAttribute('data-auto-selected') === 'true') {\n                    resetField(fieldId);\n                }\n            }\n            // Ensure the last interacted field itself is also reset if needed\n            resetField(lastUserInteractedFieldId);\n        }\n\n        // Update the last interacted field tracker\n        lastUserInteractedFieldId = currentIndex > 0 ? fieldOrder[currentIndex - 1] : null;\n    }\n}\n\nfunction resetField(fieldId) {\n    const fieldToReset = document.getElementById(fieldId);\n    if (fieldToReset) {\n        fieldToReset.value = \"\";\n        fieldToReset.removeAttribute('data-auto-selected');\n        currentSelections[fieldId] = \"\";\n        // Trigger change event to update dependent fields/UI dynamically\n        fieldToReset.dispatchEvent(new Event('change', { bubbles: true, cancelable: true }));\n    }\n}\n\nfunction updateFieldVisibility() {\n    let allFieldsHidden = true;\n    let anyFieldSelected = false; // Track if any field has been selected\n\n    const fieldsBeforeQuantity = fieldOrder.filter(fieldId => fieldId !== 'quantity');\n    \n    for (let i = 0; i < fieldsBeforeQuantity.length; i++) {\n        const fieldId = fieldsBeforeQuantity[i];\n        const wrapperId = `${fieldId}-wrapper`;\n        const wrapperElement = document.getElementById(wrapperId);\n        const selectElement = document.getElementById(fieldId);\n\n        if (wrapperElement) {\n            if (allFieldsHidden) {\n                if (selectElement.value) {\n                    wrapperElement.style.display = 'none';\n                    anyFieldSelected = true; // Update if any field has been selected\n                } else {\n                    wrapperElement.style.display = '';\n                    allFieldsHidden = false;\n                }\n            } else {\n                wrapperElement.style.display = 'none';\n            }\n        }\n    }\n\n    const quantityWrapper = document.getElementById('quantity-wrapper');\n    if (quantityWrapper) {\n        quantityWrapper.style.display = allFieldsHidden ? '' : 'none';\n        if (allFieldsHidden) {\n            console.log(\"All fields before 'quantity' are hidden. Current selections:\", currentSelections);\n            console.log('Generated SKU:', generateSKU(currentSelections));\n        }\n    }\n\n    // Control the \"go-back\" button visibility based on anyFieldSelected\n    const goBackButton = document.getElementById('go-back');\n    if (goBackButton) {\n        goBackButton.style.display = anyFieldSelected ? '' : 'none';\n    }\n\n    // Show the \"add-another\" button based on the quantity field's value\n    const addAnotherButton = document.getElementById('add-another');\n    if (document.getElementById('quantity').value) {\n        addAnotherButton.style.display = '';\n    } else {\n        addAnotherButton.style.display = 'none';\n    }\n}\n\nlet filteredData;\n\nfunction setupDynamicFiltering(jsonData) {\n    const formFields = fieldOrder;\n\n    formFields.forEach(fieldId => {\n        document.getElementById(fieldId).addEventListener('change', () => {\n           filteredData = jsonData;\n            // Update currentSelections based on the current state of all form fields\n            formFields.forEach(fid => {\n                const selectedValue = document.getElementById(fid).value;\n                currentSelections[fid] = selectedValue;\n                if (selectedValue !== \"\") {\n                    const key = fid.replace(/-/g, ' ')\n                                    .split(' ')\n                                    .map(word => word.charAt(0).toUpperCase() + word.slice(1))\n                                    .join(' ');\n                    // Adjust filtering for fields with array values\n                    filteredData = filteredData.filter(item => {\n                        const value = item[key];\n                        if (Array.isArray(value)) {\n                            return value.includes(selectedValue);\n                        }\n                        return value === selectedValue;\n                    });\n                }\n            });\n            console.log(`Filtered data after selecting ${fieldId}:`, filteredData);\n\n            updateFormFields(filteredData, formFields, fieldId);\n\n            // After updating form fields based on the selection, update the visibility of fields\n            updateFieldVisibility();\n        });\n    });\n\n    // Initially update field visibility based on default selections\n    updateFieldVisibility();\n}\n\nfunction updateFormFields(filteredData, formFields, currentFieldId) {\n    formFields.forEach(fieldId => {\n        const selectElement = document.getElementById(fieldId);\n        const key = fields[fieldId]; // Assuming 'fields' maps fieldId to JSON key\n        let options = [];\n\n        // Aggregate options from filteredData\n        filteredData.forEach(item => {\n            const value = item[key];\n            if (Array.isArray(value)) {\n                // If the value is an array, add its elements to options\n                options = options.concat(value);\n            } else {\n                // If it's not an array, just add the value\n                options.push(value);\n            }\n        });\n\n        // Deduplicate options\n        options = [...new Set(options)];\n        // console log frame color options\n        if (fieldId === 'frame-color') {\n            console.log('Frame color options:', options.length, options);\n        }\n        // Check if all options are \"N/A\" after deduplication\n        if (options.length === 1) {\n            // wait for the select element to be available\n            selectElement.value = options[0];\n         \n            \n        } else {\n            const wrapperElement = document.getElementById(`${fieldId}-wrapper`);\n            if (wrapperElement) {\n                wrapperElement.style.display = '';\n            }\n        }\n\n        populateSelectField(selectElement, options, true);\n    });\n}\n\nfunction attachRemoveButtonListeners() {\n    const removeButtons = document.querySelectorAll('[qs-value=\"remove\"]');\n    removeButtons.forEach(button => {\n        button.removeEventListener('click', handleRemoveItemClick); // Prevent multiple bindings\n        button.addEventListener('click', handleRemoveItemClick);\n    });\n}\n\nfunction handleRemoveItemClick(event) {\n    // Assuming each item is contained in a parent element, like a div or li\n    const itemElement = event.target.closest('.qs-line-item-row');\n    if (itemElement) {\n        console.log('Removing item:', itemElement);\n        itemElement.remove(); // Remove the item from the DOM\n        updateTotals(); // Update the totals after removing the item\n    }\n}\n\ndocument.addEventListener('DOMContentLoaded', async () => {\n    // Attach a single event listener to the parent container\n    const lineItemContainer = document.getElementById('line-item-container');\n    if (lineItemContainer) {\n        lineItemContainer.addEventListener('click', function(event) {\n            // Check if the clicked element or its parent has qs-value=\"remove\"\n            const removeButton = event.target.closest('[qs-value=\"remove\"]');\n            if (removeButton) {\n                handleRemoveItemClick(event);\n            }\n        });\n    }\n    await populateFormFields(_data_output_json__WEBPACK_IMPORTED_MODULE_0__);\n    attachRemoveButtonListeners();\n    setupDynamicFiltering(_data_output_json__WEBPACK_IMPORTED_MODULE_0__);\n    updateFieldVisibility();\n    document.getElementById('go-back').style.display = 'none'; // Initially hide the \"go-back\" button\n    document.getElementById('go-back').addEventListener('click', goBackAndResetField);\n\n    // Initially hide the \"add-another\" button\n    const addAnotherButton = document.getElementById('add-another');\n    addAnotherButton.style.display = 'none';\n    const generateQuoteButton = document.getElementById('generate-quote');\n    const popUpButton = document.getElementById('pop-up');\n    // initially hide the popupbutton button\n    popUpButton.style.display = 'none';\n\n    \n\n    // Show the \"add-another\" button when the quantity field is updated\n    document.getElementById('quantity').addEventListener('change', function() {\n        if (this.value) {\n            addAnotherButton.style.display = ''; // Show the button\n            \n        } else {\n            addAnotherButton.style.display = 'none'; // Hide the button if quantity is empty\n            \n        }\n    });\n\n    // Add event listener for the \"add-another\" button\n    addAnotherButton.addEventListener('click', function() {\n        addFilteredItemToQuote();\n        popUpButton.style.display = ''; // Show the \"generate-quote\" button after adding an item\n    \n    });\n\n   \n    \n    if (generateQuoteButton) {\n        generateQuoteButton.addEventListener('click', () => {\n            const quoteItems = getQuoteItems(); // This should return an array of objects with sku and total_price\n            const finalTotal = getFinalTotal(); // This should return the final total as a number\n            const quoteNumber = new Date().getTime().toString().slice(-6); // Generate a unique 6-digit quote number based on timestamp\n            // Call the generatePDF function with the gathered data\n            (0,_generatePDF_js__WEBPACK_IMPORTED_MODULE_1__.generatePDF)(quoteItems, finalTotal, quoteNumber);\n        });\n    }\n});\n\nfunction addFilteredItemToQuote() {\n    const description = generateProductDescription(currentSelections);\n\n    const quantityField = document.getElementById('quantity');\n    const quantity = quantityField.value;\n    if (quantity <= 0) {\n        alert('Please specify a quantity.');\n        return;\n    }\n    const sku = generateSKU(currentSelections);\n    const currentSelection = filteredData[0];\n    const basePrice = parseFloat(currentSelection['Total Price'].replace('$', ''));\n    const totalPrice = (basePrice * quantity).toFixed(2);\n\n    if (!sku) {\n        console.error('No item selected or SKU details are missing.');\n        return;\n    }\n\n    const template = document.getElementById('qs-line-item-template');\n    if (!template) {\n        console.error('Template element not found.');\n        return;\n    }\n\n    const clone = template.content.cloneNode(true);\n    const skuElement = clone.querySelector('[qs-value=\"sku\"]');\n    const quantityElement = clone.querySelector('[qs-value=\"quantity\"]');\n    const priceElement = clone.querySelector('[qs-value=\"price\"]');\n    const descriptionElement = clone.querySelector('[qs-value=\"description\"]');\n    if (descriptionElement) {\n        descriptionElement.textContent = description;\n    }\n    if (skuElement && quantityElement && priceElement) {\n        skuElement.textContent = sku;\n        quantityElement.textContent = quantity;\n        priceElement.textContent = `$${totalPrice}`;\n        document.getElementById('line-item-container').appendChild(clone);\n        clearFormAndResetSelections();\n    } else {\n        console.error('One or more elements could not be found in the template.');\n    }\n\n    updateTotals();\n}\n\nfunction clearFormAndResetSelections() {\n    // Reset each select field in the form to its default state\n   \n    populateFormFields(_data_output_json__WEBPACK_IMPORTED_MODULE_0__);\n\n    // Reset the internal object tracking the current selections\n    for (const key in currentSelections) {\n        if (currentSelections.hasOwnProperty(key)) {\n            currentSelections[key] = \"\";\n        }\n    }\n\n    // Optionally, you could also reset any visual feedback or additional UI elements that are affected by the selections.\n    // For example, hiding the 'generate-quote' button again or clearing any displayed error messages.\n    const generateQuoteButton = document.getElementById('generate-quote');\n\n    // Reset the quantity field separately if necessary\n    const quantityField = document.getElementById('quantity');\n    if (quantityField) {\n        quantityField.value = ''; // Clear any existing value\n    }\n\n    // Since the script includes dynamic updating of field visibility, call updateFieldVisibility() to ensure the UI is updated accordingly\n    updateFieldVisibility();\n\n    // Call any additional functions needed to reset the state of the form or update the UI\n}\n\nfunction updateTotals() {\n    let totalQuantity = 0;\n    let totalPrice = 0.0;\n\n    const items = document.querySelectorAll('.qs-line-item-row');\n    items.forEach(item => {\n        const quantity = parseInt(item.querySelector('[qs-value=\"quantity\"]').textContent, 10);\n        const price = parseFloat(item.querySelector('[qs-value=\"price\"]').textContent.replace('$', ''));\n        totalQuantity += quantity;\n        totalPrice += price;\n    });\n\n    const totalElement = document.querySelector('[qs-value=\"total\"]');\n    const quantityTotalElement = document.querySelector('[qs-value=\"quantity-total\"]');\n    \n    if (totalElement) {\n        totalElement.textContent = `$${totalPrice.toFixed(2)}`;\n    }\n    \n    if (quantityTotalElement) {\n        quantityTotalElement.textContent = totalQuantity.toString();\n    }\n}\n\n// Example implementations of the functions to gather data (you'll need to adjust these based on your actual data structure)\nfunction getQuoteItems() {\n    // Example: Fetching quote items from the DOM or state\n    // Return an array of quote item objects\n    return [...document.querySelectorAll('.qs-line-item-row')].map(item => {\n        return {\n            quantity: parseInt(item.querySelector('[qs-value=\"quantity\"]').textContent, 10),\n            product: item.querySelector('[qs-value=\"sku\"]').textContent,\n            description: item.querySelector('[qs-value=\"description\"]').textContent,\n            total_price: parseFloat(item.querySelector('[qs-value=\"price\"]').textContent.replace('$', ''))\n        };\n    });\n}\n\nfunction getFinalTotal() {\n    // Example: Fetching final total from the DOM\n    return parseFloat(document.querySelector('[qs-value=\"total\"]').textContent.replace('$', ''));\n}\n\n\n\n//# sourceURL=webpack://quoteapp/./src/index.js?");

/***/ })

},
/******/ function(__webpack_require__) { // webpackRuntimeModules
/******/ /* webpack/runtime/getFullHash */
/******/ (() => {
/******/ 	__webpack_require__.h = () => ("b46ec84dca4208ec0299")
/******/ })();
/******/ 
/******/ }
);