"use strict";
/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdatequoteapp"]("main",{

/***/ "./src/index.js":
/*!**********************!*\
  !*** ./src/index.js ***!
  \**********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _data_output_json__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./data/output.json */ \"./src/data/output.json\");\n/* harmony import */ var _generatePDF_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./generatePDF.js */ \"./src/generatePDF.js\");\n\n\n\n\nlet currentSelections = {\n    'product-line': \"\",\n    'mirror-style': \"\",\n    'light-direction': \"\",\n    'size': \"\",\n    'mirror-controls': \"\",\n    'accessories': \"\",\n    'sku': \"\"\n};\n\n\n\n\nfunction clearSelectOptions(selectElement) {\n    while (selectElement.options.length > 0) {\n        selectElement.remove(0);\n    }\n}\n\nfunction populateSelectField(selectElement, options, keepSelection = false) {\n    const currentSelection = keepSelection ? selectElement.value : null; // Store current selection if needed\n    clearSelectOptions(selectElement); // Clears the existing options\n    \n    // Determine the text for the default option based on whether a selection has been made\n    const defaultOptionText = currentSelection ? \"Change This Selection\" : \"Select One...\";\n    const defaultOption = new Option(defaultOptionText, \"\");\n    selectElement.add(defaultOption);\n    \n    // Populate with new options\n    options.forEach(optionValue => {\n        const option = new Option(optionValue, optionValue);\n        selectElement.add(option);\n    });\n    \n    // If keeping the selection and it's still valid, re-select it\n    if (keepSelection && options.includes(currentSelection)) {\n        selectElement.value = currentSelection;\n    }\n}\n\nfunction populateFormFields(jsonData) {\n    const fields = {\n        'product-line': \"Product Line\",\n        'mirror-style': \"Mirror Style\",\n        'light-direction': \"Light Direction\",\n        'size': \"Size\",\n        'mirror-controls': \"Mirror Controls\",\n        'accessories': \"Accessories\",\n        \n    };\n\n    Object.entries(fields).forEach(([fieldId, jsonKey]) => {\n        const selectElement = document.getElementById(fieldId);\n        const currentSelection = selectElement.value; // Store the current selection\n        const options = [...new Set(jsonData.map(item => item[jsonKey]))];\n        populateSelectField(selectElement, options);\n\n        // After repopulating options, attempt to restore the previously selected value if possible\n        if (options.includes(currentSelection)) {\n            selectElement.value = currentSelection; // Restore the current selection if it's still valid\n        } else {\n            // Handle cases where the selection does not exist anymore (e.g., reset to default or handle accordingly)\n            selectElement.value = \"\"; // Reset to default or handle accordingly\n        }\n    });\n}\n\nfunction updateDropdownOptions(selectElement, allPossibleOptions, currentSelections) {\n    // Determine valid options based on current selections and constraints\n    const validOptions = determineValidOptions(allPossibleOptions, currentSelections);\n\n    // Add missing valid options back to the dropdown\n    validOptions.forEach(optionValue => {\n        if (!Array.from(selectElement.options).map(o => o.value).includes(optionValue)) {\n            const option = new Option(optionValue, optionValue);\n            selectElement.add(option);\n        }\n    });\n\n    // Remove invalid options from the dropdown\n    Array.from(selectElement.options).forEach(option => {\n        if (!validOptions.includes(option.value) && option.value !== \"\") {\n            selectElement.remove(option.index);\n        }\n    });\n}\n\n\nfunction filterJsonData(jsonData) {\n    let filteredData = jsonData;\n    // Apply all current selections for filtering\n    Object.keys(currentSelections).forEach(selectionKey => {\n        const selectionValue = currentSelections[selectionKey];\n        if (selectionValue) {\n            // Convert the selection key to the JSON key format\n            const jsonKey = selectionKey.split('-').map((word, index) => \n                index === 0 ? word.charAt(0).toUpperCase() + word.slice(1) : word)\n                .join(' ');\n            filteredData = filteredData.filter(item => item[jsonKey] === selectionValue);\n        }\n    });\n\n    return filteredData;\n}\n\n// Define the order of fields\nconst fieldOrder = ['product-line', 'mirror-style', 'mirror-controls', 'light-direction', 'size', 'accessories', 'quantity'];\n\nfunction goBackAndResetField() {\n    const formFields = ['product-line', 'mirror-style', 'light-direction', 'size', 'mirror-controls', 'accessories'];\n    let lastSelectedIndex = -1;\n\n    // Find the last selected field before the first empty field\n    for (let i = 0; i < formFields.length; i++) {\n        if (document.getElementById(formFields[i]).value === \"\") {\n            break;\n        }\n        lastSelectedIndex = i;\n    }\n\n    // If there's a field to reset\n    if (lastSelectedIndex !== -1) {\n        const fieldIdToReset = formFields[lastSelectedIndex];\n        document.getElementById(fieldIdToReset).value = \"\"; // Reset the field\n        currentSelections[fieldIdToReset] = \"\"; // Update the currentSelections object\n\n        // Trigger the change event manually to update the form and fields visibility\n        document.getElementById(fieldIdToReset).dispatchEvent(new Event('change'));\n    }\n}\n\nfunction updateFieldVisibility() {\n    let allFieldsHidden = true;\n    let anyFieldSelected = false; // Track if any field has been selected\n\n    const fieldsBeforeQuantity = fieldOrder.filter(fieldId => fieldId !== 'quantity');\n    \n    for (let i = 0; i < fieldsBeforeQuantity.length; i++) {\n        const fieldId = fieldsBeforeQuantity[i];\n        const wrapperId = `${fieldId}-wrapper`;\n        const wrapperElement = document.getElementById(wrapperId);\n        const selectElement = document.getElementById(fieldId);\n\n        if (wrapperElement) {\n            if (allFieldsHidden) {\n                if (selectElement.value) {\n                    wrapperElement.style.display = 'none';\n                    anyFieldSelected = true; // Update if any field has been selected\n                } else {\n                    wrapperElement.style.display = '';\n                    allFieldsHidden = false;\n                }\n            } else {\n                wrapperElement.style.display = 'none';\n            }\n        }\n    }\n\n    const quantityWrapper = document.getElementById('quantity-wrapper');\n    if (quantityWrapper) {\n        quantityWrapper.style.display = allFieldsHidden ? '' : 'none';\n    }\n\n    // Control the \"go-back\" button visibility based on anyFieldSelected\n    const goBackButton = document.getElementById('go-back');\n    if (goBackButton) {\n        goBackButton.style.display = anyFieldSelected ? '' : 'none';\n    }\n\n    // Show the \"add-another\" button based on the quantity field's value\n    const addAnotherButton = document.getElementById('add-another');\n    if (document.getElementById('quantity').value) {\n        addAnotherButton.style.display = '';\n    } else {\n        addAnotherButton.style.display = 'none';\n    }\n}\n\nlet filteredData;\n\nfunction setupDynamicFiltering(jsonData) {\n    const formFields = ['product-line', 'mirror-style', 'light-direction', 'size', 'mirror-controls', 'accessories'];\n\n    formFields.forEach(fieldId => {\n        document.getElementById(fieldId).addEventListener('change', () => {\n           filteredData = jsonData;\n            // Update currentSelections based on the current state of all form fields\n            formFields.forEach(fid => {\n                const selectedValue = document.getElementById(fid).value;\n                currentSelections[fid] = selectedValue;\n                if (selectedValue !== \"\") {\n                    const key = fid.replace(/-/g, ' ')\n                                    .split(' ')\n                                    .map(word => word.charAt(0).toUpperCase() + word.slice(1))\n                                    .join(' ');\n                    filteredData = filteredData.filter(item => item[key] === selectedValue);\n                }\n            });\n            console.log(`Filtered data after selecting ${fieldId}:`, filteredData);\n\n            updateFormFields(filteredData, formFields, fieldId);\n\n            // After updating form fields based on the selection, update the visibility of fields\n            updateFieldVisibility();\n        });\n    });\n\n    // Initially update field visibility based on default selections\n    updateFieldVisibility();\n}\n\nfunction updateFormFields(filteredData, formFields, currentFieldId) {\n    // Iterate through all form fields\n    formFields.forEach(fieldId => {\n        const selectElement = document.getElementById(fieldId);\n        const currentSelection = selectElement.value;\n\n        // Dynamically update based on filtered data\n        const key = fieldId.replace(/-/g, ' ').split(' ').map(word => word.charAt(0).toUpperCase() + word.slice(1)).join(' ');\n        const uniqueOptions = [...new Set(filteredData.map(item => item[key]))];\n\n        // Repopulate the field with options based on the filtered data\n        populateSelectField(selectElement, uniqueOptions, true);\n\n        // If the current selection is still valid, keep it; otherwise, allow the user to change it\n        if (uniqueOptions.includes(currentSelection) || currentFieldId === fieldId) {\n            selectElement.value = currentSelection;\n        } else {\n            // If the current selection is no longer valid and the change was triggered by another field,\n            // keep the field empty or reset to a default value, indicating a selection needs to be made\n            if (currentFieldId !== fieldId) {\n                selectElement.value = \"\"; // Or set to a default value if applicable\n            }\n        }\n    });\n}\n\ndocument.addEventListener('DOMContentLoaded', async () => {\n    await populateFormFields(_data_output_json__WEBPACK_IMPORTED_MODULE_0__);\n    setupDynamicFiltering(_data_output_json__WEBPACK_IMPORTED_MODULE_0__);\n    updateFieldVisibility();\n    document.getElementById('go-back').style.display = 'none'; // Initially hide the \"go-back\" button\n    document.getElementById('go-back').addEventListener('click', goBackAndResetField);\n\n    // Initially hide the \"add-another\" button\n    const addAnotherButton = document.getElementById('add-another');\n    addAnotherButton.style.display = 'none';\n\n    // Show the \"add-another\" button when the quantity field is updated\n    document.getElementById('quantity').addEventListener('change', function() {\n        if (this.value) {\n            addAnotherButton.style.display = ''; // Show the button\n        } else {\n            addAnotherButton.style.display = 'none'; // Hide the button if quantity is empty\n        }\n    });\n\n    // Add event listener for the \"add-another\" button\n    addAnotherButton.addEventListener('click', addFilteredItemToQuote);\n\n    const generateQuoteButton = document.getElementById('generate-quote');\n    let quoteItems = getQuoteItems();\n    console.log('Quote Items:', quoteItems);\n    if (generateQuoteButton) {\n        generateQuoteButton.addEventListener('click', () => {\n            const quoteItems = getQuoteItems(); // Implement this function based on your application\n            const finalTotal = getFinalTotal(); // Implement this function based on your application\n            const totalFreight = getTotalFreight(); // Implement this function based on your application\n\n            // Call the generatePDF function with the gathered data\n            (0,_generatePDF_js__WEBPACK_IMPORTED_MODULE_1__.generatePDF)(quoteItems, finalTotal, totalFreight);\n        });\n    }\n});\n\nfunction addFilteredItemToQuote() {\n    const quantityField = document.getElementById('quantity');\n    const quantity = quantityField.value;\n    if (quantity <= 0) {\n        alert('Please specify a quantity.');\n        return;\n    }\n    const mirrorSize = parseInt(currentSelections['size'], 10);\n\n    // Get the SKU and calculate the total price based on the quantity\n    const currentSelection = filteredData[0];\n    const sku = currentSelection['SKU'];\n    const basePrice = parseFloat(currentSelection['Total Price'].replace('$', ''));\n    const totalPrice = (basePrice * quantity).toFixed(2); // Assuming quantity affects total price linearly\n    const freightCharge = calculateFreightCharge(mirrorSize, quantity);\n    console.log('Freight charge:', freightCharge);\n\n\n    if (!sku) {\n        console.error('No item selected or SKU details are missing.');\n        return;\n    }\n\n    // Clone the template and update its content\n    const template = document.getElementById('qs-line-item-template');\n    if (!template) {\n        console.error('Template element not found.');\n        return;\n    }\n\n    const clone = template.content.cloneNode(true); // Ensure you're cloning the content for templates\n    const skuElement = clone.querySelector('[qs-value=\"sku\"]');\n    const quantityElement = clone.querySelector('[qs-value=\"quantity\"]');\n    const priceElement = clone.querySelector('[qs-value=\"price\"]');\n    const freightElement = document.querySelector('[qs-value=\"freight\"]');\n    let currentFreightTotal = freightElement.textContent.replace('$', '');\n    // Check if currentFreightTotal is not a number or zero, then initialize it to 0.0\n    currentFreightTotal = isNaN(parseFloat(currentFreightTotal)) ? 0.0 : parseFloat(currentFreightTotal);\n    const newFreightTotal = (currentFreightTotal + freightCharge).toFixed(2);\n    freightElement.textContent = `$${newFreightTotal}`;\n    console.log('New freight total:', newFreightTotal);\n    if (skuElement && quantityElement && priceElement) {\n        skuElement.textContent = sku;\n        quantityElement.textContent = quantity;\n        priceElement.textContent = `$${totalPrice}`;\n        document.getElementById('line-item-container').appendChild(clone);\n        clearFormAndResetSelections();\n    } else {\n        console.error('One or more elements could not be found in the template.');\n    }\n\n    updateTotals();\n  \n}\n\nfunction calculateFreightCharge(mirrorSize, quantity) {\n    if (mirrorSize < 3636) { // Mirrors smaller than 36\"x36\"\n        if (quantity <= 6) {\n            return 50 * quantity;\n        } else {\n            return calculateFreightChargeForTotal(quantity);\n        }\n    } else {\n        return calculateFreightChargeForTotal(quantity);\n    }\n}\n\nfunction calculateFreightChargeForTotal(totalQuantity) {\n    if (totalQuantity < 6) {\n        return 300;\n    } else if (totalQuantity >= 6 && totalQuantity < 11) {\n        return 450;\n    } else if (totalQuantity >= 11 && totalQuantity < 16) {\n        return 600;\n    } else if (totalQuantity >= 16 && totalQuantity < 21) {\n        return 700;\n    } else if (totalQuantity >= 21 && totalQuantity < 26) {\n        return 800;\n    } else {\n        console.log(\"For orders with more than 25 mirrors, please contact quotes@matrixmirrors.com.\");\n        return 0; // Assuming you want to return 0 or handle this case differently.\n    }\n}\n\nfunction updateTotals() {\n    let totalQuantity = 0;\n    let totalPrice = 0.0;\n\n    // Assuming each item added to the quote is within a container with a specific class\n    const items = document.querySelectorAll('.qs-line-item-row');\n    items.forEach(item => {\n        const quantity = parseInt(item.querySelector('[qs-value=\"quantity\"]').textContent, 10);\n        const price = parseFloat(item.querySelector('[qs-value=\"price\"]').textContent.replace('$', ''));\n        const freight = parseFloat(document.querySelector('[qs-value=\"freight\"]').textContent.replace('$', ''));\n        \n        totalQuantity += quantity;\n        totalPrice += price + freight;\n    });\n\n    // Update the total quantity and total price elements\n    const totalElement = document.querySelector('[qs-value=\"total\"]');\n    const quantityTotalElement = document.querySelector('[qs-value=\"quantity-total\"]');\n    \n    if (totalElement) {\n        totalElement.textContent = `$${totalPrice.toFixed(2)}`;\n    }\n    \n    if (quantityTotalElement) {\n        quantityTotalElement.textContent = totalQuantity.toString();\n    }\n}\n\nfunction clearFormAndResetSelections() {\n    // Reset the form fields to their default state\n    const formFields = ['product-line', 'mirror-style', 'light-direction', 'size', 'mirror-controls', 'accessories', 'quantity'];\n    formFields.forEach(fieldId => {\n        const field = document.getElementById(fieldId);\n        if (field) {\n            field.value = \"\"; // Reset field value\n        }\n    });\n\n    // Clear the currentSelections object\n    Object.keys(currentSelections).forEach(key => {\n        currentSelections[key] = \"\";\n    });\n\n    // Optionally, reset any UI elements or visibility states as needed\n    // For example, hide the \"add-another\" button again\n    document.getElementById('add-another').style.display = 'none';\n\n    // Reset visibility and UI state as needed\n    updateFieldVisibility();\n    updateTotals();\n\n    // If you have any additional UI reset logic, include it here\n}\n\n// Example implementations of the functions to gather data (you'll need to adjust these based on your actual data structure)\nfunction getQuoteItems() {\n    // Example: Fetching quote items from the DOM or state\n    // Return an array of quote item objects\n    return [...document.querySelectorAll('.qs-line-item-row')].map(item => {\n        return {\n            quantity: parseInt(item.querySelector('[qs-value=\"quantity\"]').textContent, 10),\n            product: item.querySelector('[qs-value=\"sku\"]').textContent,\n            total_price: parseFloat(item.querySelector('[qs-value=\"price\"]').textContent.replace('$', ''))\n        };\n    });\n}\n\nfunction getFinalTotal() {\n    // Example: Fetching final total from the DOM\n    return parseFloat(document.querySelector('[qs-value=\"total\"]').textContent.replace('$', ''));\n}\n\nfunction getTotalFreight() {\n    // Example: Fetching total freight from the DOM\n    return parseFloat(document.querySelector('[qs-value=\"freight\"]').textContent.replace('$', ''));\n}\n\n//# sourceURL=webpack://quoteapp/./src/index.js?");

/***/ })

},
/******/ function(__webpack_require__) { // webpackRuntimeModules
/******/ /* webpack/runtime/getFullHash */
/******/ (() => {
/******/ 	__webpack_require__.h = () => ("e0e4fdc0bae7145d3b74")
/******/ })();
/******/ 
/******/ }
);